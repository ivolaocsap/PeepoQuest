{"ast":null,"code":"var _jsxFileName = \"/Users/ivopascoal/Desktop/BabyPepe/src/views/Farms/ButtonStake.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { ButtonAction } from 'src/components/ButtonAction';\nimport styled from 'styled-components';\nimport useDiamondHand from 'src/hooks/useDiamondHand';\nimport useHandleTransactionReceipt from 'src/hooks/useHandleTransactionReceipt';\nimport { useConfiguration } from 'src/contexts/ConfigProvider/ConfigProvider';\nimport { useTokenBalance } from 'src/contexts/AccountBalanceProvider/AccountBalanceProvider';\nimport useApprove, { ApprovalState } from 'src/hooks/useApprove';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ButtonStatus;\n\n(function (ButtonStatus) {\n  ButtonStatus[ButtonStatus[\"notConnected\"] = 1] = \"notConnected\";\n  ButtonStatus[ButtonStatus[\"insufficient\"] = 2] = \"insufficient\";\n  ButtonStatus[ButtonStatus[\"requireApproval\"] = 3] = \"requireApproval\";\n  ButtonStatus[ButtonStatus[\"approvalPending\"] = 4] = \"approvalPending\";\n  ButtonStatus[ButtonStatus[\"paused\"] = 15] = \"paused\";\n  ButtonStatus[ButtonStatus[\"ready\"] = 20] = \"ready\";\n  ButtonStatus[ButtonStatus[\"notEnough\"] = 21] = \"notEnough\";\n})(ButtonStatus || (ButtonStatus = {}));\n\nexport const ButtonStake = ({\n  amount\n}) => {\n  _s();\n\n  const dh = useDiamondHand();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n  const config = useConfiguration();\n  const [token, setToken] = useState();\n  const balance = useTokenBalance(token);\n  useEffect(() => {\n    if (!dh || token) return;\n    setToken(dh.BABYPONY);\n  }, [dh, token]);\n  const buyAddress = useMemo(() => {\n    var _config$addresses;\n\n    if (!config) {\n      return;\n    }\n\n    return config === null || config === void 0 ? void 0 : (_config$addresses = config.addresses) === null || _config$addresses === void 0 ? void 0 : _config$addresses.MasterChef;\n  }, [config]);\n  const [approvalTokenState, approveToken] = useApprove(token, buyAddress);\n\n  const stake = async () => {\n    try {\n      var _dh$MASTERCHEF;\n\n      const tx = await handleTransactionReceipt((_dh$MASTERCHEF = dh.MASTERCHEF) === null || _dh$MASTERCHEF === void 0 ? void 0 : _dh$MASTERCHEF.deposit(0, amount), `Stake`);\n\n      if (tx && tx.response) {\n        await tx.response.wait();\n        tx.hideModal();\n      }\n    } catch {//\n    }\n  };\n\n  const status = useMemo(() => {\n    if (approvalTokenState == ApprovalState.PENDING) {\n      return ButtonStatus.approvalPending;\n    }\n\n    if (approvalTokenState !== ApprovalState.APPROVED) {\n      return ButtonStatus.requireApproval;\n    }\n\n    return ButtonStatus.ready;\n  }, [approvalTokenState, balance]);\n  const buttonText = useMemo(() => {\n    switch (status) {\n      case ButtonStatus.approvalPending:\n        return `Approving ${token === null || token === void 0 ? void 0 : token.symbol}...`;\n\n      case ButtonStatus.requireApproval:\n        return 'Approve';\n\n      default:\n        return 'Stake';\n    }\n  }, [status, token]);\n  const onClickBuy = useCallback(async () => {\n    switch (status) {\n      case ButtonStatus.requireApproval:\n        await approveToken();\n        break;\n\n      case ButtonStatus.approvalPending:\n        break;\n\n      case ButtonStatus.ready:\n        stake();\n        break;\n    }\n  }, [status, approveToken, stake]);\n  return /*#__PURE__*/_jsxDEV(StyledButtonAction, {\n    onClick: onClickBuy,\n    children: buttonText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ButtonStake, \"VZi4ktHUEcwCsTrBnPC/PSw0SM4=\", false, function () {\n  return [useDiamondHand, useHandleTransactionReceipt, useConfiguration, useTokenBalance, useApprove];\n});\n\n_c = ButtonStake;\nconst StyledButtonAction = styled(ButtonAction)`\n  display: inline-block;\n  width: initial;\n  text-color: #f4b5d2;\n  background-color: #ce118b;\n  :hover {\n    background-color:#a1118b;\n  }\n`;\n_c2 = StyledButtonAction;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ButtonStake\");\n$RefreshReg$(_c2, \"StyledButtonAction\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/BabyPepe/src/views/Farms/ButtonStake.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","ButtonAction","styled","useDiamondHand","useHandleTransactionReceipt","useConfiguration","useTokenBalance","useApprove","ApprovalState","ButtonStatus","ButtonStake","amount","dh","handleTransactionReceipt","config","token","setToken","balance","BABYPONY","buyAddress","addresses","MasterChef","approvalTokenState","approveToken","stake","tx","MASTERCHEF","deposit","response","wait","hideModal","status","PENDING","approvalPending","APPROVED","requireApproval","ready","buttonText","symbol","onClickBuy","StyledButtonAction"],"mappings":"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","sourcesContent":["import React, { forwardRef,useCallback, useEffect, useMemo, useState }  from 'react';\nimport { ButtonAction } from 'src/components/ButtonAction';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport styled from 'styled-components';\nimport useDiamondHand from 'src/hooks/useDiamondHand';\nimport useHandleTransactionReceipt from 'src/hooks/useHandleTransactionReceipt';\nimport { useConfiguration } from 'src/contexts/ConfigProvider/ConfigProvider';\nimport { useTokenBalance } from 'src/contexts/AccountBalanceProvider/AccountBalanceProvider';\nimport useApprove, { ApprovalState } from 'src/hooks/useApprove';\nimport ERC20 from 'src/diamondhand/ERC20';\n\nenum ButtonStatus {\n  notConnected = 1,\n  insufficient = 2,\n  requireApproval = 3,\n  approvalPending = 4,\n  paused = 15,\n  ready = 20,\n  notEnough = 21,\n}\n\ninterface ButtonStakeProps {\n  amount?: BigNumber;\n}\n\nexport const ButtonStake: React.ForwardRefRenderFunction<unknown, ButtonStakeProps> = ({ amount }) => {\n\n  const dh = useDiamondHand();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n  const config = useConfiguration();\n  const [token, setToken] = useState<ERC20 | undefined>();\nconst balance = useTokenBalance(token);\n\nuseEffect(() => {\n  if (!dh || token) return;\n  setToken(dh.BABYPONY);\n}, [dh, token]);\n\nconst buyAddress = useMemo(() => {\n  if (!config) {\n    return;\n  }\n  return config?.addresses?.MasterChef;\n}, [config]);\n\nconst [approvalTokenState, approveToken] = useApprove(token, buyAddress);\n  \n  const stake = async () => {\n    try {\n      const tx = await handleTransactionReceipt(\n        dh.MASTERCHEF?.deposit(0,amount),\n        `Stake`,\n      );\n      if (tx && tx.response) {\n        await tx.response.wait();\n        tx.hideModal();\n      }\n    } catch {\n      //\n    }\n  };\n\n  const status = useMemo(() => {\n\n\n    if (approvalTokenState == ApprovalState.PENDING) {\n      return ButtonStatus.approvalPending;\n    }\n\n    if (approvalTokenState !== ApprovalState.APPROVED) {\n      return ButtonStatus.requireApproval;\n    }\n\n    return ButtonStatus.ready;\n  }, [approvalTokenState, balance]);\n\n  const buttonText = useMemo(() => {\n    switch (status) {\n      case ButtonStatus.approvalPending:\n        return `Approving ${token?.symbol}...`;\n\n      case ButtonStatus.requireApproval:\n        return 'Approve';\n      default:\n        return 'Stake';\n    }\n  }, [status, token]);\n\n\n  const onClickBuy = useCallback(async () => {\n    switch (status) {\n      case ButtonStatus.requireApproval:\n        await approveToken();\n        break;\n      case ButtonStatus.approvalPending:\n        break;\n      case ButtonStatus.ready:\n        stake();\n        break;\n    }\n  }, [status,  approveToken, stake]);\n\n  return <StyledButtonAction onClick={onClickBuy}>{buttonText}</StyledButtonAction>;\n};\n\nconst StyledButtonAction = styled(ButtonAction)`\n  display: inline-block;\n  width: initial;\n  text-color: #f4b5d2;\n  background-color: #ce118b;\n  :hover {\n    background-color:#a1118b;\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}