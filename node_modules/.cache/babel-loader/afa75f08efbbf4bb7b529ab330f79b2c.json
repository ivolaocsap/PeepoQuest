{"ast":null,"code":"var _jsxFileName = \"/Users/ivopascoal/Desktop/PhysicalNFTs/src/views/Farms/Form.tsx\";\nimport * as React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Form extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n\n      if (this.validateForm()) {\n        const submitSuccess = await this.submitForm();\n        this.setState({\n          submitSuccess\n        });\n      }\n    };\n\n    const errors = {};\n    const values = {};\n    this.state = {\n      errors,\n      values\n    };\n  }\n  /**\n   * Returns whether there are any errors in the errors object that is passed in\n   * @param {IErrors} errors - The field errors\n   */\n\n\n  haveErrors(errors) {\n    let haveError = false;\n    Object.keys(errors).map(key => {\n      if (errors[key].length > 0) {\n        haveError = true;\n      }\n    });\n    return haveError;\n  }\n  /**\n   * Handles form submission\n   * @param {React.FormEvent<HTMLFormElement>} e - The form event\n   */\n\n\n  /**\n   * Executes the validation rules for all the fields on the form and sets the error state\n   * @returns {boolean} - Whether the form is valid or not\n   */\n  validateForm() {\n    // TODO - validate form\n    return true;\n  }\n  /**\n   * Submits the form to the http api\n   * @returns {boolean} - Whether the form submission was successful or not\n   */\n\n\n  async submitForm() {\n    // TODO - submit the form\n    return true;\n  }\n\n  render() {\n    const {\n      submitSuccess,\n      errors\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.handleSubmit,\n      noValidate: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-primary\",\n            disabled: this.haveErrors(errors),\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), submitSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-info\",\n          role: \"alert\",\n          children: \"The form was successfully submitted!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), submitSuccess === false && !this.haveErrors(errors) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-danger\",\n          role: \"alert\",\n          children: \"Sorry, an unexpected error has occurred\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }, this), submitSuccess === false && this.haveErrors(errors) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-danger\",\n          role: \"alert\",\n          children: \"Sorry, the form is invalid. Please review, adjust and try again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/PhysicalNFTs/src/views/Farms/Form.tsx"],"names":["React","Form","Component","constructor","props","handleSubmit","e","preventDefault","validateForm","submitSuccess","submitForm","setState","errors","values","state","haveErrors","haveError","Object","keys","map","key","length","render"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AA4BA,OAAO,MAAMC,IAAN,SAAmBD,KAAK,CAACE,SAAzB,CAA2D;AAChEC,EAAAA,WAAW,CAACC,KAAD,EAAoB;AAC7B,UAAMA,KAAN;;AAD6B,SA6BvBC,YA7BuB,GA6BR,MACrBC,CADqB,IAEH;AAClBA,MAAAA,CAAC,CAACC,cAAF;;AAEA,UAAI,KAAKC,YAAL,EAAJ,EAAyB;AACvB,cAAMC,aAAsB,GAAG,MAAM,KAAKC,UAAL,EAArC;AACA,aAAKC,QAAL,CAAc;AAAEF,UAAAA;AAAF,SAAd;AACD;AACF,KAtC8B;;AAG7B,UAAMG,MAAe,GAAG,EAAxB;AACA,UAAMC,MAAe,GAAG,EAAxB;AACA,SAAKC,KAAL,GAAa;AACXF,MAAAA,MADW;AAEXC,MAAAA;AAFW,KAAb;AAID;AAED;AACF;AACA;AACA;;;AACUE,EAAAA,UAAU,CAACH,MAAD,EAAkB;AAClC,QAAII,SAAkB,GAAG,KAAzB;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBO,GAApB,CAAyBC,GAAD,IAAiB;AACvC,UAAIR,MAAM,CAACQ,GAAD,CAAN,CAAYC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BL,QAAAA,SAAS,GAAG,IAAZ;AACD;AACF,KAJD;AAKA,WAAOA,SAAP;AACD;AAED;AACF;AACA;AACA;;;AAYE;AACF;AACA;AACA;AACUR,EAAAA,YAAY,GAAY;AAC9B;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;;;AAC0B,QAAVE,UAAU,GAAqB;AAC3C;AACA,WAAO,IAAP;AACD;;AAEMY,EAAAA,MAAM,GAAG;AACd,UAAM;AAAEb,MAAAA,aAAF;AAAiBG,MAAAA;AAAjB,QAA4B,KAAKE,KAAvC;AACA,wBACE;AAAM,MAAA,QAAQ,EAAE,KAAKT,YAArB;AAAmC,MAAA,UAAU,EAAE,IAA/C;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCAEE;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,iCACE;AACE,YAAA,IAAI,EAAC,QADP;AAEE,YAAA,SAAS,EAAC,iBAFZ;AAGE,YAAA,QAAQ,EAAE,KAAKU,UAAL,CAAgBH,MAAhB,CAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF,EAWGH,aAAa,iBACZ;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAkC,UAAA,IAAI,EAAC,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZJ,EAgBGA,aAAa,KAAK,KAAlB,IACC,CAAC,KAAKM,UAAL,CAAgBH,MAAhB,CADF,iBAEG;AAAK,UAAA,SAAS,EAAC,oBAAf;AAAoC,UAAA,IAAI,EAAC,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAlBN,EAsBGH,aAAa,KAAK,KAAlB,IACC,KAAKM,UAAL,CAAgBH,MAAhB,CADD,iBAEG;AAAK,UAAA,SAAS,EAAC,oBAAf;AAAoC,UAAA,IAAI,EAAC,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAxBN;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAiCD;;AA9F+D","sourcesContent":["import * as React from \"react\";\n\ninterface IFormProps {\n  /* The http path that the form will be posted to */\n  action: string;\n}\n\nexport interface IValues {\n  /* Key value pairs for all the field values with key being the field name */\n  [key: string]: any;\n}\n\nexport interface IErrors {\n  /* The validation error messages for each field (key is the field name */\n  [key: string]: string;\n}\n\nexport interface IFormState {\n  /* The field values */\n  values: IValues;\n\n  /* The field validation error messages */\n  errors: IErrors;\n\n  /* Whether the form has been successfully submitted */\n  submitSuccess?: boolean;\n}\n\nexport class Form extends React.Component<IFormProps, IFormState> {\n  constructor(props: IFormProps) {\n    super(props);\n\n    const errors: IErrors = {};\n    const values: IValues = {};\n    this.state = {\n      errors,\n      values\n    };\n  }\n\n  /**\n   * Returns whether there are any errors in the errors object that is passed in\n   * @param {IErrors} errors - The field errors\n   */\n  private haveErrors(errors: IErrors) {\n    let haveError: boolean = false;\n    Object.keys(errors).map((key: string) => {\n      if (errors[key].length > 0) {\n        haveError = true;\n      }\n    });\n    return haveError;\n  }\n\n  /**\n   * Handles form submission\n   * @param {React.FormEvent<HTMLFormElement>} e - The form event\n   */\n  private handleSubmit = async (\n    e: React.FormEvent<HTMLFormElement>\n  ): Promise<void> => {\n    e.preventDefault();\n\n    if (this.validateForm()) {\n      const submitSuccess: boolean = await this.submitForm();\n      this.setState({ submitSuccess });\n    }\n  };\n\n  /**\n   * Executes the validation rules for all the fields on the form and sets the error state\n   * @returns {boolean} - Whether the form is valid or not\n   */\n  private validateForm(): boolean {\n    // TODO - validate form\n    return true;\n  }\n\n  /**\n   * Submits the form to the http api\n   * @returns {boolean} - Whether the form submission was successful or not\n   */\n  private async submitForm(): Promise<boolean> {\n    // TODO - submit the form\n    return true;\n  }\n\n  public render() {\n    const { submitSuccess, errors } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit} noValidate={true}>\n        <div className=\"container\">\n          {/* TODO - render fields */}\n          <div className=\"form-group\">\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              disabled={this.haveErrors(errors)}\n            >\n              Submit\n            </button>\n          </div>\n          {submitSuccess && (\n            <div className=\"alert alert-info\" role=\"alert\">\n              The form was successfully submitted!\n            </div>\n          )}\n          {submitSuccess === false &&\n            !this.haveErrors(errors) && (\n              <div className=\"alert alert-danger\" role=\"alert\">\n                Sorry, an unexpected error has occurred\n              </div>\n            )}\n          {submitSuccess === false &&\n            this.haveErrors(errors) && (\n              <div className=\"alert alert-danger\" role=\"alert\">\n                Sorry, the form is invalid. Please review, adjust and try again\n              </div>\n            )}\n        </div>\n      </form>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}