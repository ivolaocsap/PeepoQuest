{"ast":null,"code":"import { ContractWrapper } from './ContractWrapper';\nexport class Nft extends ContractWrapper {\n  constructor(abi, address, signer) {\n    super(abi, address, signer);\n  }\n\n  async getNftInfo(NftId) {\n    const nftinfo = await this.contract.getNftData(NftId);\n\n    if (!nftinfo) {\n      return {};\n    }\n\n    return {\n      info: {\n        uri: nftinfo[0],\n        description: nftinfo[1],\n        mintable: nftinfo[2],\n        purchaseTokenID: nftinfo[3].toNumber(),\n        purchaseTokenAmount: nftinfo[4],\n        mintCap: nftinfo[5].toNumber(),\n        numberMinted: nftinfo[6].toNumber(),\n        admin: nftinfo[7]\n      }\n    };\n  }\n\n  async buynft(Id) {\n    return await this.contract.purchaseNft(Id);\n  }\n\n}","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/BabyPepe/src/diamondhand/Nft.ts"],"names":["ContractWrapper","Nft","constructor","abi","address","signer","getNftInfo","NftId","nftinfo","contract","getNftData","info","uri","description","mintable","purchaseTokenID","toNumber","purchaseTokenAmount","mintCap","numberMinted","admin","buynft","Id","purchaseNft"],"mappings":"AAKA,SAASA,eAAT,QAAgC,mBAAhC;AAeA,OAAO,MAAMC,GAAN,SAAkBD,eAAlB,CAAkC;AACvCE,EAAAA,WAAW,CACTC,GADS,EAETC,OAFS,EAGTC,MAHS,EAIT;AACA,UAAMF,GAAN,EAAWC,OAAX,EAAoBC,MAApB;AACD;;AAEe,QAAVC,UAAU,CAACC,KAAD,EAAgB;AAC9B,UAAMC,OAAO,GAAG,MAAM,KAAKC,QAAL,CAAcC,UAAd,CAAyBH,KAAzB,CAAtB;;AAGA,QAAI,CAACC,OAAL,EAAc;AACZ,aAAO,EAAP;AACD;;AAID,WAAO;AACLG,MAAAA,IAAI,EAAE;AACJC,QAAAA,GAAG,EAAEJ,OAAO,CAAC,CAAD,CADR;AAEJK,QAAAA,WAAW,EAAEL,OAAO,CAAC,CAAD,CAFhB;AAGJM,QAAAA,QAAQ,EAAEN,OAAO,CAAC,CAAD,CAHb;AAIJO,QAAAA,eAAe,EAAEP,OAAO,CAAC,CAAD,CAAP,CAAWQ,QAAX,EAJb;AAKJC,QAAAA,mBAAmB,EAAET,OAAO,CAAC,CAAD,CALxB;AAMJU,QAAAA,OAAO,EAAEV,OAAO,CAAC,CAAD,CAAP,CAAWQ,QAAX,EANL;AAOJG,QAAAA,YAAY,EAAEX,OAAO,CAAC,CAAD,CAAP,CAAWQ,QAAX,EAPV;AAQJI,QAAAA,KAAK,EAAEZ,OAAO,CAAC,CAAD;AARV;AADD,KAAP;AAaD;;AAKW,QAANa,MAAM,CAACC,EAAD,EAAa;AACvB,WAAO,MAAM,KAAKb,QAAL,CAAcc,WAAd,CAA0BD,EAA1B,CAAb;AACD;;AAvCsC","sourcesContent":["import { Provider } from '@ethersproject/abstract-provider';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Address } from 'cluster';\nimport fromUnixTime from 'date-fns/fromUnixTime';\nimport { ContractWrapper } from './ContractWrapper';\nimport { DiamondHand } from './DiamondHand';\n\nexport type NftInfo = {\n  info: {\n    uri: string;\n    description: string;\n    mintable: boolean;\n    purchaseTokenID: number;\n    purchaseTokenAmount: BigNumber;\n    mintCap: number;\n    numberMinted: number;\n    admin: Address;\n  };\n};\nexport class Nft extends ContractWrapper {\n  constructor(\n    abi: any[],\n    address: string,\n    signer: Signer | Provider,\n  ) {\n    super(abi, address, signer);\n  }\n\n  async getNftInfo(NftId: number) {\n    const nftinfo = await this.contract.getNftData(NftId);\n      \n\n    if (!nftinfo) {\n      return {} as NftInfo;\n    }\n\n    \n\n    return {\n      info: {\n        uri: nftinfo[0],\n        description: nftinfo[1],\n        mintable: nftinfo[2],\n        purchaseTokenID: nftinfo[3].toNumber(),\n        purchaseTokenAmount: nftinfo[4],\n        mintCap: nftinfo[5].toNumber(),\n        numberMinted: nftinfo[6].toNumber(),\n        admin: nftinfo[7]\n        \n      }\n    } as NftInfo;\n  }\n\n\n\n  \n  async buynft(Id: number) {\n    return await this.contract.purchaseNft(Id);\n  }\n\n\n\n  \n}\n\nexport type NFTinfo = {\n  \n    uri: string;\n    description:string;\n    mintable: boolean;\n    purchaseTokenID: BigNumber;\n    purchaseTokenAmount: BigNumber;\n    mintCap: BigNumber;\n    numberMinted: BigNumber;\n    admin: Address;\n  \n};\n\n\n"]},"metadata":{},"sourceType":"module"}