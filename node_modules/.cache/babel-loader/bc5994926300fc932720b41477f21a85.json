{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ivopascoal/Desktop/cuffies/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ivopascoal/Desktop/cuffies/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{FunctionFragment,Interface}from'@ethersproject/abi';var MulticallAbi=[{inputs:[{components:[{internalType:'address',name:'target',type:'address'},{internalType:'bytes',name:'callData',type:'bytes'}],internalType:'struct Multicall.Call[]',name:'calls',type:'tuple[]'}],name:'aggregate',outputs:[{internalType:'uint256',name:'blockNumber',type:'uint256'},{internalType:'bytes[]',name:'returnData',type:'bytes[]'}],stateMutability:'nonpayable',type:'function'},{inputs:[{internalType:'uint256',name:'blockNumber',type:'uint256'}],name:'getBlockHash',outputs:[{internalType:'bytes32',name:'blockHash',type:'bytes32'}],stateMutability:'view',type:'function'},{inputs:[],name:'getCurrentBlockCoinbase',outputs:[{internalType:'address',name:'coinbase',type:'address'}],stateMutability:'view',type:'function'},{inputs:[],name:'getCurrentBlockDifficulty',outputs:[{internalType:'uint256',name:'difficulty',type:'uint256'}],stateMutability:'view',type:'function'},{inputs:[],name:'getCurrentBlockGasLimit',outputs:[{internalType:'uint256',name:'gaslimit',type:'uint256'}],stateMutability:'view',type:'function'},{inputs:[],name:'getCurrentBlockTimestamp',outputs:[{internalType:'uint256',name:'timestamp',type:'uint256'}],stateMutability:'view',type:'function'},{inputs:[{internalType:'address',name:'addr',type:'address'}],name:'getEthBalance',outputs:[{internalType:'uint256',name:'balance',type:'uint256'}],stateMutability:'view',type:'function'},{inputs:[],name:'getLastBlockHash',outputs:[{internalType:'bytes32',name:'blockHash',type:'bytes32'}],stateMutability:'view',type:'function'}];var encodeCallData=function encodeCallData(call){var iface=call.contract?call.contract.interface:new Interface([\"function \".concat(call.signature)]);var method=call.method||FunctionFragment.fromString(call.signature).name;var callData=iface.encodeFunctionData(method,call.params||[]);return callData;};var decodeReturnData=function decodeReturnData(call,data){var iface=call.contract?call.contract.interface:new Interface([\"function \".concat(call.signature)]);var method=call.method||FunctionFragment.fromString(call.signature).name;try{var result=iface.decodeFunctionResult(method,data);return result;}catch(e){var _call$contract;console.warn('Can not decode result of call',{address:call.target||((_call$contract=call.contract)===null||_call$contract===void 0?void 0:_call$contract.address),method:call.signature||call.method});return[];}};var multicallInterface=new Interface(MulticallAbi);export var multicall=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(provider,multicallAddress,calls){var callData,aggregateData,response,_multicallInterface$d,returnData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(!calls||!calls.length)){_context.next=2;break;}return _context.abrupt(\"return\",[]);case 2:callData=calls.map(function(call){var _call$contract2;console.log('caaaaaaaaaaa',call);return[call.target||((_call$contract2=call.contract)===null||_call$contract2===void 0?void 0:_call$contract2.address),encodeCallData(call)];});aggregateData=multicallInterface.encodeFunctionData('aggregate',[callData]);console.log('multicall',multicallAddress,aggregateData);_context.next=7;return provider.send('eth_call',[{to:multicallAddress,data:aggregateData},'latest']);case 7:response=_context.sent;_multicallInterface$d=multicallInterface.decodeFunctionResult('aggregate',response),returnData=_multicallInterface$d.returnData;return _context.abrupt(\"return\",calls.map(function(call,index){return decodeReturnData(call,returnData[index]);}));case 10:case\"end\":return _context.stop();}}},_callee);}));return function multicall(_x,_x2,_x3){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/cuffies/src/diamondhand/multicall.ts"],"names":["FunctionFragment","Interface","MulticallAbi","inputs","components","internalType","name","type","outputs","stateMutability","encodeCallData","call","iface","contract","interface","signature","method","fromString","callData","encodeFunctionData","params","decodeReturnData","data","result","decodeFunctionResult","e","console","warn","address","target","multicallInterface","multicall","provider","multicallAddress","calls","length","map","log","aggregateData","send","to","response","returnData","index"],"mappings":"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","sourcesContent":["import { FunctionFragment, Interface } from '@ethersproject/abi';\nimport { Contract } from '@ethersproject/contracts';\nimport { JsonRpcProvider } from '@ethersproject/providers';\n\nconst MulticallAbi = [\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: 'address', name: 'target', type: 'address' },\n          { internalType: 'bytes', name: 'callData', type: 'bytes' },\n        ],\n        internalType: 'struct Multicall.Call[]',\n        name: 'calls',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'aggregate',\n    outputs: [\n      { internalType: 'uint256', name: 'blockNumber', type: 'uint256' },\n      { internalType: 'bytes[]', name: 'returnData', type: 'bytes[]' },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [{ internalType: 'uint256', name: 'blockNumber', type: 'uint256' }],\n    name: 'getBlockHash',\n    outputs: [{ internalType: 'bytes32', name: 'blockHash', type: 'bytes32' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getCurrentBlockCoinbase',\n    outputs: [{ internalType: 'address', name: 'coinbase', type: 'address' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getCurrentBlockDifficulty',\n    outputs: [{ internalType: 'uint256', name: 'difficulty', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getCurrentBlockGasLimit',\n    outputs: [{ internalType: 'uint256', name: 'gaslimit', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getCurrentBlockTimestamp',\n    outputs: [{ internalType: 'uint256', name: 'timestamp', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [{ internalType: 'address', name: 'addr', type: 'address' }],\n    name: 'getEthBalance',\n    outputs: [{ internalType: 'uint256', name: 'balance', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getLastBlockHash',\n    outputs: [{ internalType: 'bytes32', name: 'blockHash', type: 'bytes32' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n\nexport type Call = {\n  contract?: Contract;\n  method?: string;\n  target?: string;\n  signature?: string;\n  params?: any[];\n};\n\nconst encodeCallData = (call: Call) => {\n  const iface = call.contract\n    ? call.contract.interface\n    : new Interface([`function ${call.signature}`]);\n  const method = call.method || FunctionFragment.fromString(call.signature).name;\n  const callData = iface.encodeFunctionData(method, call.params || []);\n  return callData;\n};\n\nconst decodeReturnData = (call: Call, data: any) => {\n  const iface = call.contract\n    ? call.contract.interface\n    : new Interface([`function ${call.signature}`]);\n  const method = call.method || FunctionFragment.fromString(call.signature).name;\n  try {\n    const result = iface.decodeFunctionResult(method, data);\n    return result as any[];\n  } catch (e) {\n    console.warn('Can not decode result of call', {\n      address: call.target || call.contract?.address,\n      method: call.signature || call.method,\n    });\n\n    return [];\n  }\n};\n\nconst multicallInterface = new Interface(MulticallAbi);\n\nexport const multicall = async (\n  provider: JsonRpcProvider,\n  multicallAddress: string,\n  calls: Call[],\n) => {\n  if (!calls || !calls.length) {\n    return [];\n  }\n  const callData = calls.map((call) => {\n    console.log('caaaaaaaaaaa', call);\n    return [call.target || call.contract?.address, encodeCallData(call)];\n  });\n  const aggregateData = multicallInterface.encodeFunctionData('aggregate', [callData]);\n\n  console.log('multicall', multicallAddress, aggregateData);\n  const response = await provider.send('eth_call', [\n    {\n      to: multicallAddress,\n      data: aggregateData,\n    },\n    'latest',\n  ]);\n  const { returnData } = multicallInterface.decodeFunctionResult('aggregate', response);\n\n  return calls.map((call, index) => {\n    return decodeReturnData(call, returnData[index]);\n  });\n};\n"]},"metadata":{},"sourceType":"module"}