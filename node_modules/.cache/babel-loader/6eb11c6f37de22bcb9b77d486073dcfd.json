{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { BscConnector } from '@binance-chain/bsc-connector';\nimport { useMemo } from 'react';\nimport { ConnectorNames } from 'src/state/application/reducer';\nimport { useConfiguration } from 'src/contexts/ConfigProvider/ConfigProvider';\nconst POLLING_INTERVAL = 1000000;\n\nconst useWalletConnectors = () => {\n  _s();\n\n  const {\n    chainId,\n    defaultProvider\n  } = useConfiguration();\n  return useMemo(() => {\n    if (!defaultProvider) {\n      return {};\n    }\n\n    const networkUrl = Array.isArray(defaultProvider) ? defaultProvider[0] : defaultProvider;\n\n    if (!chainId || !networkUrl) {\n      throw new Error('Network configuration is invalid');\n    }\n\n    const injected = new InjectedConnector({\n      supportedChainIds: [chainId]\n    });\n    const binanceConnect = new BscConnector({\n      supportedChainIds: [chainId]\n    });\n    const walletConnect = new WalletConnectConnector({\n      rpc: {\n        [chainId]: networkUrl\n      },\n      bridge: 'https://bridge.walletconnect.org',\n      qrcode: true,\n      pollingInterval: POLLING_INTERVAL\n    });\n    return {\n      [ConnectorNames.Injected]: injected,\n      [ConnectorNames.WalletConnect]: walletConnect,\n      [ConnectorNames.BSC]: binanceConnect\n    };\n  }, [chainId, defaultProvider]);\n};\n\n_s(useWalletConnectors, \"ySOTLqnct8jcZp/so7OVbymkIq8=\", false, function () {\n  return [useConfiguration];\n});\n\nexport default useWalletConnectors;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/BabyPepe/src/hooks/useWalletConnectors.ts"],"names":["InjectedConnector","WalletConnectConnector","BscConnector","useMemo","ConnectorNames","useConfiguration","POLLING_INTERVAL","useWalletConnectors","chainId","defaultProvider","networkUrl","Array","isArray","Error","injected","supportedChainIds","binanceConnect","walletConnect","rpc","bridge","qrcode","pollingInterval","Injected","WalletConnect","BSC"],"mappings":";;AAAA,SAASA,iBAAT,QAAkC,gCAAlC;AACA,SAASC,sBAAT,QAAuC,qCAAvC;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,gBAAT,QAAiC,4CAAjC;AAEA,MAAMC,gBAAgB,GAAG,OAAzB;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAAA;;AAChC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA+BJ,gBAAgB,EAArD;AAEA,SAAOF,OAAO,CAAC,MAAM;AACnB,QAAI,CAACM,eAAL,EAAsB;AACpB,aAAO,EAAP;AACD;;AAED,UAAMC,UAAU,GAAGC,KAAK,CAACC,OAAN,CAAcH,eAAd,IAAiCA,eAAe,CAAC,CAAD,CAAhD,GAAsDA,eAAzE;;AAEA,QAAI,CAACD,OAAD,IAAY,CAACE,UAAjB,EAA6B;AAC3B,YAAM,IAAIG,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAED,UAAMC,QAAQ,GAAG,IAAId,iBAAJ,CAAsB;AAAEe,MAAAA,iBAAiB,EAAE,CAACP,OAAD;AAArB,KAAtB,CAAjB;AACA,UAAMQ,cAAc,GAAG,IAAId,YAAJ,CAAiB;AAAEa,MAAAA,iBAAiB,EAAE,CAACP,OAAD;AAArB,KAAjB,CAAvB;AAEA,UAAMS,aAAa,GAAG,IAAIhB,sBAAJ,CAA2B;AAC/CiB,MAAAA,GAAG,EAAE;AAAE,SAACV,OAAD,GAAWE;AAAb,OAD0C;AAE/CS,MAAAA,MAAM,EAAE,kCAFuC;AAG/CC,MAAAA,MAAM,EAAE,IAHuC;AAI/CC,MAAAA,eAAe,EAAEf;AAJ8B,KAA3B,CAAtB;AAOA,WAAO;AACL,OAACF,cAAc,CAACkB,QAAhB,GAA2BR,QADtB;AAEL,OAACV,cAAc,CAACmB,aAAhB,GAAgCN,aAF3B;AAGL,OAACb,cAAc,CAACoB,GAAhB,GAAsBR;AAHjB,KAAP;AAKD,GA1Ba,EA0BX,CAACR,OAAD,EAAUC,eAAV,CA1BW,CAAd;AA2BD,CA9BD;;GAAMF,mB;UACiCF,gB;;;AA+BvC,eAAeE,mBAAf","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { BscConnector } from '@binance-chain/bsc-connector';\nimport { useMemo } from 'react';\nimport { ConnectorNames } from 'src/state/application/reducer';\nimport { useConfiguration } from 'src/contexts/ConfigProvider/ConfigProvider';\n\nconst POLLING_INTERVAL = 1000000;\n\nconst useWalletConnectors = () => {\n  const { chainId, defaultProvider } = useConfiguration();\n\n  return useMemo(() => {\n    if (!defaultProvider) {\n      return {};\n    }\n\n    const networkUrl = Array.isArray(defaultProvider) ? defaultProvider[0] : defaultProvider;\n\n    if (!chainId || !networkUrl) {\n      throw new Error('Network configuration is invalid');\n    }\n\n    const injected = new InjectedConnector({ supportedChainIds: [chainId] });\n    const binanceConnect = new BscConnector({ supportedChainIds: [chainId] });\n\n    const walletConnect = new WalletConnectConnector({\n      rpc: { [chainId]: networkUrl },\n      bridge: 'https://bridge.walletconnect.org',\n      qrcode: true,\n      pollingInterval: POLLING_INTERVAL,\n    });\n\n    return {\n      [ConnectorNames.Injected]: injected,\n      [ConnectorNames.WalletConnect]: walletConnect,\n      [ConnectorNames.BSC]: binanceConnect,\n    };\n  }, [chainId, defaultProvider]);\n};\n\nexport default useWalletConnectors;\n"]},"metadata":{},"sourceType":"module"}