{"ast":null,"code":"/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */\n;\n\n(function (global) {\n  'use strict';\n  /*\n    bignumber.js v2.0.7\n    A JavaScript library for arbitrary-precision arithmetic.\n    https://github.com/MikeMcl/bignumber.js\n    Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>\n    MIT Expat Licence\n  */\n\n  var BigNumber,\n      crypto,\n      parseNumeric,\n      isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n      mathceil = Math.ceil,\n      mathfloor = Math.floor,\n      notBool = ' not a boolean or binary digit',\n      roundingMode = 'rounding mode',\n      tooManyDigits = 'number type has more than 15 significant digits',\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\n      BASE = 1e14,\n      LOG_BASE = 14,\n      MAX_SAFE_INTEGER = 0x1fffffffffffff,\n      // 2^53 - 1\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n      SQRT_BASE = 1e7,\n\n  /*\n   * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n   * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\n   * exception is thrown (if ERRORS is true).\n   */\n  MAX = 1E9; // 0 to MAX_INT32\n\n  /*\n   * Create and return a BigNumber constructor.\n   */\n\n  function another(configObj) {\n    var div,\n        // id tracks the caller function, so its name can be included in error messages.\n    id = 0,\n        P = BigNumber.prototype,\n        ONE = new BigNumber(1),\n\n    /********************************* EDITABLE DEFAULTS **********************************/\n\n    /*\n     * The default values below must be integers within the inclusive ranges stated.\n     * The values can also be changed at run-time using BigNumber.config.\n     */\n    // The maximum number of decimal places for operations involving division.\n    DECIMAL_PLACES = 20,\n        // 0 to MAX\n\n    /*\n     * The rounding mode used when rounding to the above decimal places, and when using\n     * toExponential, toFixed, toFormat and toPrecision, and round (default value).\n     * UP         0 Away from zero.\n     * DOWN       1 Towards zero.\n     * CEIL       2 Towards +Infinity.\n     * FLOOR      3 Towards -Infinity.\n     * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n     * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n     * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n     * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n     * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n     */\n    ROUNDING_MODE = 4,\n        // 0 to 8\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n    // The exponent value at and beneath which toString returns exponential notation.\n    // Number type: -7\n    TO_EXP_NEG = -7,\n        // 0 to -MAX\n    // The exponent value at and above which toString returns exponential notation.\n    // Number type: 21\n    TO_EXP_POS = 21,\n        // 0 to MAX\n    // RANGE : [MIN_EXP, MAX_EXP]\n    // The minimum exponent value, beneath which underflow to zero occurs.\n    // Number type: -324  (5e-324)\n    MIN_EXP = -1e7,\n        // -1 to -MAX\n    // The maximum exponent value, above which overflow to Infinity occurs.\n    // Number type:  308  (1.7976931348623157e+308)\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n    MAX_EXP = 1e7,\n        // 1 to MAX\n    // Whether BigNumber Errors are ever thrown.\n    ERRORS = true,\n        // true or false\n    // Change to intValidatorNoErrors if ERRORS is false.\n    isValidInt = intValidatorWithErrors,\n        // intValidatorWithErrors/intValidatorNoErrors\n    // Whether to use cryptographically-secure random number generation, if available.\n    CRYPTO = false,\n        // true or false\n\n    /*\n     * The modulo mode used when calculating the modulus: a mod n.\n     * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n     * The remainder (r) is calculated as: r = a - n * q.\n     *\n     * UP        0 The remainder is positive if the dividend is negative, else is negative.\n     * DOWN      1 The remainder has the same sign as the dividend.\n     *             This modulo mode is commonly known as 'truncated division' and is\n     *             equivalent to (a % n) in JavaScript.\n     * FLOOR     3 The remainder has the same sign as the divisor (Python %).\n     * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n     * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n     *             The remainder is always positive.\n     *\n     * The truncated division, floored division, Euclidian division and IEEE 754 remainder\n     * modes are commonly used for the modulus operation.\n     * Although the other rounding modes can also be used, they may not give useful results.\n     */\n    MODULO_MODE = 1,\n        // 0 to 9\n    // The maximum number of significant digits of the result of the toPower operation.\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\n    POW_PRECISION = 100,\n        // 0 to MAX\n    // The format specification used by the BigNumber.prototype.toFormat method.\n    FORMAT = {\n      decimalSeparator: '.',\n      groupSeparator: ',',\n      groupSize: 3,\n      secondaryGroupSize: 0,\n      fractionGroupSeparator: '\\xA0',\n      // non-breaking space\n      fractionGroupSize: 0\n    };\n    /******************************************************************************************/\n    // CONSTRUCTOR\n\n    /*\n     * The BigNumber constructor and exported function.\n     * Create and return a new instance of a BigNumber object.\n     *\n     * n {number|string|BigNumber} A numeric value.\n     * [b] {number} The base of n. Integer, 2 to 64 inclusive.\n     */\n\n    function BigNumber(n, b) {\n      var c,\n          e,\n          i,\n          num,\n          len,\n          str,\n          x = this; // Enable constructor usage without new.\n\n      if (!(x instanceof BigNumber)) {\n        // 'BigNumber() constructor call without new: {n}'\n        if (ERRORS) raise(26, 'constructor call without new', n);\n        return new BigNumber(n, b);\n      } // 'new BigNumber() base not an integer: {b}'\n      // 'new BigNumber() base out of range: {b}'\n\n\n      if (b == null || !isValidInt(b, 2, 64, id, 'base')) {\n        // Duplicate.\n        if (n instanceof BigNumber) {\n          x.s = n.s;\n          x.e = n.e;\n          x.c = (n = n.c) ? n.slice() : n;\n          id = 0;\n          return;\n        }\n\n        if ((num = typeof n == 'number') && n * 0 == 0) {\n          x.s = 1 / n < 0 ? (n = -n, -1) : 1; // Fast path for integers.\n\n          if (n === ~~n) {\n            for (e = 0, i = n; i >= 10; i /= 10, e++);\n\n            x.e = e;\n            x.c = [n];\n            id = 0;\n            return;\n          }\n\n          str = n + '';\n        } else {\n          if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, num);\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n        }\n      } else {\n        b = b | 0;\n        str = n + ''; // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\n        // Allow exponential notation to be used with base 10 argument.\n\n        if (b == 10) {\n          x = new BigNumber(n instanceof BigNumber ? n : str);\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n        } // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n        // Any number in exponential form will fail due to the [Ee][+-].\n\n\n        if ((num = typeof n == 'number') && n * 0 != 0 || !new RegExp('^-?' + (c = '[' + ALPHABET.slice(0, b) + ']+') + '(?:\\\\.' + c + ')?$', b < 37 ? 'i' : '').test(str)) {\n          return parseNumeric(x, str, num, b);\n        }\n\n        if (num) {\n          x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\n\n          if (ERRORS && str.replace(/^0\\.0*|\\./, '').length > 15) {\n            // 'new BigNumber() number type has more than 15 significant digits: {n}'\n            raise(id, tooManyDigits, n);\n          } // Prevent later check for length on converted number.\n\n\n          num = false;\n        } else {\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n        }\n\n        str = convertBase(str, 10, b, x.s);\n      } // Decimal point?\n\n\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?\n\n      if ((i = str.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0) e = i;\n        e += +str.slice(i + 1);\n        str = str.substring(0, i);\n      } else if (e < 0) {\n        // Integer.\n        e = str.length;\n      } // Determine leading zeros.\n\n\n      for (i = 0; str.charCodeAt(i) === 48; i++); // Determine trailing zeros.\n\n\n      for (len = str.length; str.charCodeAt(--len) === 48;);\n\n      str = str.slice(i, len + 1);\n\n      if (str) {\n        len = str.length; // Disallow numbers with over 15 significant digits if number type.\n        // 'new BigNumber() number type has more than 15 significant digits: {n}'\n\n        if (num && ERRORS && len > 15) raise(id, tooManyDigits, x.s * n);\n        e = e - i - 1; // Overflow?\n\n        if (e > MAX_EXP) {\n          // Infinity.\n          x.c = x.e = null; // Underflow?\n        } else if (e < MIN_EXP) {\n          // Zero.\n          x.c = [x.e = 0];\n        } else {\n          x.e = e;\n          x.c = []; // Transform base\n          // e is the base 10 exponent.\n          // i is where to slice str to get the first element of the coefficient array.\n\n          i = (e + 1) % LOG_BASE;\n          if (e < 0) i += LOG_BASE;\n\n          if (i < len) {\n            if (i) x.c.push(+str.slice(0, i));\n\n            for (len -= LOG_BASE; i < len;) {\n              x.c.push(+str.slice(i, i += LOG_BASE));\n            }\n\n            str = str.slice(i);\n            i = LOG_BASE - str.length;\n          } else {\n            i -= len;\n          }\n\n          for (; i--; str += '0');\n\n          x.c.push(+str);\n        }\n      } else {\n        // Zero.\n        x.c = [x.e = 0];\n      }\n\n      id = 0;\n    } // CONSTRUCTOR PROPERTIES\n\n\n    BigNumber.another = another;\n    BigNumber.ROUND_UP = 0;\n    BigNumber.ROUND_DOWN = 1;\n    BigNumber.ROUND_CEIL = 2;\n    BigNumber.ROUND_FLOOR = 3;\n    BigNumber.ROUND_HALF_UP = 4;\n    BigNumber.ROUND_HALF_DOWN = 5;\n    BigNumber.ROUND_HALF_EVEN = 6;\n    BigNumber.ROUND_HALF_CEIL = 7;\n    BigNumber.ROUND_HALF_FLOOR = 8;\n    BigNumber.EUCLID = 9;\n    /*\n     * Configure infrequently-changing library-wide settings.\n     *\n     * Accept an object or an argument list, with one or many of the following properties or\n     * parameters respectively:\n     *\n     *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\n     *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\n     *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\n     *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\n     *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\n     *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\n     *   ERRORS          {boolean|number}   true, false, 1 or 0\n     *   CRYPTO          {boolean|number}   true, false, 1 or 0\n     *   MODULO_MODE     {number}           0 to 9 inclusive\n     *   POW_PRECISION   {number}           0 to MAX inclusive\n     *   FORMAT          {object}           See BigNumber.prototype.toFormat\n     *      decimalSeparator       {string}\n     *      groupSeparator         {string}\n     *      groupSize              {number}\n     *      secondaryGroupSize     {number}\n     *      fractionGroupSeparator {string}\n     *      fractionGroupSize      {number}\n     *\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\n     *\n     * E.g.\n     * BigNumber.config(20, 4) is equivalent to\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\n     *\n     * Ignore properties/parameters set to null or undefined.\n     * Return an object with the properties current values.\n     */\n\n    BigNumber.config = function () {\n      var v,\n          p,\n          i = 0,\n          r = {},\n          a = arguments,\n          o = a[0],\n          has = o && typeof o == 'object' ? function () {\n        if (o.hasOwnProperty(p)) return (v = o[p]) != null;\n      } : function () {\n        if (a.length > i) return (v = a[i++]) != null;\n      }; // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n      // 'config() DECIMAL_PLACES not an integer: {v}'\n      // 'config() DECIMAL_PLACES out of range: {v}'\n\n      if (has(p = 'DECIMAL_PLACES') && isValidInt(v, 0, MAX, 2, p)) {\n        DECIMAL_PLACES = v | 0;\n      }\n\n      r[p] = DECIMAL_PLACES; // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n      // 'config() ROUNDING_MODE not an integer: {v}'\n      // 'config() ROUNDING_MODE out of range: {v}'\n\n      if (has(p = 'ROUNDING_MODE') && isValidInt(v, 0, 8, 2, p)) {\n        ROUNDING_MODE = v | 0;\n      }\n\n      r[p] = ROUNDING_MODE; // EXPONENTIAL_AT {number|number[]}\n      // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n      // 'config() EXPONENTIAL_AT not an integer: {v}'\n      // 'config() EXPONENTIAL_AT out of range: {v}'\n\n      if (has(p = 'EXPONENTIAL_AT')) {\n        if (isArray(v)) {\n          if (isValidInt(v[0], -MAX, 0, 2, p) && isValidInt(v[1], 0, MAX, 2, p)) {\n            TO_EXP_NEG = v[0] | 0;\n            TO_EXP_POS = v[1] | 0;\n          }\n        } else if (isValidInt(v, -MAX, MAX, 2, p)) {\n          TO_EXP_NEG = -(TO_EXP_POS = (v < 0 ? -v : v) | 0);\n        }\n      }\n\n      r[p] = [TO_EXP_NEG, TO_EXP_POS]; // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n      // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n      // 'config() RANGE not an integer: {v}'\n      // 'config() RANGE cannot be zero: {v}'\n      // 'config() RANGE out of range: {v}'\n\n      if (has(p = 'RANGE')) {\n        if (isArray(v)) {\n          if (isValidInt(v[0], -MAX, -1, 2, p) && isValidInt(v[1], 1, MAX, 2, p)) {\n            MIN_EXP = v[0] | 0;\n            MAX_EXP = v[1] | 0;\n          }\n        } else if (isValidInt(v, -MAX, MAX, 2, p)) {\n          if (v | 0) MIN_EXP = -(MAX_EXP = (v < 0 ? -v : v) | 0);else if (ERRORS) raise(2, p + ' cannot be zero', v);\n        }\n      }\n\n      r[p] = [MIN_EXP, MAX_EXP]; // ERRORS {boolean|number} true, false, 1 or 0.\n      // 'config() ERRORS not a boolean or binary digit: {v}'\n\n      if (has(p = 'ERRORS')) {\n        if (v === !!v || v === 1 || v === 0) {\n          id = 0;\n          isValidInt = (ERRORS = !!v) ? intValidatorWithErrors : intValidatorNoErrors;\n        } else if (ERRORS) {\n          raise(2, p + notBool, v);\n        }\n      }\n\n      r[p] = ERRORS; // CRYPTO {boolean|number} true, false, 1 or 0.\n      // 'config() CRYPTO not a boolean or binary digit: {v}'\n      // 'config() crypto unavailable: {crypto}'\n\n      if (has(p = 'CRYPTO')) {\n        if (v === !!v || v === 1 || v === 0) {\n          CRYPTO = !!(v && crypto && typeof crypto == 'object');\n          if (v && !CRYPTO && ERRORS) raise(2, 'crypto unavailable', crypto);\n        } else if (ERRORS) {\n          raise(2, p + notBool, v);\n        }\n      }\n\n      r[p] = CRYPTO; // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n      // 'config() MODULO_MODE not an integer: {v}'\n      // 'config() MODULO_MODE out of range: {v}'\n\n      if (has(p = 'MODULO_MODE') && isValidInt(v, 0, 9, 2, p)) {\n        MODULO_MODE = v | 0;\n      }\n\n      r[p] = MODULO_MODE; // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n      // 'config() POW_PRECISION not an integer: {v}'\n      // 'config() POW_PRECISION out of range: {v}'\n\n      if (has(p = 'POW_PRECISION') && isValidInt(v, 0, MAX, 2, p)) {\n        POW_PRECISION = v | 0;\n      }\n\n      r[p] = POW_PRECISION; // FORMAT {object}\n      // 'config() FORMAT not an object: {v}'\n\n      if (has(p = 'FORMAT')) {\n        if (typeof v == 'object') {\n          FORMAT = v;\n        } else if (ERRORS) {\n          raise(2, p + ' not an object', v);\n        }\n      }\n\n      r[p] = FORMAT;\n      return r;\n    };\n    /*\n     * Return a new BigNumber whose value is the maximum of the arguments.\n     *\n     * arguments {number|string|BigNumber}\n     */\n\n\n    BigNumber.max = function () {\n      return maxOrMin(arguments, P.lt);\n    };\n    /*\n     * Return a new BigNumber whose value is the minimum of the arguments.\n     *\n     * arguments {number|string|BigNumber}\n     */\n\n\n    BigNumber.min = function () {\n      return maxOrMin(arguments, P.gt);\n    };\n    /*\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\n     * zeros are produced).\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n     *\n     * 'random() decimal places not an integer: {dp}'\n     * 'random() decimal places out of range: {dp}'\n     * 'random() crypto unavailable: {crypto}'\n     */\n\n\n    BigNumber.random = function () {\n      var pow2_53 = 0x20000000000000; // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n      // Check if Math.random() produces more than 32 bits of randomness.\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n\n      var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n        return mathfloor(Math.random() * pow2_53);\n      } : function () {\n        return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n      };\n      return function (dp) {\n        var a,\n            b,\n            e,\n            k,\n            v,\n            i = 0,\n            c = [],\n            rand = new BigNumber(ONE);\n        dp = dp == null || !isValidInt(dp, 0, MAX, 14) ? DECIMAL_PLACES : dp | 0;\n        k = mathceil(dp / LOG_BASE);\n\n        if (CRYPTO) {\n          // Browsers supporting crypto.getRandomValues.\n          if (crypto && crypto.getRandomValues) {\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n            for (; i < k;) {\n              // 53 bits:\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n              //                                     11111 11111111 11111111\n              // 0x20000 is 2^21.\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11); // Rejection sampling:\n              // 0 <= v < 9007199254740992\n              // Probability that v >= 9e15, is\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n\n              if (v >= 9e15) {\n                b = crypto.getRandomValues(new Uint32Array(2));\n                a[i] = b[0];\n                a[i + 1] = b[1];\n              } else {\n                // 0 <= v <= 8999999999999999\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 2;\n              }\n            }\n\n            i = k / 2; // Node.js supporting crypto.randomBytes.\n          } else if (crypto && crypto.randomBytes) {\n            // buffer\n            a = crypto.randomBytes(k *= 7);\n\n            for (; i < k;) {\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n              // 0 <= v < 9007199254740992\n              v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n              if (v >= 9e15) {\n                crypto.randomBytes(7).copy(a, i);\n              } else {\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 7;\n              }\n            }\n\n            i = k / 7;\n          } else if (ERRORS) {\n            raise(14, 'crypto unavailable', crypto);\n          }\n        } // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.\n\n\n        if (!i) {\n          for (; i < k;) {\n            v = random53bitInt();\n            if (v < 9e15) c[i++] = v % 1e14;\n          }\n        }\n\n        k = c[--i];\n        dp %= LOG_BASE; // Convert trailing digits to zeros according to dp.\n\n        if (k && dp) {\n          v = POWS_TEN[LOG_BASE - dp];\n          c[i] = mathfloor(k / v) * v;\n        } // Remove trailing elements which are zero.\n\n\n        for (; c[i] === 0; c.pop(), i--); // Zero?\n\n\n        if (i < 0) {\n          c = [e = 0];\n        } else {\n          // Remove leading elements which are zero and adjust exponent accordingly.\n          for (e = -1; c[0] === 0; c.shift(), e -= LOG_BASE); // Count the digits of the first element of c to determine leading zeros, and...\n\n\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++); // adjust the exponent accordingly.\n\n\n          if (i < LOG_BASE) e -= LOG_BASE - i;\n        }\n\n        rand.e = e;\n        rand.c = c;\n        return rand;\n      };\n    }(); // PRIVATE FUNCTIONS\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\n\n\n    function convertBase(str, baseOut, baseIn, sign) {\n      var d,\n          e,\n          k,\n          r,\n          x,\n          xc,\n          y,\n          i = str.indexOf('.'),\n          dp = DECIMAL_PLACES,\n          rm = ROUNDING_MODE;\n      if (baseIn < 37) str = str.toLowerCase(); // Non-integer.\n\n      if (i >= 0) {\n        k = POW_PRECISION; // Unlimited precision.\n\n        POW_PRECISION = 0;\n        str = str.replace('.', '');\n        y = new BigNumber(baseIn);\n        x = y.pow(str.length - i);\n        POW_PRECISION = k; // Convert str as if an integer, then restore the fraction part by dividing the\n        // result by its base raised to a power.\n\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e), 10, baseOut);\n        y.e = y.c.length;\n      } // Convert the number as integer.\n\n\n      xc = toBaseOut(str, baseIn, baseOut);\n      e = k = xc.length; // Remove trailing zeros.\n\n      for (; xc[--k] == 0; xc.pop());\n\n      if (!xc[0]) return '0';\n\n      if (i < 0) {\n        --e;\n      } else {\n        x.c = xc;\n        x.e = e; // sign is needed for correct rounding.\n\n        x.s = sign;\n        x = div(x, y, dp, rm, baseOut);\n        xc = x.c;\n        r = x.r;\n        e = x.e;\n      }\n\n      d = e + dp + 1; // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\n\n      i = xc[d];\n      k = baseOut / 2;\n      r = r || d < 0 || xc[d + 1] != null;\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));\n\n      if (d < 1 || !xc[0]) {\n        // 1^-dp or 0.\n        str = r ? toFixedPoint('1', -dp) : '0';\n      } else {\n        xc.length = d;\n\n        if (r) {\n          // Rounding up may mean the previous digit has to be rounded up and so on.\n          for (--baseOut; ++xc[--d] > baseOut;) {\n            xc[d] = 0;\n\n            if (!d) {\n              ++e;\n              xc.unshift(1);\n            }\n          }\n        } // Determine trailing zeros.\n\n\n        for (k = xc.length; !xc[--k];); // E.g. [4, 11, 15] becomes 4bf.\n\n\n        for (i = 0, str = ''; i <= k; str += ALPHABET.charAt(xc[i++]));\n\n        str = toFixedPoint(str, e);\n      } // The caller will add the sign.\n\n\n      return str;\n    } // Perform division in the specified base. Called by div and convertBase.\n\n\n    div = function () {\n      // Assume non-zero x and k.\n      function multiply(x, k, base) {\n        var m,\n            temp,\n            xlo,\n            xhi,\n            carry = 0,\n            i = x.length,\n            klo = k % SQRT_BASE,\n            khi = k / SQRT_BASE | 0;\n\n        for (x = x.slice(); i--;) {\n          xlo = x[i] % SQRT_BASE;\n          xhi = x[i] / SQRT_BASE | 0;\n          m = khi * xlo + xhi * klo;\n          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n          x[i] = temp % base;\n        }\n\n        if (carry) x.unshift(carry);\n        return x;\n      }\n\n      function compare(a, b, aL, bL) {\n        var i, cmp;\n\n        if (aL != bL) {\n          cmp = aL > bL ? 1 : -1;\n        } else {\n          for (i = cmp = 0; i < aL; i++) {\n            if (a[i] != b[i]) {\n              cmp = a[i] > b[i] ? 1 : -1;\n              break;\n            }\n          }\n        }\n\n        return cmp;\n      }\n\n      function subtract(a, b, aL, base) {\n        var i = 0; // Subtract b from a.\n\n        for (; aL--;) {\n          a[aL] -= i;\n          i = a[aL] < b[aL] ? 1 : 0;\n          a[aL] = i * base + a[aL] - b[aL];\n        } // Remove leading zeros.\n\n\n        for (; !a[0] && a.length > 1; a.shift());\n      } // x: dividend, y: divisor.\n\n\n      return function (x, y, dp, rm, base) {\n        var cmp,\n            e,\n            i,\n            more,\n            n,\n            prod,\n            prodL,\n            q,\n            qc,\n            rem,\n            remL,\n            rem0,\n            xi,\n            xL,\n            yc0,\n            yL,\n            yz,\n            s = x.s == y.s ? 1 : -1,\n            xc = x.c,\n            yc = y.c; // Either NaN, Infinity or 0?\n\n        if (!xc || !xc[0] || !yc || !yc[0]) {\n          return new BigNumber( // Return NaN if either NaN, or both Infinity or 0.\n          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n        }\n\n        q = new BigNumber(s);\n        qc = q.c = [];\n        e = x.e - y.e;\n        s = dp + e + 1;\n\n        if (!base) {\n          base = BASE;\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n          s = s / LOG_BASE | 0;\n        } // Result exponent may be one less then the current value of e.\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n\n\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\n\n        if (yc[i] > (xc[i] || 0)) e--;\n\n        if (s < 0) {\n          qc.push(1);\n          more = true;\n        } else {\n          xL = xc.length;\n          yL = yc.length;\n          i = 0;\n          s += 2; // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n          n = mathfloor(base / (yc[0] + 1)); // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\n          // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\n\n          if (n > 1) {\n            yc = multiply(yc, n, base);\n            xc = multiply(xc, n, base);\n            yL = yc.length;\n            xL = xc.length;\n          }\n\n          xi = yL;\n          rem = xc.slice(0, yL);\n          remL = rem.length; // Add zeros to make remainder as long as divisor.\n\n          for (; remL < yL; rem[remL++] = 0);\n\n          yz = yc.slice();\n          yz.unshift(0);\n          yc0 = yc[0];\n          if (yc[1] >= base / 2) yc0++; // Not necessary, but to prevent trial digit n > base, when using base 3.\n          // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\n\n          do {\n            n = 0; // Compare divisor and remainder.\n\n            cmp = compare(yc, rem, yL, remL); // If divisor < remainder.\n\n            if (cmp < 0) {\n              // Calculate trial digit, n.\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // n is how many times the divisor goes into the current remainder.\n\n              n = mathfloor(rem0 / yc0); //  Algorithm:\n              //  1. product = divisor * trial digit (n)\n              //  2. if product > remainder: product -= divisor, n--\n              //  3. remainder -= product\n              //  4. if product was < remainder at 2:\n              //    5. compare new remainder and divisor\n              //    6. If remainder > divisor: remainder -= divisor, n++\n\n              if (n > 1) {\n                // n may be > base only when base is 3.\n                if (n >= base) n = base - 1; // product = divisor * trial digit.\n\n                prod = multiply(yc, n, base);\n                prodL = prod.length;\n                remL = rem.length; // Compare product and remainder.\n                // If product > remainder.\n                // Trial digit n too high.\n                // n is 1 too high about 5% of the time, and is not known to have\n                // ever been more than 1 too high.\n\n                while (compare(prod, rem, prodL, remL) == 1) {\n                  n--; // Subtract divisor from product.\n\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                  prodL = prod.length;\n                  cmp = 1;\n                }\n              } else {\n                // n is 0 or 1, cmp is -1.\n                // If n is 0, there is no need to compare yc and rem again below,\n                // so change cmp to 1 to avoid it.\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                if (n == 0) {\n                  // divisor < remainder, so n must be at least 1.\n                  cmp = n = 1;\n                } // product = divisor\n\n\n                prod = yc.slice();\n                prodL = prod.length;\n              }\n\n              if (prodL < remL) prod.unshift(0); // Subtract product from remainder.\n\n              subtract(rem, prod, remL, base);\n              remL = rem.length; // If product was < remainder.\n\n              if (cmp == -1) {\n                // Compare divisor and new remainder.\n                // If divisor < new remainder, subtract divisor from remainder.\n                // Trial digit n too low.\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                while (compare(yc, rem, yL, remL) < 1) {\n                  n++; // Subtract divisor from remainder.\n\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\n                  remL = rem.length;\n                }\n              }\n            } else if (cmp === 0) {\n              n++;\n              rem = [0];\n            } // else cmp === 1 and n will be 0\n            // Add the next digit, n, to the result array.\n\n\n            qc[i++] = n; // Update the remainder.\n\n            if (rem[0]) {\n              rem[remL++] = xc[xi] || 0;\n            } else {\n              rem = [xc[xi]];\n              remL = 1;\n            }\n          } while ((xi++ < xL || rem[0] != null) && s--);\n\n          more = rem[0] != null; // Leading zero?\n\n          if (!qc[0]) qc.shift();\n        }\n\n        if (base == BASE) {\n          // To calculate q.e, first get the number of digits of qc[0].\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more); // Caller is convertBase.\n        } else {\n          q.e = e;\n          q.r = +more;\n        }\n\n        return q;\n      };\n    }();\n    /*\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\n     * notation rounded to the specified decimal places or significant digits.\n     *\n     * n is a BigNumber.\n     * i is the index of the last digit required (i.e. the digit that may be rounded up).\n     * rm is the rounding mode.\n     * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\n     */\n\n\n    function format(n, i, rm, caller) {\n      var c0, e, ne, len, str;\n      rm = rm != null && isValidInt(rm, 0, 8, caller, roundingMode) ? rm | 0 : ROUNDING_MODE;\n      if (!n.c) return n.toString();\n      c0 = n.c[0];\n      ne = n.e;\n\n      if (i == null) {\n        str = coeffToString(n.c);\n        str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG ? toExponential(str, ne) : toFixedPoint(str, ne);\n      } else {\n        n = round(new BigNumber(n), i, rm); // n.e may have changed if the value was rounded up.\n\n        e = n.e;\n        str = coeffToString(n.c);\n        len = str.length; // toPrecision returns exponential notation if the number of significant digits\n        // specified is less than the number of digits necessary to represent the integer\n        // part of the value in fixed-point notation.\n        // Exponential notation.\n\n        if (caller == 19 || caller == 24 && (i <= e || e <= TO_EXP_NEG)) {\n          // Append zeros?\n          for (; len < i; str += '0', len++);\n\n          str = toExponential(str, e); // Fixed-point notation.\n        } else {\n          i -= ne;\n          str = toFixedPoint(str, e); // Append zeros?\n\n          if (e + 1 > len) {\n            if (--i > 0) for (str += '.'; i--; str += '0');\n          } else {\n            i += e - len;\n\n            if (i > 0) {\n              if (e + 1 == len) str += '.';\n\n              for (; i--; str += '0');\n            }\n          }\n        }\n      }\n\n      return n.s < 0 && c0 ? '-' + str : str;\n    } // Handle BigNumber.max and BigNumber.min.\n\n\n    function maxOrMin(args, method) {\n      var m,\n          n,\n          i = 0;\n      if (isArray(args[0])) args = args[0];\n      m = new BigNumber(args[0]);\n\n      for (; ++i < args.length;) {\n        n = new BigNumber(args[i]); // If any number is NaN, return NaN.\n\n        if (!n.s) {\n          m = n;\n          break;\n        } else if (method.call(m, n)) {\n          m = n;\n        }\n      }\n\n      return m;\n    }\n    /*\n     * Return true if n is an integer in range, otherwise throw.\n     * Use for argument validation when ERRORS is true.\n     */\n\n\n    function intValidatorWithErrors(n, min, max, caller, name) {\n      if (n < min || n > max || n != truncate(n)) {\n        raise(caller, (name || 'decimal places') + (n < min || n > max ? ' out of range' : ' not an integer'), n);\n      }\n\n      return true;\n    }\n    /*\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\n     * Called by minus, plus and times.\n     */\n\n\n    function normalise(n, c, e) {\n      var i = 1,\n          j = c.length; // Remove trailing zeros.\n\n      for (; !c[--j]; c.pop()); // Calculate the base 10 exponent. First get the number of digits of c[0].\n\n\n      for (j = c[0]; j >= 10; j /= 10, i++); // Overflow?\n\n\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n        // Infinity.\n        n.c = n.e = null; // Underflow?\n      } else if (e < MIN_EXP) {\n        // Zero.\n        n.c = [n.e = 0];\n      } else {\n        n.e = e;\n        n.c = c;\n      }\n\n      return n;\n    } // Handle values that fail the validity test in BigNumber.\n\n\n    parseNumeric = function () {\n      var basePrefix = /^(-?)0([xbo])/i,\n          dotAfter = /^([^.]+)\\.$/,\n          dotBefore = /^\\.([^.]+)$/,\n          isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n          whitespaceOrPlus = /^\\s*\\+|^\\s+|\\s+$/g;\n      return function (x, str, num, b) {\n        var base,\n            s = num ? str : str.replace(whitespaceOrPlus, ''); // No exception on ±Infinity or NaN.\n\n        if (isInfinityOrNaN.test(s)) {\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n        } else {\n          if (!num) {\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n            s = s.replace(basePrefix, function (m, p1, p2) {\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n              return !b || b == base ? p1 : m;\n            });\n\n            if (b) {\n              base = b; // E.g. '1.' to '1', '.1' to '0.1'\n\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n            }\n\n            if (str != s) return new BigNumber(s, base);\n          } // 'new BigNumber() not a number: {n}'\n          // 'new BigNumber() not a base {b} number: {n}'\n\n\n          if (ERRORS) raise(id, 'not a' + (b ? ' base ' + b : '') + ' number', str);\n          x.s = null;\n        }\n\n        x.c = x.e = null;\n        id = 0;\n      };\n    }(); // Throw a BigNumber Error.\n\n\n    function raise(caller, msg, val) {\n      var error = new Error(['new BigNumber', // 0\n      'cmp', // 1\n      'config', // 2\n      'div', // 3\n      'divToInt', // 4\n      'eq', // 5\n      'gt', // 6\n      'gte', // 7\n      'lt', // 8\n      'lte', // 9\n      'minus', // 10\n      'mod', // 11\n      'plus', // 12\n      'precision', // 13\n      'random', // 14\n      'round', // 15\n      'shift', // 16\n      'times', // 17\n      'toDigits', // 18\n      'toExponential', // 19\n      'toFixed', // 20\n      'toFormat', // 21\n      'toFraction', // 22\n      'pow', // 23\n      'toPrecision', // 24\n      'toString', // 25\n      'BigNumber' // 26\n      ][caller] + '() ' + msg + ': ' + val);\n      error.name = 'BigNumber Error';\n      id = 0;\n      throw error;\n    }\n    /*\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\n     * If r is truthy, it is known that there are more digits after the rounding digit.\n     */\n\n\n    function round(x, sd, rm, r) {\n      var d,\n          i,\n          j,\n          k,\n          n,\n          ni,\n          rd,\n          xc = x.c,\n          pows10 = POWS_TEN; // if x is not Infinity or NaN...\n\n      if (xc) {\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\n        // ni is the index of n within x.c.\n        // d is the number of digits of n.\n        // i is the index of rd within n including leading zeros.\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\n        out: {\n          // Get the number of digits of the first element of xc.\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n\n          i = sd - d; // If the rounding digit is in the first element of xc...\n\n          if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            n = xc[ni = 0]; // Get the rounding digit at index j of n.\n\n            rd = n / pows10[d - j - 1] % 10 | 0;\n          } else {\n            ni = mathceil((i + 1) / LOG_BASE);\n\n            if (ni >= xc.length) {\n              if (r) {\n                // Needed by sqrt.\n                for (; xc.length <= ni; xc.push(0));\n\n                n = rd = 0;\n                d = 1;\n                i %= LOG_BASE;\n                j = i - LOG_BASE + 1;\n              } else {\n                break out;\n              }\n            } else {\n              n = k = xc[ni]; // Get the number of digits of n.\n\n              for (d = 1; k >= 10; k /= 10, d++); // Get the index of rd within n.\n\n\n              i %= LOG_BASE; // Get the index of rd within n, adjusted for leading zeros.\n              // The number of leading zeros of n is given by LOG_BASE - d.\n\n              j = i - LOG_BASE + d; // Get the rounding digit at index j of n.\n\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n            }\n          }\n\n          r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?\n          // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.\n          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n          if (sd < 1 || !xc[0]) {\n            xc.length = 0;\n\n            if (r) {\n              // Convert sd to decimal places.\n              sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n\n              xc[0] = pows10[sd % LOG_BASE];\n              x.e = -sd || 0;\n            } else {\n              // Zero.\n              xc[0] = x.e = 0;\n            }\n\n            return x;\n          } // Remove excess digits.\n\n\n          if (i == 0) {\n            xc.length = ni;\n            k = 1;\n            ni--;\n          } else {\n            xc.length = ni + 1;\n            k = pows10[LOG_BASE - i]; // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n            // j > 0 means i > number of leading zeros of n.\n\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n          } // Round up?\n\n\n          if (r) {\n            for (;;) {\n              // If the digit to be rounded up is in the first element of xc...\n              if (ni == 0) {\n                // i will be the length of xc[0] before k is added.\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n\n                j = xc[0] += k;\n\n                for (k = 1; j >= 10; j /= 10, k++); // if i != k the length has increased.\n\n\n                if (i != k) {\n                  x.e++;\n                  if (xc[0] == BASE) xc[0] = 1;\n                }\n\n                break;\n              } else {\n                xc[ni] += k;\n                if (xc[ni] != BASE) break;\n                xc[ni--] = 0;\n                k = 1;\n              }\n            }\n          } // Remove trailing zeros.\n\n\n          for (i = xc.length; xc[--i] === 0; xc.pop());\n        } // Overflow? Infinity.\n\n\n        if (x.e > MAX_EXP) {\n          x.c = x.e = null; // Underflow? Zero.\n        } else if (x.e < MIN_EXP) {\n          x.c = [x.e = 0];\n        }\n      }\n\n      return x;\n    } // PROTOTYPE/INSTANCE METHODS\n\n    /*\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\n     */\n\n\n    P.absoluteValue = P.abs = function () {\n      var x = new BigNumber(this);\n      if (x.s < 0) x.s = 1;\n      return x;\n    };\n    /*\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\n     * number in the direction of Infinity.\n     */\n\n\n    P.ceil = function () {\n      return round(new BigNumber(this), this.e + 1, 2);\n    };\n    /*\n     * Return\n     * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\n     * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\n     * 0 if they have the same value,\n     * or null if the value of either is NaN.\n     */\n\n\n    P.comparedTo = P.cmp = function (y, b) {\n      id = 1;\n      return compare(this, new BigNumber(y, b));\n    };\n    /*\n     * Return the number of decimal places of the value of this BigNumber, or null if the value\n     * of this BigNumber is ±Infinity or NaN.\n     */\n\n\n    P.decimalPlaces = P.dp = function () {\n      var n,\n          v,\n          c = this.c;\n      if (!c) return null;\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last number.\n\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n      if (n < 0) n = 0;\n      return n;\n    };\n    /*\n     *  n / 0 = I\n     *  n / N = N\n     *  n / I = 0\n     *  0 / n = 0\n     *  0 / 0 = N\n     *  0 / N = N\n     *  0 / I = 0\n     *  N / n = N\n     *  N / 0 = N\n     *  N / N = N\n     *  N / I = N\n     *  I / n = I\n     *  I / 0 = I\n     *  I / N = N\n     *  I / I = N\n     *\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n     */\n\n\n    P.dividedBy = P.div = function (y, b) {\n      id = 3;\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n    };\n    /*\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\n     * BigNumber by the value of BigNumber(y, b).\n     */\n\n\n    P.dividedToIntegerBy = P.divToInt = function (y, b) {\n      id = 4;\n      return div(this, new BigNumber(y, b), 0, 1);\n    };\n    /*\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\n     * otherwise returns false.\n     */\n\n\n    P.equals = P.eq = function (y, b) {\n      id = 5;\n      return compare(this, new BigNumber(y, b)) === 0;\n    };\n    /*\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\n     * number in the direction of -Infinity.\n     */\n\n\n    P.floor = function () {\n      return round(new BigNumber(this), this.e + 1, 3);\n    };\n    /*\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\n     * otherwise returns false.\n     */\n\n\n    P.greaterThan = P.gt = function (y, b) {\n      id = 6;\n      return compare(this, new BigNumber(y, b)) > 0;\n    };\n    /*\n     * Return true if the value of this BigNumber is greater than or equal to the value of\n     * BigNumber(y, b), otherwise returns false.\n     */\n\n\n    P.greaterThanOrEqualTo = P.gte = function (y, b) {\n      id = 7;\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n    };\n    /*\n     * Return true if the value of this BigNumber is a finite number, otherwise returns false.\n     */\n\n\n    P.isFinite = function () {\n      return !!this.c;\n    };\n    /*\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\n     */\n\n\n    P.isInteger = P.isInt = function () {\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n    };\n    /*\n     * Return true if the value of this BigNumber is NaN, otherwise returns false.\n     */\n\n\n    P.isNaN = function () {\n      return !this.s;\n    };\n    /*\n     * Return true if the value of this BigNumber is negative, otherwise returns false.\n     */\n\n\n    P.isNegative = P.isNeg = function () {\n      return this.s < 0;\n    };\n    /*\n     * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\n     */\n\n\n    P.isZero = function () {\n      return !!this.c && this.c[0] == 0;\n    };\n    /*\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\n     * otherwise returns false.\n     */\n\n\n    P.lessThan = P.lt = function (y, b) {\n      id = 8;\n      return compare(this, new BigNumber(y, b)) < 0;\n    };\n    /*\n     * Return true if the value of this BigNumber is less than or equal to the value of\n     * BigNumber(y, b), otherwise returns false.\n     */\n\n\n    P.lessThanOrEqualTo = P.lte = function (y, b) {\n      id = 9;\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n    };\n    /*\n     *  n - 0 = n\n     *  n - N = N\n     *  n - I = -I\n     *  0 - n = -n\n     *  0 - 0 = 0\n     *  0 - N = N\n     *  0 - I = -I\n     *  N - n = N\n     *  N - 0 = N\n     *  N - N = N\n     *  N - I = N\n     *  I - n = I\n     *  I - 0 = I\n     *  I - N = N\n     *  I - I = N\n     *\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\n     * BigNumber(y, b).\n     */\n\n\n    P.minus = P.sub = function (y, b) {\n      var i,\n          j,\n          t,\n          xLTy,\n          x = this,\n          a = x.s;\n      id = 10;\n      y = new BigNumber(y, b);\n      b = y.s; // Either NaN?\n\n      if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n      if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n          ye = y.e / LOG_BASE,\n          xc = x.c,\n          yc = y.c;\n\n      if (!xe || !ye) {\n        // Either Infinity?\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN); // Either zero?\n\n        if (!xc[0] || !yc[0]) {\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n          ROUNDING_MODE == 3 ? -0 : 0);\n        }\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice(); // Determine which is the bigger number.\n\n      if (a = xe - ye) {\n        if (xLTy = a < 0) {\n          a = -a;\n          t = xc;\n        } else {\n          ye = xe;\n          t = yc;\n        }\n\n        t.reverse(); // Prepend zeros to equalise exponents.\n\n        for (b = a; b--; t.push(0));\n\n        t.reverse();\n      } else {\n        // Exponents equal. Check digit by digit.\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n        for (a = b = 0; b < j; b++) {\n          if (xc[b] != yc[b]) {\n            xLTy = xc[b] < yc[b];\n            break;\n          }\n        }\n      } // x < y? Point xc to the array of the bigger number.\n\n\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n      b = (j = yc.length) - (i = xc.length); // Append zeros to xc if shorter.\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n\n      if (b > 0) for (; b--; xc[i++] = 0);\n      b = BASE - 1; // Subtract yc from xc.\n\n      for (; j > a;) {\n        if (xc[--j] < yc[j]) {\n          for (i = j; i && !xc[--i]; xc[i] = b);\n\n          --xc[i];\n          xc[j] += BASE;\n        }\n\n        xc[j] -= yc[j];\n      } // Remove leading zeros and adjust exponent accordingly.\n\n\n      for (; xc[0] == 0; xc.shift(), --ye); // Zero?\n\n\n      if (!xc[0]) {\n        // Following IEEE 754 (2008) 6.3,\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\n        y.c = [y.e = 0];\n        return y;\n      } // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n      // for finite x and y.\n\n\n      return normalise(y, xc, ye);\n    };\n    /*\n     *   n % 0 =  N\n     *   n % N =  N\n     *   n % I =  n\n     *   0 % n =  0\n     *  -0 % n = -0\n     *   0 % 0 =  N\n     *   0 % N =  N\n     *   0 % I =  0\n     *   N % n =  N\n     *   N % 0 =  N\n     *   N % N =  N\n     *   N % I =  N\n     *   I % n =  N\n     *   I % 0 =  N\n     *   I % N =  N\n     *   I % I =  N\n     *\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\n     */\n\n\n    P.modulo = P.mod = function (y, b) {\n      var q,\n          s,\n          x = this;\n      id = 11;\n      y = new BigNumber(y, b); // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n\n      if (!x.c || !y.s || y.c && !y.c[0]) {\n        return new BigNumber(NaN); // Return x if y is Infinity or x is zero.\n      } else if (!y.c || x.c && !x.c[0]) {\n        return new BigNumber(x);\n      }\n\n      if (MODULO_MODE == 9) {\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\n        // r = x - qy    where  0 <= r < abs(y)\n        s = y.s;\n        y.s = 1;\n        q = div(x, y, 0, 3);\n        y.s = s;\n        q.s *= s;\n      } else {\n        q = div(x, y, 0, MODULO_MODE);\n      }\n\n      return x.minus(q.times(y));\n    };\n    /*\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\n     * i.e. multiplied by -1.\n     */\n\n\n    P.negated = P.neg = function () {\n      var x = new BigNumber(this);\n      x.s = -x.s || null;\n      return x;\n    };\n    /*\n     *  n + 0 = n\n     *  n + N = N\n     *  n + I = I\n     *  0 + n = n\n     *  0 + 0 = 0\n     *  0 + N = N\n     *  0 + I = I\n     *  N + n = N\n     *  N + 0 = N\n     *  N + N = N\n     *  N + I = N\n     *  I + n = I\n     *  I + 0 = I\n     *  I + N = N\n     *  I + I = I\n     *\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\n     * BigNumber(y, b).\n     */\n\n\n    P.plus = P.add = function (y, b) {\n      var t,\n          x = this,\n          a = x.s;\n      id = 12;\n      y = new BigNumber(y, b);\n      b = y.s; // Either NaN?\n\n      if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n      if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n          ye = y.e / LOG_BASE,\n          xc = x.c,\n          yc = y.c;\n\n      if (!xe || !ye) {\n        // Return ±Infinity if either ±Infinity.\n        if (!xc || !yc) return new BigNumber(a / 0); // Either zero?\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice(); // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n\n      if (a = xe - ye) {\n        if (a > 0) {\n          ye = xe;\n          t = yc;\n        } else {\n          a = -a;\n          t = xc;\n        }\n\n        t.reverse();\n\n        for (; a--; t.push(0));\n\n        t.reverse();\n      }\n\n      a = xc.length;\n      b = yc.length; // Point xc to the longer array, and b to the shorter length.\n\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a; // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n\n      for (a = 0; b;) {\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n        xc[b] %= BASE;\n      }\n\n      if (a) {\n        xc.unshift(a);\n        ++ye;\n      } // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n      // ye = MAX_EXP + 1 possible\n\n\n      return normalise(y, xc, ye);\n    };\n    /*\n     * Return the number of significant digits of the value of this BigNumber.\n     *\n     * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\n     */\n\n\n    P.precision = P.sd = function (z) {\n      var n,\n          v,\n          x = this,\n          c = x.c; // 'precision() argument not a boolean or binary digit: {z}'\n\n      if (z != null && z !== !!z && z !== 1 && z !== 0) {\n        if (ERRORS) raise(13, 'argument' + notBool, z);\n        if (z != !!z) z = null;\n      }\n\n      if (!c) return null;\n      v = c.length - 1;\n      n = v * LOG_BASE + 1;\n\n      if (v = c[v]) {\n        // Subtract the number of trailing zeros of the last element.\n        for (; v % 10 == 0; v /= 10, n--); // Add the number of digits of the first element.\n\n\n        for (v = c[0]; v >= 10; v /= 10, n++);\n      }\n\n      if (z && x.e + 1 > n) n = x.e + 1;\n      return n;\n    };\n    /*\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\n     * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\n     * omitted.\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * 'round() decimal places out of range: {dp}'\n     * 'round() decimal places not an integer: {dp}'\n     * 'round() rounding mode not an integer: {rm}'\n     * 'round() rounding mode out of range: {rm}'\n     */\n\n\n    P.round = function (dp, rm) {\n      var n = new BigNumber(this);\n\n      if (dp == null || isValidInt(dp, 0, MAX, 15)) {\n        round(n, ~~dp + this.e + 1, rm == null || !isValidInt(rm, 0, 8, 15, roundingMode) ? ROUNDING_MODE : rm | 0);\n      }\n\n      return n;\n    };\n    /*\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\n     *\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\n     *\n     * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\n     * otherwise.\n     *\n     * 'shift() argument not an integer: {k}'\n     * 'shift() argument out of range: {k}'\n     */\n\n\n    P.shift = function (k) {\n      var n = this;\n      return isValidInt(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument') // k < 1e+21, or truncate(k) will produce exponential notation.\n      ? n.times('1e' + truncate(k)) : new BigNumber(n.c && n.c[0] && (k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER) ? n.s * (k < 0 ? 0 : 1 / 0) : n);\n    };\n    /*\n     *  sqrt(-n) =  N\n     *  sqrt( N) =  N\n     *  sqrt(-I) =  N\n     *  sqrt( I) =  I\n     *  sqrt( 0) =  0\n     *  sqrt(-0) = -0\n     *\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n     */\n\n\n    P.squareRoot = P.sqrt = function () {\n      var m,\n          n,\n          r,\n          rep,\n          t,\n          x = this,\n          c = x.c,\n          s = x.s,\n          e = x.e,\n          dp = DECIMAL_PLACES + 4,\n          half = new BigNumber('0.5'); // Negative/NaN/Infinity/zero?\n\n      if (s !== 1 || !c || !c[0]) {\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n      } // Initial estimate.\n\n\n      s = Math.sqrt(+x); // Math.sqrt underflow/overflow?\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n\n      if (s == 0 || s == 1 / 0) {\n        n = coeffToString(c);\n        if ((n.length + e) % 2 == 0) n += '0';\n        s = Math.sqrt(n);\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n        if (s == 1 / 0) {\n          n = '1e' + e;\n        } else {\n          n = s.toExponential();\n          n = n.slice(0, n.indexOf('e') + 1) + e;\n        }\n\n        r = new BigNumber(n);\n      } else {\n        r = new BigNumber(s + '');\n      } // Check for zero.\n      // r could be zero if MIN_EXP is changed after the this value was created.\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n      // coeffToString to throw.\n\n\n      if (r.c[0]) {\n        e = r.e;\n        s = e + dp;\n        if (s < 3) s = 0; // Newton-Raphson iteration.\n\n        for (;;) {\n          t = r;\n          r = half.times(t.plus(div(x, t, dp, 1)));\n\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n            // The exponent of r may here be one less than the final result exponent,\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n            // are indexed correctly.\n            if (r.e < e) --s;\n            n = n.slice(s - 3, s + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n            // iteration.\n\n            if (n == '9999' || !rep && n == '4999') {\n              // On the first iteration only, check to see if rounding up gives the\n              // exact result as the nines may infinitely repeat.\n              if (!rep) {\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                if (t.times(t).eq(x)) {\n                  r = t;\n                  break;\n                }\n              }\n\n              dp += 4;\n              s += 4;\n              rep = 1;\n            } else {\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n              // result. If not, then there are further digits and m will be truthy.\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n                // Truncate to the first rounding digit.\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                m = !r.times(r).eq(x);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n    };\n    /*\n     *  n * 0 = 0\n     *  n * N = N\n     *  n * I = I\n     *  0 * n = 0\n     *  0 * 0 = 0\n     *  0 * N = N\n     *  0 * I = N\n     *  N * n = N\n     *  N * 0 = N\n     *  N * N = N\n     *  N * I = N\n     *  I * n = I\n     *  I * 0 = N\n     *  I * N = N\n     *  I * I = I\n     *\n     * Return a new BigNumber whose value is the value of this BigNumber times the value of\n     * BigNumber(y, b).\n     */\n\n\n    P.times = P.mul = function (y, b) {\n      var c,\n          e,\n          i,\n          j,\n          k,\n          m,\n          xcL,\n          xlo,\n          xhi,\n          ycL,\n          ylo,\n          yhi,\n          zc,\n          base,\n          sqrtBase,\n          x = this,\n          xc = x.c,\n          yc = (id = 17, y = new BigNumber(y, b)).c; // Either NaN, ±Infinity or ±0?\n\n      if (!xc || !yc || !xc[0] || !yc[0]) {\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n          y.c = y.e = y.s = null;\n        } else {\n          y.s *= x.s; // Return ±Infinity if either is ±Infinity.\n\n          if (!xc || !yc) {\n            y.c = y.e = null; // Return ±0 if either is ±0.\n          } else {\n            y.c = [0];\n            y.e = 0;\n          }\n        }\n\n        return y;\n      }\n\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n      y.s *= x.s;\n      xcL = xc.length;\n      ycL = yc.length; // Ensure xc points to longer array and xcL to its length.\n\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i; // Initialise the result array with zeros.\n\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n      base = BASE;\n      sqrtBase = SQRT_BASE;\n\n      for (i = ycL; --i >= 0;) {\n        c = 0;\n        ylo = yc[i] % sqrtBase;\n        yhi = yc[i] / sqrtBase | 0;\n\n        for (k = xcL, j = i + k; j > i;) {\n          xlo = xc[--k] % sqrtBase;\n          xhi = xc[k] / sqrtBase | 0;\n          m = yhi * xlo + xhi * ylo;\n          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n          zc[j--] = xlo % base;\n        }\n\n        zc[j] = c;\n      }\n\n      if (c) {\n        ++e;\n      } else {\n        zc.shift();\n      }\n\n      return normalise(y, zc, e);\n    };\n    /*\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\n     * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n     *\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * 'toDigits() precision out of range: {sd}'\n     * 'toDigits() precision not an integer: {sd}'\n     * 'toDigits() rounding mode not an integer: {rm}'\n     * 'toDigits() rounding mode out of range: {rm}'\n     */\n\n\n    P.toDigits = function (sd, rm) {\n      var n = new BigNumber(this);\n      sd = sd == null || !isValidInt(sd, 1, MAX, 18, 'precision') ? null : sd | 0;\n      rm = rm == null || !isValidInt(rm, 0, 8, 18, roundingMode) ? ROUNDING_MODE : rm | 0;\n      return sd ? round(n, sd, rm) : n;\n    };\n    /*\n     * Return a string representing the value of this BigNumber in exponential notation and\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * 'toExponential() decimal places not an integer: {dp}'\n     * 'toExponential() decimal places out of range: {dp}'\n     * 'toExponential() rounding mode not an integer: {rm}'\n     * 'toExponential() rounding mode out of range: {rm}'\n     */\n\n\n    P.toExponential = function (dp, rm) {\n      return format(this, dp != null && isValidInt(dp, 0, MAX, 19) ? ~~dp + 1 : null, rm, 19);\n    };\n    /*\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n     *\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * 'toFixed() decimal places not an integer: {dp}'\n     * 'toFixed() decimal places out of range: {dp}'\n     * 'toFixed() rounding mode not an integer: {rm}'\n     * 'toFixed() rounding mode out of range: {rm}'\n     */\n\n\n    P.toFixed = function (dp, rm) {\n      return format(this, dp != null && isValidInt(dp, 0, MAX, 20) ? ~~dp + this.e + 1 : null, rm, 20);\n    };\n    /*\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\n     * of the FORMAT object (see BigNumber.config).\n     *\n     * FORMAT = {\n     *      decimalSeparator : '.',\n     *      groupSeparator : ',',\n     *      groupSize : 3,\n     *      secondaryGroupSize : 0,\n     *      fractionGroupSeparator : '\\xA0',    // non-breaking space\n     *      fractionGroupSize : 0\n     * };\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * 'toFormat() decimal places not an integer: {dp}'\n     * 'toFormat() decimal places out of range: {dp}'\n     * 'toFormat() rounding mode not an integer: {rm}'\n     * 'toFormat() rounding mode out of range: {rm}'\n     */\n\n\n    P.toFormat = function (dp, rm) {\n      var str = format(this, dp != null && isValidInt(dp, 0, MAX, 21) ? ~~dp + this.e + 1 : null, rm, 21);\n\n      if (this.c) {\n        var i,\n            arr = str.split('.'),\n            g1 = +FORMAT.groupSize,\n            g2 = +FORMAT.secondaryGroupSize,\n            groupSeparator = FORMAT.groupSeparator,\n            intPart = arr[0],\n            fractionPart = arr[1],\n            isNeg = this.s < 0,\n            intDigits = isNeg ? intPart.slice(1) : intPart,\n            len = intDigits.length;\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n        if (g1 > 0 && len > 0) {\n          i = len % g1 || g1;\n          intPart = intDigits.substr(0, i);\n\n          for (; i < len; i += g1) {\n            intPart += groupSeparator + intDigits.substr(i, g1);\n          }\n\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n          if (isNeg) intPart = '-' + intPart;\n        }\n\n        str = fractionPart ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + FORMAT.fractionGroupSeparator) : fractionPart) : intPart;\n      }\n\n      return str;\n    };\n    /*\n     * Return a string array representing the value of this BigNumber as a simple fraction with\n     * an integer numerator and an integer denominator. The denominator will be a positive\n     * non-zero value less than or equal to the specified maximum denominator. If a maximum\n     * denominator is not specified, the denominator will be the lowest value necessary to\n     * represent the number exactly.\n     *\n     * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\n     *\n     * 'toFraction() max denominator not an integer: {md}'\n     * 'toFraction() max denominator out of range: {md}'\n     */\n\n\n    P.toFraction = function (md) {\n      var arr,\n          d0,\n          d2,\n          e,\n          exp,\n          n,\n          n0,\n          q,\n          s,\n          k = ERRORS,\n          x = this,\n          xc = x.c,\n          d = new BigNumber(ONE),\n          n1 = d0 = new BigNumber(ONE),\n          d1 = n0 = new BigNumber(ONE);\n\n      if (md != null) {\n        ERRORS = false;\n        n = new BigNumber(md);\n        ERRORS = k;\n\n        if (!(k = n.isInt()) || n.lt(ONE)) {\n          if (ERRORS) {\n            raise(22, 'max denominator ' + (k ? 'out of range' : 'not an integer'), md);\n          } // ERRORS is false:\n          // If md is a finite non-integer >= 1, round it to an integer and use it.\n\n\n          md = !k && n.c && round(n, n.e + 1, 1).gte(ONE) ? n : null;\n        }\n      }\n\n      if (!xc) return x.toString();\n      s = coeffToString(xc); // Determine initial denominator.\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n\n      e = d.e = s.length - x.e - 1;\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n      md = !md || n.cmp(d) > 0 ? e > 0 ? d : n1 : n;\n      exp = MAX_EXP;\n      MAX_EXP = 1 / 0;\n      n = new BigNumber(s); // n0 = d1 = 0\n\n      n0.c[0] = 0;\n\n      for (;;) {\n        q = div(n, d, 0, 1);\n        d2 = d0.plus(q.times(d1));\n        if (d2.cmp(md) == 1) break;\n        d0 = d1;\n        d1 = d2;\n        n1 = n0.plus(q.times(d2 = n1));\n        n0 = d2;\n        d = n.minus(q.times(d2 = d));\n        n = d2;\n      }\n\n      d2 = div(md.minus(d0), d1, 0, 1);\n      n0 = n0.plus(d2.times(n1));\n      d0 = d0.plus(d2.times(d1));\n      n0.s = n1.s = x.s;\n      e *= 2; // Determine which fraction is closer to x, n0/d0 or n1/d1\n\n      arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().cmp(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1.toString(), d1.toString()] : [n0.toString(), d0.toString()];\n      MAX_EXP = exp;\n      return arr;\n    };\n    /*\n     * Return the value of this BigNumber converted to a number primitive.\n     */\n\n\n    P.toNumber = function () {\n      var x = this; // Ensure zero has correct sign.\n\n      return +x || (x.s ? x.s * 0 : NaN);\n    };\n    /*\n     * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\n     * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.\n     *\n     * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.\n     * (Performs 54 loop iterations for n of 9007199254740992.)\n     *\n     * 'pow() exponent not an integer: {n}'\n     * 'pow() exponent out of range: {n}'\n     */\n\n\n    P.toPower = P.pow = function (n) {\n      var k,\n          y,\n          i = mathfloor(n < 0 ? -n : +n),\n          x = this; // Pass ±Infinity to Math.pow if exponent is out of range.\n\n      if (!isValidInt(n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent') && (!isFinite(n) || i > MAX_SAFE_INTEGER && (n /= 0) || parseFloat(n) != n && !(n = NaN))) {\n        return new BigNumber(Math.pow(+x, n));\n      } // Truncating each coefficient array to a length of k after each multiplication equates\n      // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a\n      // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)\n\n\n      k = POW_PRECISION ? mathceil(POW_PRECISION / LOG_BASE + 2) : 0;\n      y = new BigNumber(ONE);\n\n      for (;;) {\n        if (i % 2) {\n          y = y.times(x);\n          if (!y.c) break;\n          if (k && y.c.length > k) y.c.length = k;\n        }\n\n        i = mathfloor(i / 2);\n        if (!i) break;\n        x = x.times(x);\n        if (k && x.c && x.c.length > k) x.c.length = k;\n      }\n\n      if (n < 0) y = ONE.div(y);\n      return k ? round(y, POW_PRECISION, ROUNDING_MODE) : y;\n    };\n    /*\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\n     * necessary to represent the integer part of the value in fixed-point notation, then use\n     * exponential notation.\n     *\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * 'toPrecision() precision not an integer: {sd}'\n     * 'toPrecision() precision out of range: {sd}'\n     * 'toPrecision() rounding mode not an integer: {rm}'\n     * 'toPrecision() rounding mode out of range: {rm}'\n     */\n\n\n    P.toPrecision = function (sd, rm) {\n      return format(this, sd != null && isValidInt(sd, 1, MAX, 24, 'precision') ? sd | 0 : null, rm, 24);\n    };\n    /*\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\n     * TO_EXP_NEG, return exponential notation.\n     *\n     * [b] {number} Integer, 2 to 64 inclusive.\n     *\n     * 'toString() base not an integer: {b}'\n     * 'toString() base out of range: {b}'\n     */\n\n\n    P.toString = function (b) {\n      var str,\n          n = this,\n          s = n.s,\n          e = n.e; // Infinity or NaN?\n\n      if (e === null) {\n        if (s) {\n          str = 'Infinity';\n          if (s < 0) str = '-' + str;\n        } else {\n          str = 'NaN';\n        }\n      } else {\n        str = coeffToString(n.c);\n\n        if (b == null || !isValidInt(b, 2, 64, 25, 'base')) {\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);\n        } else {\n          str = convertBase(toFixedPoint(str, e), b | 0, 10, s);\n        }\n\n        if (s < 0 && n.c[0]) str = '-' + str;\n      }\n\n      return str;\n    };\n    /*\n     * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\n     * number.\n     */\n\n\n    P.truncated = P.trunc = function () {\n      return round(new BigNumber(this), this.e + 1, 1);\n    };\n    /*\n     * Return as toString, but do not accept a base argument.\n     */\n\n\n    P.valueOf = P.toJSON = function () {\n      return this.toString();\n    }; // Aliases for BigDecimal methods.\n    //P.add = P.plus;         // P.add included above\n    //P.subtract = P.minus;   // P.sub included above\n    //P.multiply = P.times;   // P.mul included above\n    //P.divide = P.div;\n    //P.remainder = P.mod;\n    //P.compareTo = P.cmp;\n    //P.negate = P.neg;\n\n\n    if (configObj != null) BigNumber.config(configObj);\n    return BigNumber;\n  } // PRIVATE HELPER FUNCTIONS\n\n\n  function bitFloor(n) {\n    var i = n | 0;\n    return n > 0 || n === i ? i : i - 1;\n  } // Return a coefficient array as a string of base 10 digits.\n\n\n  function coeffToString(a) {\n    var s,\n        z,\n        i = 1,\n        j = a.length,\n        r = a[0] + '';\n\n    for (; i < j;) {\n      s = a[i++] + '';\n      z = LOG_BASE - s.length;\n\n      for (; z--; s = '0' + s);\n\n      r += s;\n    } // Determine trailing zeros.\n\n\n    for (j = r.length; r.charCodeAt(--j) === 48;);\n\n    return r.slice(0, j + 1 || 1);\n  } // Compare the value of BigNumbers x and y.\n\n\n  function compare(x, y) {\n    var a,\n        b,\n        xc = x.c,\n        yc = y.c,\n        i = x.s,\n        j = y.s,\n        k = x.e,\n        l = y.e; // Either NaN?\n\n    if (!i || !j) return null;\n    a = xc && !xc[0];\n    b = yc && !yc[0]; // Either zero?\n\n    if (a || b) return a ? b ? 0 : -j : i; // Signs differ?\n\n    if (i != j) return i;\n    a = i < 0;\n    b = k == l; // Either Infinity?\n\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1; // Compare exponents.\n\n    if (!b) return k > l ^ a ? 1 : -1;\n    j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.\n\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1; // Compare lengths.\n\n\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\n  }\n  /*\n   * Return true if n is a valid number in range, otherwise false.\n   * Use for argument validation when ERRORS is false.\n   * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\n   */\n\n\n  function intValidatorNoErrors(n, min, max) {\n    return (n = truncate(n)) >= min && n <= max;\n  }\n\n  function isArray(obj) {\n    return Object.prototype.toString.call(obj) == '[object Array]';\n  }\n  /*\n   * Convert string of baseIn to an array of numbers of baseOut.\n   * Eg. convertBase('255', 10, 16) returns [15, 15].\n   * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\n   */\n\n\n  function toBaseOut(str, baseIn, baseOut) {\n    var j,\n        arr = [0],\n        arrL,\n        i = 0,\n        len = str.length;\n\n    for (; i < len;) {\n      for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n\n      arr[j = 0] += ALPHABET.indexOf(str.charAt(i++));\n\n      for (; j < arr.length; j++) {\n        if (arr[j] > baseOut - 1) {\n          if (arr[j + 1] == null) arr[j + 1] = 0;\n          arr[j + 1] += arr[j] / baseOut | 0;\n          arr[j] %= baseOut;\n        }\n      }\n    }\n\n    return arr.reverse();\n  }\n\n  function toExponential(str, e) {\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n  }\n\n  function toFixedPoint(str, e) {\n    var len, z; // Negative exponent?\n\n    if (e < 0) {\n      // Prepend zeros.\n      for (z = '0.'; ++e; z += '0');\n\n      str = z + str; // Positive exponent\n    } else {\n      len = str.length; // Append zeros.\n\n      if (++e > len) {\n        for (z = '0', e -= len; --e; z += '0');\n\n        str += z;\n      } else if (e < len) {\n        str = str.slice(0, e) + '.' + str.slice(e);\n      }\n    }\n\n    return str;\n  }\n\n  function truncate(n) {\n    n = parseFloat(n);\n    return n < 0 ? mathceil(n) : mathfloor(n);\n  } // EXPORT\n\n\n  BigNumber = another(); // AMD.\n\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return BigNumber;\n    }); // Node and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    module.exports = BigNumber;\n    if (!crypto) try {\n      crypto = require('crypto');\n    } catch (e) {} // Browser.\n  } else {\n    global.BigNumber = BigNumber;\n  }\n})(this);","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/PhysicalNFTs/node_modules/@0xproject/assert/node_modules/web3/node_modules/bignumber.js/bignumber.js"],"names":["global","BigNumber","crypto","parseNumeric","isNumeric","mathceil","Math","ceil","mathfloor","floor","notBool","roundingMode","tooManyDigits","ALPHABET","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","another","configObj","div","id","P","prototype","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","ERRORS","isValidInt","intValidatorWithErrors","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","n","b","c","e","i","num","len","str","x","raise","s","slice","test","charCodeAt","round","RegExp","replace","length","convertBase","indexOf","search","substring","push","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","v","p","r","a","arguments","o","has","hasOwnProperty","isArray","intValidatorNoErrors","max","maxOrMin","lt","min","gt","random","pow2_53","random53bitInt","dp","k","rand","getRandomValues","Uint32Array","randomBytes","copy","pop","shift","baseOut","baseIn","sign","d","xc","y","rm","toLowerCase","pow","toBaseOut","toFixedPoint","coeffToString","unshift","charAt","multiply","base","m","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","format","caller","c0","ne","toString","toExponential","args","method","call","name","truncate","normalise","j","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","msg","val","error","Error","sd","ni","rd","pows10","out","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","divToInt","equals","eq","greaterThan","greaterThanOrEqualTo","gte","isFinite","isInteger","isInt","isNegative","isNeg","isZero","lessThan","lessThanOrEqualTo","lte","minus","sub","t","xLTy","plus","xe","ye","reverse","modulo","mod","times","negated","neg","add","precision","z","squareRoot","sqrt","rep","half","mul","xcL","ycL","ylo","yhi","zc","sqrtBase","toDigits","toFixed","toFormat","arr","split","g1","g2","intPart","fractionPart","intDigits","substr","toFraction","md","d0","d2","exp","n0","n1","d1","toNumber","toPower","parseFloat","toPrecision","truncated","trunc","valueOf","toJSON","l","obj","Object","arrL","define","amd","module","exports","require"],"mappings":"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","sourcesContent":["/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */\n\n;(function (global) {\n    'use strict';\n\n    /*\n      bignumber.js v2.0.7\n      A JavaScript library for arbitrary-precision arithmetic.\n      https://github.com/MikeMcl/bignumber.js\n      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>\n      MIT Expat Licence\n    */\n\n\n    var BigNumber, crypto, parseNumeric,\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n        mathceil = Math.ceil,\n        mathfloor = Math.floor,\n        notBool = ' not a boolean or binary digit',\n        roundingMode = 'rounding mode',\n        tooManyDigits = 'number type has more than 15 significant digits',\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\n        BASE = 1e14,\n        LOG_BASE = 14,\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n        SQRT_BASE = 1e7,\n\n        /*\n         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\n         * exception is thrown (if ERRORS is true).\n         */\n        MAX = 1E9;                                   // 0 to MAX_INT32\n\n\n    /*\n     * Create and return a BigNumber constructor.\n     */\n    function another(configObj) {\n        var div,\n\n            // id tracks the caller function, so its name can be included in error messages.\n            id = 0,\n            P = BigNumber.prototype,\n            ONE = new BigNumber(1),\n\n\n            /********************************* EDITABLE DEFAULTS **********************************/\n\n\n            /*\n             * The default values below must be integers within the inclusive ranges stated.\n             * The values can also be changed at run-time using BigNumber.config.\n             */\n\n            // The maximum number of decimal places for operations involving division.\n            DECIMAL_PLACES = 20,                     // 0 to MAX\n\n            /*\n             * The rounding mode used when rounding to the above decimal places, and when using\n             * toExponential, toFixed, toFormat and toPrecision, and round (default value).\n             * UP         0 Away from zero.\n             * DOWN       1 Towards zero.\n             * CEIL       2 Towards +Infinity.\n             * FLOOR      3 Towards -Infinity.\n             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n             */\n            ROUNDING_MODE = 4,                       // 0 to 8\n\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n            // The exponent value at and beneath which toString returns exponential notation.\n            // Number type: -7\n            TO_EXP_NEG = -7,                         // 0 to -MAX\n\n            // The exponent value at and above which toString returns exponential notation.\n            // Number type: 21\n            TO_EXP_POS = 21,                         // 0 to MAX\n\n            // RANGE : [MIN_EXP, MAX_EXP]\n\n            // The minimum exponent value, beneath which underflow to zero occurs.\n            // Number type: -324  (5e-324)\n            MIN_EXP = -1e7,                          // -1 to -MAX\n\n            // The maximum exponent value, above which overflow to Infinity occurs.\n            // Number type:  308  (1.7976931348623157e+308)\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n            MAX_EXP = 1e7,                           // 1 to MAX\n\n            // Whether BigNumber Errors are ever thrown.\n            ERRORS = true,                           // true or false\n\n            // Change to intValidatorNoErrors if ERRORS is false.\n            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors\n\n            // Whether to use cryptographically-secure random number generation, if available.\n            CRYPTO = false,                          // true or false\n\n            /*\n             * The modulo mode used when calculating the modulus: a mod n.\n             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n             * The remainder (r) is calculated as: r = a - n * q.\n             *\n             * UP        0 The remainder is positive if the dividend is negative, else is negative.\n             * DOWN      1 The remainder has the same sign as the dividend.\n             *             This modulo mode is commonly known as 'truncated division' and is\n             *             equivalent to (a % n) in JavaScript.\n             * FLOOR     3 The remainder has the same sign as the divisor (Python %).\n             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n             *             The remainder is always positive.\n             *\n             * The truncated division, floored division, Euclidian division and IEEE 754 remainder\n             * modes are commonly used for the modulus operation.\n             * Although the other rounding modes can also be used, they may not give useful results.\n             */\n            MODULO_MODE = 1,                         // 0 to 9\n\n            // The maximum number of significant digits of the result of the toPower operation.\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\n            POW_PRECISION = 100,                     // 0 to MAX\n\n            // The format specification used by the BigNumber.prototype.toFormat method.\n            FORMAT = {\n                decimalSeparator: '.',\n                groupSeparator: ',',\n                groupSize: 3,\n                secondaryGroupSize: 0,\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\n                fractionGroupSize: 0\n            };\n\n\n        /******************************************************************************************/\n\n\n        // CONSTRUCTOR\n\n\n        /*\n         * The BigNumber constructor and exported function.\n         * Create and return a new instance of a BigNumber object.\n         *\n         * n {number|string|BigNumber} A numeric value.\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.\n         */\n        function BigNumber( n, b ) {\n            var c, e, i, num, len, str,\n                x = this;\n\n            // Enable constructor usage without new.\n            if ( !( x instanceof BigNumber ) ) {\n\n                // 'BigNumber() constructor call without new: {n}'\n                if (ERRORS) raise( 26, 'constructor call without new', n );\n                return new BigNumber( n, b );\n            }\n\n            // 'new BigNumber() base not an integer: {b}'\n            // 'new BigNumber() base out of range: {b}'\n            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {\n\n                // Duplicate.\n                if ( n instanceof BigNumber ) {\n                    x.s = n.s;\n                    x.e = n.e;\n                    x.c = ( n = n.c ) ? n.slice() : n;\n                    id = 0;\n                    return;\n                }\n\n                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {\n                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;\n\n                    // Fast path for integers.\n                    if ( n === ~~n ) {\n                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );\n                        x.e = e;\n                        x.c = [n];\n                        id = 0;\n                        return;\n                    }\n\n                    str = n + '';\n                } else {\n                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\n                }\n            } else {\n                b = b | 0;\n                str = n + '';\n\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\n                // Allow exponential notation to be used with base 10 argument.\n                if ( b == 10 ) {\n                    x = new BigNumber( n instanceof BigNumber ? n : str );\n                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );\n                }\n\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n                // Any number in exponential form will fail due to the [Ee][+-].\n                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||\n                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +\n                    '(?:\\\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {\n                    return parseNumeric( x, str, num, b );\n                }\n\n                if (num) {\n                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;\n\n                    if ( ERRORS && str.replace( /^0\\.0*|\\./, '' ).length > 15 ) {\n\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'\n                        raise( id, tooManyDigits, n );\n                    }\n\n                    // Prevent later check for length on converted number.\n                    num = false;\n                } else {\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\n                }\n\n                str = convertBase( str, 10, b, x.s );\n            }\n\n            // Decimal point?\n            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );\n\n            // Exponential form?\n            if ( ( i = str.search( /e/i ) ) > 0 ) {\n\n                // Determine exponent.\n                if ( e < 0 ) e = i;\n                e += +str.slice( i + 1 );\n                str = str.substring( 0, i );\n            } else if ( e < 0 ) {\n\n                // Integer.\n                e = str.length;\n            }\n\n            // Determine leading zeros.\n            for ( i = 0; str.charCodeAt(i) === 48; i++ );\n\n            // Determine trailing zeros.\n            for ( len = str.length; str.charCodeAt(--len) === 48; );\n            str = str.slice( i, len + 1 );\n\n            if (str) {\n                len = str.length;\n\n                // Disallow numbers with over 15 significant digits if number type.\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'\n                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );\n\n                e = e - i - 1;\n\n                 // Overflow?\n                if ( e > MAX_EXP ) {\n\n                    // Infinity.\n                    x.c = x.e = null;\n\n                // Underflow?\n                } else if ( e < MIN_EXP ) {\n\n                    // Zero.\n                    x.c = [ x.e = 0 ];\n                } else {\n                    x.e = e;\n                    x.c = [];\n\n                    // Transform base\n\n                    // e is the base 10 exponent.\n                    // i is where to slice str to get the first element of the coefficient array.\n                    i = ( e + 1 ) % LOG_BASE;\n                    if ( e < 0 ) i += LOG_BASE;\n\n                    if ( i < len ) {\n                        if (i) x.c.push( +str.slice( 0, i ) );\n\n                        for ( len -= LOG_BASE; i < len; ) {\n                            x.c.push( +str.slice( i, i += LOG_BASE ) );\n                        }\n\n                        str = str.slice(i);\n                        i = LOG_BASE - str.length;\n                    } else {\n                        i -= len;\n                    }\n\n                    for ( ; i--; str += '0' );\n                    x.c.push( +str );\n                }\n            } else {\n\n                // Zero.\n                x.c = [ x.e = 0 ];\n            }\n\n            id = 0;\n        }\n\n\n        // CONSTRUCTOR PROPERTIES\n\n\n        BigNumber.another = another;\n\n        BigNumber.ROUND_UP = 0;\n        BigNumber.ROUND_DOWN = 1;\n        BigNumber.ROUND_CEIL = 2;\n        BigNumber.ROUND_FLOOR = 3;\n        BigNumber.ROUND_HALF_UP = 4;\n        BigNumber.ROUND_HALF_DOWN = 5;\n        BigNumber.ROUND_HALF_EVEN = 6;\n        BigNumber.ROUND_HALF_CEIL = 7;\n        BigNumber.ROUND_HALF_FLOOR = 8;\n        BigNumber.EUCLID = 9;\n\n\n        /*\n         * Configure infrequently-changing library-wide settings.\n         *\n         * Accept an object or an argument list, with one or many of the following properties or\n         * parameters respectively:\n         *\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\n         *   ERRORS          {boolean|number}   true, false, 1 or 0\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0\n         *   MODULO_MODE     {number}           0 to 9 inclusive\n         *   POW_PRECISION   {number}           0 to MAX inclusive\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat\n         *      decimalSeparator       {string}\n         *      groupSeparator         {string}\n         *      groupSize              {number}\n         *      secondaryGroupSize     {number}\n         *      fractionGroupSeparator {string}\n         *      fractionGroupSize      {number}\n         *\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\n         *\n         * E.g.\n         * BigNumber.config(20, 4) is equivalent to\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\n         *\n         * Ignore properties/parameters set to null or undefined.\n         * Return an object with the properties current values.\n         */\n        BigNumber.config = function () {\n            var v, p,\n                i = 0,\n                r = {},\n                a = arguments,\n                o = a[0],\n                has = o && typeof o == 'object'\n                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }\n                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };\n\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n            // 'config() DECIMAL_PLACES not an integer: {v}'\n            // 'config() DECIMAL_PLACES out of range: {v}'\n            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {\n                DECIMAL_PLACES = v | 0;\n            }\n            r[p] = DECIMAL_PLACES;\n\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n            // 'config() ROUNDING_MODE not an integer: {v}'\n            // 'config() ROUNDING_MODE out of range: {v}'\n            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {\n                ROUNDING_MODE = v | 0;\n            }\n            r[p] = ROUNDING_MODE;\n\n            // EXPONENTIAL_AT {number|number[]}\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n            // 'config() EXPONENTIAL_AT not an integer: {v}'\n            // 'config() EXPONENTIAL_AT out of range: {v}'\n            if ( has( p = 'EXPONENTIAL_AT' ) ) {\n\n                if ( isArray(v) ) {\n                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {\n                        TO_EXP_NEG = v[0] | 0;\n                        TO_EXP_POS = v[1] | 0;\n                    }\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\n                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );\n                }\n            }\n            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];\n\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n            // 'config() RANGE not an integer: {v}'\n            // 'config() RANGE cannot be zero: {v}'\n            // 'config() RANGE out of range: {v}'\n            if ( has( p = 'RANGE' ) ) {\n\n                if ( isArray(v) ) {\n                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {\n                        MIN_EXP = v[0] | 0;\n                        MAX_EXP = v[1] | 0;\n                    }\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\n                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );\n                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );\n                }\n            }\n            r[p] = [ MIN_EXP, MAX_EXP ];\n\n            // ERRORS {boolean|number} true, false, 1 or 0.\n            // 'config() ERRORS not a boolean or binary digit: {v}'\n            if ( has( p = 'ERRORS' ) ) {\n\n                if ( v === !!v || v === 1 || v === 0 ) {\n                    id = 0;\n                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;\n                } else if (ERRORS) {\n                    raise( 2, p + notBool, v );\n                }\n            }\n            r[p] = ERRORS;\n\n            // CRYPTO {boolean|number} true, false, 1 or 0.\n            // 'config() CRYPTO not a boolean or binary digit: {v}'\n            // 'config() crypto unavailable: {crypto}'\n            if ( has( p = 'CRYPTO' ) ) {\n\n                if ( v === !!v || v === 1 || v === 0 ) {\n                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );\n                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );\n                } else if (ERRORS) {\n                    raise( 2, p + notBool, v );\n                }\n            }\n            r[p] = CRYPTO;\n\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n            // 'config() MODULO_MODE not an integer: {v}'\n            // 'config() MODULO_MODE out of range: {v}'\n            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {\n                MODULO_MODE = v | 0;\n            }\n            r[p] = MODULO_MODE;\n\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n            // 'config() POW_PRECISION not an integer: {v}'\n            // 'config() POW_PRECISION out of range: {v}'\n            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {\n                POW_PRECISION = v | 0;\n            }\n            r[p] = POW_PRECISION;\n\n            // FORMAT {object}\n            // 'config() FORMAT not an object: {v}'\n            if ( has( p = 'FORMAT' ) ) {\n\n                if ( typeof v == 'object' ) {\n                    FORMAT = v;\n                } else if (ERRORS) {\n                    raise( 2, p + ' not an object', v );\n                }\n            }\n            r[p] = FORMAT;\n\n            return r;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the maximum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };\n\n\n        /*\n         * Return a new BigNumber whose value is the minimum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };\n\n\n        /*\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\n         * zeros are produced).\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         *\n         * 'random() decimal places not an integer: {dp}'\n         * 'random() decimal places out of range: {dp}'\n         * 'random() crypto unavailable: {crypto}'\n         */\n        BigNumber.random = (function () {\n            var pow2_53 = 0x20000000000000;\n\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n            // Check if Math.random() produces more than 32 bits of randomness.\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\n              ? function () { return mathfloor( Math.random() * pow2_53 ); }\n              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\n                  (Math.random() * 0x800000 | 0); };\n\n            return function (dp) {\n                var a, b, e, k, v,\n                    i = 0,\n                    c = [],\n                    rand = new BigNumber(ONE);\n\n                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;\n                k = mathceil( dp / LOG_BASE );\n\n                if (CRYPTO) {\n\n                    // Browsers supporting crypto.getRandomValues.\n                    if ( crypto && crypto.getRandomValues ) {\n\n                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );\n\n                        for ( ; i < k; ) {\n\n                            // 53 bits:\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n                            //                                     11111 11111111 11111111\n                            // 0x20000 is 2^21.\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n                            // Rejection sampling:\n                            // 0 <= v < 9007199254740992\n                            // Probability that v >= 9e15, is\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n                            if ( v >= 9e15 ) {\n                                b = crypto.getRandomValues( new Uint32Array(2) );\n                                a[i] = b[0];\n                                a[i + 1] = b[1];\n                            } else {\n\n                                // 0 <= v <= 8999999999999999\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push( v % 1e14 );\n                                i += 2;\n                            }\n                        }\n                        i = k / 2;\n\n                    // Node.js supporting crypto.randomBytes.\n                    } else if ( crypto && crypto.randomBytes ) {\n\n                        // buffer\n                        a = crypto.randomBytes( k *= 7 );\n\n                        for ( ; i < k; ) {\n\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n                            // 0 <= v < 9007199254740992\n                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +\n                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +\n                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];\n\n                            if ( v >= 9e15 ) {\n                                crypto.randomBytes(7).copy( a, i );\n                            } else {\n\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push( v % 1e14 );\n                                i += 7;\n                            }\n                        }\n                        i = k / 7;\n                    } else if (ERRORS) {\n                        raise( 14, 'crypto unavailable', crypto );\n                    }\n                }\n\n                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.\n                if (!i) {\n\n                    for ( ; i < k; ) {\n                        v = random53bitInt();\n                        if ( v < 9e15 ) c[i++] = v % 1e14;\n                    }\n                }\n\n                k = c[--i];\n                dp %= LOG_BASE;\n\n                // Convert trailing digits to zeros according to dp.\n                if ( k && dp ) {\n                    v = POWS_TEN[LOG_BASE - dp];\n                    c[i] = mathfloor( k / v ) * v;\n                }\n\n                // Remove trailing elements which are zero.\n                for ( ; c[i] === 0; c.pop(), i-- );\n\n                // Zero?\n                if ( i < 0 ) {\n                    c = [ e = 0 ];\n                } else {\n\n                    // Remove leading elements which are zero and adjust exponent accordingly.\n                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);\n\n                    // Count the digits of the first element of c to determine leading zeros, and...\n                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n                    // adjust the exponent accordingly.\n                    if ( i < LOG_BASE ) e -= LOG_BASE - i;\n                }\n\n                rand.e = e;\n                rand.c = c;\n                return rand;\n            };\n        })();\n\n\n        // PRIVATE FUNCTIONS\n\n\n        // Convert a numeric string of baseIn to a numeric string of baseOut.\n        function convertBase( str, baseOut, baseIn, sign ) {\n            var d, e, k, r, x, xc, y,\n                i = str.indexOf( '.' ),\n                dp = DECIMAL_PLACES,\n                rm = ROUNDING_MODE;\n\n            if ( baseIn < 37 ) str = str.toLowerCase();\n\n            // Non-integer.\n            if ( i >= 0 ) {\n                k = POW_PRECISION;\n\n                // Unlimited precision.\n                POW_PRECISION = 0;\n                str = str.replace( '.', '' );\n                y = new BigNumber(baseIn);\n                x = y.pow( str.length - i );\n                POW_PRECISION = k;\n\n                // Convert str as if an integer, then restore the fraction part by dividing the\n                // result by its base raised to a power.\n                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );\n                y.e = y.c.length;\n            }\n\n            // Convert the number as integer.\n            xc = toBaseOut( str, baseIn, baseOut );\n            e = k = xc.length;\n\n            // Remove trailing zeros.\n            for ( ; xc[--k] == 0; xc.pop() );\n            if ( !xc[0] ) return '0';\n\n            if ( i < 0 ) {\n                --e;\n            } else {\n                x.c = xc;\n                x.e = e;\n\n                // sign is needed for correct rounding.\n                x.s = sign;\n                x = div( x, y, dp, rm, baseOut );\n                xc = x.c;\n                r = x.r;\n                e = x.e;\n            }\n\n            d = e + dp + 1;\n\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\n            i = xc[d];\n            k = baseOut / 2;\n            r = r || d < 0 || xc[d + 1] != null;\n\n            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\n                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\n                         rm == ( x.s < 0 ? 8 : 7 ) );\n\n            if ( d < 1 || !xc[0] ) {\n\n                // 1^-dp or 0.\n                str = r ? toFixedPoint( '1', -dp ) : '0';\n            } else {\n                xc.length = d;\n\n                if (r) {\n\n                    // Rounding up may mean the previous digit has to be rounded up and so on.\n                    for ( --baseOut; ++xc[--d] > baseOut; ) {\n                        xc[d] = 0;\n\n                        if ( !d ) {\n                            ++e;\n                            xc.unshift(1);\n                        }\n                    }\n                }\n\n                // Determine trailing zeros.\n                for ( k = xc.length; !xc[--k]; );\n\n                // E.g. [4, 11, 15] becomes 4bf.\n                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );\n                str = toFixedPoint( str, e );\n            }\n\n            // The caller will add the sign.\n            return str;\n        }\n\n\n        // Perform division in the specified base. Called by div and convertBase.\n        div = (function () {\n\n            // Assume non-zero x and k.\n            function multiply( x, k, base ) {\n                var m, temp, xlo, xhi,\n                    carry = 0,\n                    i = x.length,\n                    klo = k % SQRT_BASE,\n                    khi = k / SQRT_BASE | 0;\n\n                for ( x = x.slice(); i--; ) {\n                    xlo = x[i] % SQRT_BASE;\n                    xhi = x[i] / SQRT_BASE | 0;\n                    m = khi * xlo + xhi * klo;\n                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;\n                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;\n                    x[i] = temp % base;\n                }\n\n                if (carry) x.unshift(carry);\n\n                return x;\n            }\n\n            function compare( a, b, aL, bL ) {\n                var i, cmp;\n\n                if ( aL != bL ) {\n                    cmp = aL > bL ? 1 : -1;\n                } else {\n\n                    for ( i = cmp = 0; i < aL; i++ ) {\n\n                        if ( a[i] != b[i] ) {\n                            cmp = a[i] > b[i] ? 1 : -1;\n                            break;\n                        }\n                    }\n                }\n                return cmp;\n            }\n\n            function subtract( a, b, aL, base ) {\n                var i = 0;\n\n                // Subtract b from a.\n                for ( ; aL--; ) {\n                    a[aL] -= i;\n                    i = a[aL] < b[aL] ? 1 : 0;\n                    a[aL] = i * base + a[aL] - b[aL];\n                }\n\n                // Remove leading zeros.\n                for ( ; !a[0] && a.length > 1; a.shift() );\n            }\n\n            // x: dividend, y: divisor.\n            return function ( x, y, dp, rm, base ) {\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\n                    yL, yz,\n                    s = x.s == y.s ? 1 : -1,\n                    xc = x.c,\n                    yc = y.c;\n\n                // Either NaN, Infinity or 0?\n                if ( !xc || !xc[0] || !yc || !yc[0] ) {\n\n                    return new BigNumber(\n\n                      // Return NaN if either NaN, or both Infinity or 0.\n                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :\n\n                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0\n                    );\n                }\n\n                q = new BigNumber(s);\n                qc = q.c = [];\n                e = x.e - y.e;\n                s = dp + e + 1;\n\n                if ( !base ) {\n                    base = BASE;\n                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );\n                    s = s / LOG_BASE | 0;\n                }\n\n                // Result exponent may be one less then the current value of e.\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );\n                if ( yc[i] > ( xc[i] || 0 ) ) e--;\n\n                if ( s < 0 ) {\n                    qc.push(1);\n                    more = true;\n                } else {\n                    xL = xc.length;\n                    yL = yc.length;\n                    i = 0;\n                    s += 2;\n\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n                    n = mathfloor( base / ( yc[0] + 1 ) );\n\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\n                    if ( n > 1 ) {\n                        yc = multiply( yc, n, base );\n                        xc = multiply( xc, n, base );\n                        yL = yc.length;\n                        xL = xc.length;\n                    }\n\n                    xi = yL;\n                    rem = xc.slice( 0, yL );\n                    remL = rem.length;\n\n                    // Add zeros to make remainder as long as divisor.\n                    for ( ; remL < yL; rem[remL++] = 0 );\n                    yz = yc.slice();\n                    yz.unshift(0);\n                    yc0 = yc[0];\n                    if ( yc[1] >= base / 2 ) yc0++;\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\n\n                    do {\n                        n = 0;\n\n                        // Compare divisor and remainder.\n                        cmp = compare( yc, rem, yL, remL );\n\n                        // If divisor < remainder.\n                        if ( cmp < 0 ) {\n\n                            // Calculate trial digit, n.\n\n                            rem0 = rem[0];\n                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );\n\n                            // n is how many times the divisor goes into the current remainder.\n                            n = mathfloor( rem0 / yc0 );\n\n                            //  Algorithm:\n                            //  1. product = divisor * trial digit (n)\n                            //  2. if product > remainder: product -= divisor, n--\n                            //  3. remainder -= product\n                            //  4. if product was < remainder at 2:\n                            //    5. compare new remainder and divisor\n                            //    6. If remainder > divisor: remainder -= divisor, n++\n\n                            if ( n > 1 ) {\n\n                                // n may be > base only when base is 3.\n                                if (n >= base) n = base - 1;\n\n                                // product = divisor * trial digit.\n                                prod = multiply( yc, n, base );\n                                prodL = prod.length;\n                                remL = rem.length;\n\n                                // Compare product and remainder.\n                                // If product > remainder.\n                                // Trial digit n too high.\n                                // n is 1 too high about 5% of the time, and is not known to have\n                                // ever been more than 1 too high.\n                                while ( compare( prod, rem, prodL, remL ) == 1 ) {\n                                    n--;\n\n                                    // Subtract divisor from product.\n                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );\n                                    prodL = prod.length;\n                                    cmp = 1;\n                                }\n                            } else {\n\n                                // n is 0 or 1, cmp is -1.\n                                // If n is 0, there is no need to compare yc and rem again below,\n                                // so change cmp to 1 to avoid it.\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                                if ( n == 0 ) {\n\n                                    // divisor < remainder, so n must be at least 1.\n                                    cmp = n = 1;\n                                }\n\n                                // product = divisor\n                                prod = yc.slice();\n                                prodL = prod.length;\n                            }\n\n                            if ( prodL < remL ) prod.unshift(0);\n\n                            // Subtract product from remainder.\n                            subtract( rem, prod, remL, base );\n                            remL = rem.length;\n\n                             // If product was < remainder.\n                            if ( cmp == -1 ) {\n\n                                // Compare divisor and new remainder.\n                                // If divisor < new remainder, subtract divisor from remainder.\n                                // Trial digit n too low.\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                                while ( compare( yc, rem, yL, remL ) < 1 ) {\n                                    n++;\n\n                                    // Subtract divisor from remainder.\n                                    subtract( rem, yL < remL ? yz : yc, remL, base );\n                                    remL = rem.length;\n                                }\n                            }\n                        } else if ( cmp === 0 ) {\n                            n++;\n                            rem = [0];\n                        } // else cmp === 1 and n will be 0\n\n                        // Add the next digit, n, to the result array.\n                        qc[i++] = n;\n\n                        // Update the remainder.\n                        if ( rem[0] ) {\n                            rem[remL++] = xc[xi] || 0;\n                        } else {\n                            rem = [ xc[xi] ];\n                            remL = 1;\n                        }\n                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );\n\n                    more = rem[0] != null;\n\n                    // Leading zero?\n                    if ( !qc[0] ) qc.shift();\n                }\n\n                if ( base == BASE ) {\n\n                    // To calculate q.e, first get the number of digits of qc[0].\n                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );\n                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );\n\n                // Caller is convertBase.\n                } else {\n                    q.e = e;\n                    q.r = +more;\n                }\n\n                return q;\n            };\n        })();\n\n\n        /*\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\n         * notation rounded to the specified decimal places or significant digits.\n         *\n         * n is a BigNumber.\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).\n         * rm is the rounding mode.\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\n         */\n        function format( n, i, rm, caller ) {\n            var c0, e, ne, len, str;\n\n            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )\n              ? rm | 0 : ROUNDING_MODE;\n\n            if ( !n.c ) return n.toString();\n            c0 = n.c[0];\n            ne = n.e;\n\n            if ( i == null ) {\n                str = coeffToString( n.c );\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG\n                  ? toExponential( str, ne )\n                  : toFixedPoint( str, ne );\n            } else {\n                n = round( new BigNumber(n), i, rm );\n\n                // n.e may have changed if the value was rounded up.\n                e = n.e;\n\n                str = coeffToString( n.c );\n                len = str.length;\n\n                // toPrecision returns exponential notation if the number of significant digits\n                // specified is less than the number of digits necessary to represent the integer\n                // part of the value in fixed-point notation.\n\n                // Exponential notation.\n                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {\n\n                    // Append zeros?\n                    for ( ; len < i; str += '0', len++ );\n                    str = toExponential( str, e );\n\n                // Fixed-point notation.\n                } else {\n                    i -= ne;\n                    str = toFixedPoint( str, e );\n\n                    // Append zeros?\n                    if ( e + 1 > len ) {\n                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );\n                    } else {\n                        i += e - len;\n                        if ( i > 0 ) {\n                            if ( e + 1 == len ) str += '.';\n                            for ( ; i--; str += '0' );\n                        }\n                    }\n                }\n            }\n\n            return n.s < 0 && c0 ? '-' + str : str;\n        }\n\n\n        // Handle BigNumber.max and BigNumber.min.\n        function maxOrMin( args, method ) {\n            var m, n,\n                i = 0;\n\n            if ( isArray( args[0] ) ) args = args[0];\n            m = new BigNumber( args[0] );\n\n            for ( ; ++i < args.length; ) {\n                n = new BigNumber( args[i] );\n\n                // If any number is NaN, return NaN.\n                if ( !n.s ) {\n                    m = n;\n                    break;\n                } else if ( method.call( m, n ) ) {\n                    m = n;\n                }\n            }\n\n            return m;\n        }\n\n\n        /*\n         * Return true if n is an integer in range, otherwise throw.\n         * Use for argument validation when ERRORS is true.\n         */\n        function intValidatorWithErrors( n, min, max, caller, name ) {\n            if ( n < min || n > max || n != truncate(n) ) {\n                raise( caller, ( name || 'decimal places' ) +\n                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );\n            }\n\n            return true;\n        }\n\n\n        /*\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\n         * Called by minus, plus and times.\n         */\n        function normalise( n, c, e ) {\n            var i = 1,\n                j = c.length;\n\n             // Remove trailing zeros.\n            for ( ; !c[--j]; c.pop() );\n\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\n            for ( j = c[0]; j >= 10; j /= 10, i++ );\n\n            // Overflow?\n            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {\n\n                // Infinity.\n                n.c = n.e = null;\n\n            // Underflow?\n            } else if ( e < MIN_EXP ) {\n\n                // Zero.\n                n.c = [ n.e = 0 ];\n            } else {\n                n.e = e;\n                n.c = c;\n            }\n\n            return n;\n        }\n\n\n        // Handle values that fail the validity test in BigNumber.\n        parseNumeric = (function () {\n            var basePrefix = /^(-?)0([xbo])/i,\n                dotAfter = /^([^.]+)\\.$/,\n                dotBefore = /^\\.([^.]+)$/,\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n                whitespaceOrPlus = /^\\s*\\+|^\\s+|\\s+$/g;\n\n            return function ( x, str, num, b ) {\n                var base,\n                    s = num ? str : str.replace( whitespaceOrPlus, '' );\n\n                // No exception on ±Infinity or NaN.\n                if ( isInfinityOrNaN.test(s) ) {\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n                } else {\n                    if ( !num ) {\n\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n                        s = s.replace( basePrefix, function ( m, p1, p2 ) {\n                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n                            return !b || b == base ? p1 : m;\n                        });\n\n                        if (b) {\n                            base = b;\n\n                            // E.g. '1.' to '1', '.1' to '0.1'\n                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );\n                        }\n\n                        if ( str != s ) return new BigNumber( s, base );\n                    }\n\n                    // 'new BigNumber() not a number: {n}'\n                    // 'new BigNumber() not a base {b} number: {n}'\n                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );\n                    x.s = null;\n                }\n\n                x.c = x.e = null;\n                id = 0;\n            }\n        })();\n\n\n        // Throw a BigNumber Error.\n        function raise( caller, msg, val ) {\n            var error = new Error( [\n                'new BigNumber',     // 0\n                'cmp',               // 1\n                'config',            // 2\n                'div',               // 3\n                'divToInt',          // 4\n                'eq',                // 5\n                'gt',                // 6\n                'gte',               // 7\n                'lt',                // 8\n                'lte',               // 9\n                'minus',             // 10\n                'mod',               // 11\n                'plus',              // 12\n                'precision',         // 13\n                'random',            // 14\n                'round',             // 15\n                'shift',             // 16\n                'times',             // 17\n                'toDigits',          // 18\n                'toExponential',     // 19\n                'toFixed',           // 20\n                'toFormat',          // 21\n                'toFraction',        // 22\n                'pow',               // 23\n                'toPrecision',       // 24\n                'toString',          // 25\n                'BigNumber'          // 26\n            ][caller] + '() ' + msg + ': ' + val );\n\n            error.name = 'BigNumber Error';\n            id = 0;\n            throw error;\n        }\n\n\n        /*\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\n         * If r is truthy, it is known that there are more digits after the rounding digit.\n         */\n        function round( x, sd, rm, r ) {\n            var d, i, j, k, n, ni, rd,\n                xc = x.c,\n                pows10 = POWS_TEN;\n\n            // if x is not Infinity or NaN...\n            if (xc) {\n\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\n                // ni is the index of n within x.c.\n                // d is the number of digits of n.\n                // i is the index of rd within n including leading zeros.\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\n                out: {\n\n                    // Get the number of digits of the first element of xc.\n                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );\n                    i = sd - d;\n\n                    // If the rounding digit is in the first element of xc...\n                    if ( i < 0 ) {\n                        i += LOG_BASE;\n                        j = sd;\n                        n = xc[ ni = 0 ];\n\n                        // Get the rounding digit at index j of n.\n                        rd = n / pows10[ d - j - 1 ] % 10 | 0;\n                    } else {\n                        ni = mathceil( ( i + 1 ) / LOG_BASE );\n\n                        if ( ni >= xc.length ) {\n\n                            if (r) {\n\n                                // Needed by sqrt.\n                                for ( ; xc.length <= ni; xc.push(0) );\n                                n = rd = 0;\n                                d = 1;\n                                i %= LOG_BASE;\n                                j = i - LOG_BASE + 1;\n                            } else {\n                                break out;\n                            }\n                        } else {\n                            n = k = xc[ni];\n\n                            // Get the number of digits of n.\n                            for ( d = 1; k >= 10; k /= 10, d++ );\n\n                            // Get the index of rd within n.\n                            i %= LOG_BASE;\n\n                            // Get the index of rd within n, adjusted for leading zeros.\n                            // The number of leading zeros of n is given by LOG_BASE - d.\n                            j = i - LOG_BASE + d;\n\n                            // Get the rounding digit at index j of n.\n                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;\n                        }\n                    }\n\n                    r = r || sd < 0 ||\n\n                    // Are there any non-zero digits after the rounding digit?\n                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\n                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );\n\n                    r = rm < 4\n                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\n                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&\n\n                        // Check whether the digit to the left of the rounding digit is odd.\n                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||\n                          rm == ( x.s < 0 ? 8 : 7 ) );\n\n                    if ( sd < 1 || !xc[0] ) {\n                        xc.length = 0;\n\n                        if (r) {\n\n                            // Convert sd to decimal places.\n                            sd -= x.e + 1;\n\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                            xc[0] = pows10[ sd % LOG_BASE ];\n                            x.e = -sd || 0;\n                        } else {\n\n                            // Zero.\n                            xc[0] = x.e = 0;\n                        }\n\n                        return x;\n                    }\n\n                    // Remove excess digits.\n                    if ( i == 0 ) {\n                        xc.length = ni;\n                        k = 1;\n                        ni--;\n                    } else {\n                        xc.length = ni + 1;\n                        k = pows10[ LOG_BASE - i ];\n\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n                        // j > 0 means i > number of leading zeros of n.\n                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;\n                    }\n\n                    // Round up?\n                    if (r) {\n\n                        for ( ; ; ) {\n\n                            // If the digit to be rounded up is in the first element of xc...\n                            if ( ni == 0 ) {\n\n                                // i will be the length of xc[0] before k is added.\n                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );\n                                j = xc[0] += k;\n                                for ( k = 1; j >= 10; j /= 10, k++ );\n\n                                // if i != k the length has increased.\n                                if ( i != k ) {\n                                    x.e++;\n                                    if ( xc[0] == BASE ) xc[0] = 1;\n                                }\n\n                                break;\n                            } else {\n                                xc[ni] += k;\n                                if ( xc[ni] != BASE ) break;\n                                xc[ni--] = 0;\n                                k = 1;\n                            }\n                        }\n                    }\n\n                    // Remove trailing zeros.\n                    for ( i = xc.length; xc[--i] === 0; xc.pop() );\n                }\n\n                // Overflow? Infinity.\n                if ( x.e > MAX_EXP ) {\n                    x.c = x.e = null;\n\n                // Underflow? Zero.\n                } else if ( x.e < MIN_EXP ) {\n                    x.c = [ x.e = 0 ];\n                }\n            }\n\n            return x;\n        }\n\n\n        // PROTOTYPE/INSTANCE METHODS\n\n\n        /*\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\n         */\n        P.absoluteValue = P.abs = function () {\n            var x = new BigNumber(this);\n            if ( x.s < 0 ) x.s = 1;\n            return x;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\n         * number in the direction of Infinity.\n         */\n        P.ceil = function () {\n            return round( new BigNumber(this), this.e + 1, 2 );\n        };\n\n\n        /*\n         * Return\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\n         * 0 if they have the same value,\n         * or null if the value of either is NaN.\n         */\n        P.comparedTo = P.cmp = function ( y, b ) {\n            id = 1;\n            return compare( this, new BigNumber( y, b ) );\n        };\n\n\n        /*\n         * Return the number of decimal places of the value of this BigNumber, or null if the value\n         * of this BigNumber is ±Infinity or NaN.\n         */\n        P.decimalPlaces = P.dp = function () {\n            var n, v,\n                c = this.c;\n\n            if ( !c ) return null;\n            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;\n\n            // Subtract the number of trailing zeros of the last number.\n            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );\n            if ( n < 0 ) n = 0;\n\n            return n;\n        };\n\n\n        /*\n         *  n / 0 = I\n         *  n / N = N\n         *  n / I = 0\n         *  0 / n = 0\n         *  0 / 0 = N\n         *  0 / N = N\n         *  0 / I = 0\n         *  N / n = N\n         *  N / 0 = N\n         *  N / N = N\n         *  N / I = N\n         *  I / n = I\n         *  I / 0 = I\n         *  I / N = N\n         *  I / I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.dividedBy = P.div = function ( y, b ) {\n            id = 3;\n            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\n         * BigNumber by the value of BigNumber(y, b).\n         */\n        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {\n            id = 4;\n            return div( this, new BigNumber( y, b ), 0, 1 );\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\n         * otherwise returns false.\n         */\n        P.equals = P.eq = function ( y, b ) {\n            id = 5;\n            return compare( this, new BigNumber( y, b ) ) === 0;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\n         * number in the direction of -Infinity.\n         */\n        P.floor = function () {\n            return round( new BigNumber(this), this.e + 1, 3 );\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         * otherwise returns false.\n         */\n        P.greaterThan = P.gt = function ( y, b ) {\n            id = 6;\n            return compare( this, new BigNumber( y, b ) ) > 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than or equal to the value of\n         * BigNumber(y, b), otherwise returns false.\n         */\n        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {\n            id = 7;\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;\n\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.\n         */\n        P.isFinite = function () {\n            return !!this.c;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\n         */\n        P.isInteger = P.isInt = function () {\n            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.\n         */\n        P.isNaN = function () {\n            return !this.s;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is negative, otherwise returns false.\n         */\n        P.isNegative = P.isNeg = function () {\n            return this.s < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\n         */\n        P.isZero = function () {\n            return !!this.c && this.c[0] == 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\n         * otherwise returns false.\n         */\n        P.lessThan = P.lt = function ( y, b ) {\n            id = 8;\n            return compare( this, new BigNumber( y, b ) ) < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than or equal to the value of\n         * BigNumber(y, b), otherwise returns false.\n         */\n        P.lessThanOrEqualTo = P.lte = function ( y, b ) {\n            id = 9;\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;\n        };\n\n\n        /*\n         *  n - 0 = n\n         *  n - N = N\n         *  n - I = -I\n         *  0 - n = -n\n         *  0 - 0 = 0\n         *  0 - N = N\n         *  0 - I = -I\n         *  N - n = N\n         *  N - 0 = N\n         *  N - N = N\n         *  N - I = N\n         *  I - n = I\n         *  I - 0 = I\n         *  I - N = N\n         *  I - I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\n         * BigNumber(y, b).\n         */\n        P.minus = P.sub = function ( y, b ) {\n            var i, j, t, xLTy,\n                x = this,\n                a = x.s;\n\n            id = 10;\n            y = new BigNumber( y, b );\n            b = y.s;\n\n            // Either NaN?\n            if ( !a || !b ) return new BigNumber(NaN);\n\n            // Signs differ?\n            if ( a != b ) {\n                y.s = -b;\n                return x.plus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if ( !xe || !ye ) {\n\n                // Either Infinity?\n                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );\n\n                // Either zero?\n                if ( !xc[0] || !yc[0] ) {\n\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :\n\n                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n                      ROUNDING_MODE == 3 ? -0 : 0 );\n                }\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Determine which is the bigger number.\n            if ( a = xe - ye ) {\n\n                if ( xLTy = a < 0 ) {\n                    a = -a;\n                    t = xc;\n                } else {\n                    ye = xe;\n                    t = yc;\n                }\n\n                t.reverse();\n\n                // Prepend zeros to equalise exponents.\n                for ( b = a; b--; t.push(0) );\n                t.reverse();\n            } else {\n\n                // Exponents equal. Check digit by digit.\n                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;\n\n                for ( a = b = 0; b < j; b++ ) {\n\n                    if ( xc[b] != yc[b] ) {\n                        xLTy = xc[b] < yc[b];\n                        break;\n                    }\n                }\n            }\n\n            // x < y? Point xc to the array of the bigger number.\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n\n            b = ( j = yc.length ) - ( i = xc.length );\n\n            // Append zeros to xc if shorter.\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );\n            b = BASE - 1;\n\n            // Subtract yc from xc.\n            for ( ; j > a; ) {\n\n                if ( xc[--j] < yc[j] ) {\n                    for ( i = j; i && !xc[--i]; xc[i] = b );\n                    --xc[i];\n                    xc[j] += BASE;\n                }\n\n                xc[j] -= yc[j];\n            }\n\n            // Remove leading zeros and adjust exponent accordingly.\n            for ( ; xc[0] == 0; xc.shift(), --ye );\n\n            // Zero?\n            if ( !xc[0] ) {\n\n                // Following IEEE 754 (2008) 6.3,\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\n                y.c = [ y.e = 0 ];\n                return y;\n            }\n\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n            // for finite x and y.\n            return normalise( y, xc, ye );\n        };\n\n\n        /*\n         *   n % 0 =  N\n         *   n % N =  N\n         *   n % I =  n\n         *   0 % n =  0\n         *  -0 % n = -0\n         *   0 % 0 =  N\n         *   0 % N =  N\n         *   0 % I =  0\n         *   N % n =  N\n         *   N % 0 =  N\n         *   N % N =  N\n         *   N % I =  N\n         *   I % n =  N\n         *   I % 0 =  N\n         *   I % N =  N\n         *   I % I =  N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\n         */\n        P.modulo = P.mod = function ( y, b ) {\n            var q, s,\n                x = this;\n\n            id = 11;\n            y = new BigNumber( y, b );\n\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n            if ( !x.c || !y.s || y.c && !y.c[0] ) {\n                return new BigNumber(NaN);\n\n            // Return x if y is Infinity or x is zero.\n            } else if ( !y.c || x.c && !x.c[0] ) {\n                return new BigNumber(x);\n            }\n\n            if ( MODULO_MODE == 9 ) {\n\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\n                // r = x - qy    where  0 <= r < abs(y)\n                s = y.s;\n                y.s = 1;\n                q = div( x, y, 0, 3 );\n                y.s = s;\n                q.s *= s;\n            } else {\n                q = div( x, y, 0, MODULO_MODE );\n            }\n\n            return x.minus( q.times(y) );\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\n         * i.e. multiplied by -1.\n         */\n        P.negated = P.neg = function () {\n            var x = new BigNumber(this);\n            x.s = -x.s || null;\n            return x;\n        };\n\n\n        /*\n         *  n + 0 = n\n         *  n + N = N\n         *  n + I = I\n         *  0 + n = n\n         *  0 + 0 = 0\n         *  0 + N = N\n         *  0 + I = I\n         *  N + n = N\n         *  N + 0 = N\n         *  N + N = N\n         *  N + I = N\n         *  I + n = I\n         *  I + 0 = I\n         *  I + N = N\n         *  I + I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\n         * BigNumber(y, b).\n         */\n        P.plus = P.add = function ( y, b ) {\n            var t,\n                x = this,\n                a = x.s;\n\n            id = 12;\n            y = new BigNumber( y, b );\n            b = y.s;\n\n            // Either NaN?\n            if ( !a || !b ) return new BigNumber(NaN);\n\n            // Signs differ?\n             if ( a != b ) {\n                y.s = -b;\n                return x.minus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if ( !xe || !ye ) {\n\n                // Return ±Infinity if either ±Infinity.\n                if ( !xc || !yc ) return new BigNumber( a / 0 );\n\n                // Either zero?\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n            if ( a = xe - ye ) {\n                if ( a > 0 ) {\n                    ye = xe;\n                    t = yc;\n                } else {\n                    a = -a;\n                    t = xc;\n                }\n\n                t.reverse();\n                for ( ; a--; t.push(0) );\n                t.reverse();\n            }\n\n            a = xc.length;\n            b = yc.length;\n\n            // Point xc to the longer array, and b to the shorter length.\n            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;\n\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n            for ( a = 0; b; ) {\n                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;\n                xc[b] %= BASE;\n            }\n\n            if (a) {\n                xc.unshift(a);\n                ++ye;\n            }\n\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n            // ye = MAX_EXP + 1 possible\n            return normalise( y, xc, ye );\n        };\n\n\n        /*\n         * Return the number of significant digits of the value of this BigNumber.\n         *\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\n         */\n        P.precision = P.sd = function (z) {\n            var n, v,\n                x = this,\n                c = x.c;\n\n            // 'precision() argument not a boolean or binary digit: {z}'\n            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {\n                if (ERRORS) raise( 13, 'argument' + notBool, z );\n                if ( z != !!z ) z = null;\n            }\n\n            if ( !c ) return null;\n            v = c.length - 1;\n            n = v * LOG_BASE + 1;\n\n            if ( v = c[v] ) {\n\n                // Subtract the number of trailing zeros of the last element.\n                for ( ; v % 10 == 0; v /= 10, n-- );\n\n                // Add the number of digits of the first element.\n                for ( v = c[0]; v >= 10; v /= 10, n++ );\n            }\n\n            if ( z && x.e + 1 > n ) n = x.e + 1;\n\n            return n;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\n         * omitted.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'round() decimal places out of range: {dp}'\n         * 'round() decimal places not an integer: {dp}'\n         * 'round() rounding mode not an integer: {rm}'\n         * 'round() rounding mode out of range: {rm}'\n         */\n        P.round = function ( dp, rm ) {\n            var n = new BigNumber(this);\n\n            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {\n                round( n, ~~dp + this.e + 1, rm == null ||\n                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );\n            }\n\n            return n;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\n         *\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\n         *\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\n         * otherwise.\n         *\n         * 'shift() argument not an integer: {k}'\n         * 'shift() argument out of range: {k}'\n         */\n        P.shift = function (k) {\n            var n = this;\n            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )\n\n              // k < 1e+21, or truncate(k) will produce exponential notation.\n              ? n.times( '1e' + truncate(k) )\n              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )\n                ? n.s * ( k < 0 ? 0 : 1 / 0 )\n                : n );\n        };\n\n\n        /*\n         *  sqrt(-n) =  N\n         *  sqrt( N) =  N\n         *  sqrt(-I) =  N\n         *  sqrt( I) =  I\n         *  sqrt( 0) =  0\n         *  sqrt(-0) = -0\n         *\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.squareRoot = P.sqrt = function () {\n            var m, n, r, rep, t,\n                x = this,\n                c = x.c,\n                s = x.s,\n                e = x.e,\n                dp = DECIMAL_PLACES + 4,\n                half = new BigNumber('0.5');\n\n            // Negative/NaN/Infinity/zero?\n            if ( s !== 1 || !c || !c[0] ) {\n                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );\n            }\n\n            // Initial estimate.\n            s = Math.sqrt( +x );\n\n            // Math.sqrt underflow/overflow?\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n            if ( s == 0 || s == 1 / 0 ) {\n                n = coeffToString(c);\n                if ( ( n.length + e ) % 2 == 0 ) n += '0';\n                s = Math.sqrt(n);\n                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );\n\n                if ( s == 1 / 0 ) {\n                    n = '1e' + e;\n                } else {\n                    n = s.toExponential();\n                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;\n                }\n\n                r = new BigNumber(n);\n            } else {\n                r = new BigNumber( s + '' );\n            }\n\n            // Check for zero.\n            // r could be zero if MIN_EXP is changed after the this value was created.\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n            // coeffToString to throw.\n            if ( r.c[0] ) {\n                e = r.e;\n                s = e + dp;\n                if ( s < 3 ) s = 0;\n\n                // Newton-Raphson iteration.\n                for ( ; ; ) {\n                    t = r;\n                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );\n\n                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =\n                         coeffToString( r.c ) ).slice( 0, s ) ) {\n\n                        // The exponent of r may here be one less than the final result exponent,\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n                        // are indexed correctly.\n                        if ( r.e < e ) --s;\n                        n = n.slice( s - 3, s + 1 );\n\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n                        // iteration.\n                        if ( n == '9999' || !rep && n == '4999' ) {\n\n                            // On the first iteration only, check to see if rounding up gives the\n                            // exact result as the nines may infinitely repeat.\n                            if ( !rep ) {\n                                round( t, t.e + DECIMAL_PLACES + 2, 0 );\n\n                                if ( t.times(t).eq(x) ) {\n                                    r = t;\n                                    break;\n                                }\n                            }\n\n                            dp += 4;\n                            s += 4;\n                            rep = 1;\n                        } else {\n\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n                            // result. If not, then there are further digits and m will be truthy.\n                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {\n\n                                // Truncate to the first rounding digit.\n                                round( r, r.e + DECIMAL_PLACES + 2, 1 );\n                                m = !r.times(r).eq(x);\n                            }\n\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );\n        };\n\n\n        /*\n         *  n * 0 = 0\n         *  n * N = N\n         *  n * I = I\n         *  0 * n = 0\n         *  0 * 0 = 0\n         *  0 * N = N\n         *  0 * I = N\n         *  N * n = N\n         *  N * 0 = N\n         *  N * N = N\n         *  N * I = N\n         *  I * n = I\n         *  I * 0 = N\n         *  I * N = N\n         *  I * I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of\n         * BigNumber(y, b).\n         */\n        P.times = P.mul = function ( y, b ) {\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\n                base, sqrtBase,\n                x = this,\n                xc = x.c,\n                yc = ( id = 17, y = new BigNumber( y, b ) ).c;\n\n            // Either NaN, ±Infinity or ±0?\n            if ( !xc || !yc || !xc[0] || !yc[0] ) {\n\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {\n                    y.c = y.e = y.s = null;\n                } else {\n                    y.s *= x.s;\n\n                    // Return ±Infinity if either is ±Infinity.\n                    if ( !xc || !yc ) {\n                        y.c = y.e = null;\n\n                    // Return ±0 if either is ±0.\n                    } else {\n                        y.c = [0];\n                        y.e = 0;\n                    }\n                }\n\n                return y;\n            }\n\n            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );\n            y.s *= x.s;\n            xcL = xc.length;\n            ycL = yc.length;\n\n            // Ensure xc points to longer array and xcL to its length.\n            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\n\n            // Initialise the result array with zeros.\n            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );\n\n            base = BASE;\n            sqrtBase = SQRT_BASE;\n\n            for ( i = ycL; --i >= 0; ) {\n                c = 0;\n                ylo = yc[i] % sqrtBase;\n                yhi = yc[i] / sqrtBase | 0;\n\n                for ( k = xcL, j = i + k; j > i; ) {\n                    xlo = xc[--k] % sqrtBase;\n                    xhi = xc[k] / sqrtBase | 0;\n                    m = yhi * xlo + xhi * ylo;\n                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;\n                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;\n                    zc[j--] = xlo % base;\n                }\n\n                zc[j] = c;\n            }\n\n            if (c) {\n                ++e;\n            } else {\n                zc.shift();\n            }\n\n            return normalise( y, zc, e );\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toDigits() precision out of range: {sd}'\n         * 'toDigits() precision not an integer: {sd}'\n         * 'toDigits() rounding mode not an integer: {rm}'\n         * 'toDigits() rounding mode out of range: {rm}'\n         */\n        P.toDigits = function ( sd, rm ) {\n            var n = new BigNumber(this);\n            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;\n            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;\n            return sd ? round( n, sd, rm ) : n;\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in exponential notation and\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toExponential() decimal places not an integer: {dp}'\n         * 'toExponential() decimal places out of range: {dp}'\n         * 'toExponential() rounding mode not an integer: {rm}'\n         * 'toExponential() rounding mode out of range: {rm}'\n         */\n        P.toExponential = function ( dp, rm ) {\n            return format( this,\n              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toFixed() decimal places not an integer: {dp}'\n         * 'toFixed() decimal places out of range: {dp}'\n         * 'toFixed() rounding mode not an integer: {rm}'\n         * 'toFixed() rounding mode out of range: {rm}'\n         */\n        P.toFixed = function ( dp, rm ) {\n            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )\n              ? ~~dp + this.e + 1 : null, rm, 20 );\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\n         * of the FORMAT object (see BigNumber.config).\n         *\n         * FORMAT = {\n         *      decimalSeparator : '.',\n         *      groupSeparator : ',',\n         *      groupSize : 3,\n         *      secondaryGroupSize : 0,\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\n         *      fractionGroupSize : 0\n         * };\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toFormat() decimal places not an integer: {dp}'\n         * 'toFormat() decimal places out of range: {dp}'\n         * 'toFormat() rounding mode not an integer: {rm}'\n         * 'toFormat() rounding mode out of range: {rm}'\n         */\n        P.toFormat = function ( dp, rm ) {\n            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )\n              ? ~~dp + this.e + 1 : null, rm, 21 );\n\n            if ( this.c ) {\n                var i,\n                    arr = str.split('.'),\n                    g1 = +FORMAT.groupSize,\n                    g2 = +FORMAT.secondaryGroupSize,\n                    groupSeparator = FORMAT.groupSeparator,\n                    intPart = arr[0],\n                    fractionPart = arr[1],\n                    isNeg = this.s < 0,\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\n                    len = intDigits.length;\n\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n                if ( g1 > 0 && len > 0 ) {\n                    i = len % g1 || g1;\n                    intPart = intDigits.substr( 0, i );\n\n                    for ( ; i < len; i += g1 ) {\n                        intPart += groupSeparator + intDigits.substr( i, g1 );\n                    }\n\n                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);\n                    if (isNeg) intPart = '-' + intPart;\n                }\n\n                str = fractionPart\n                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )\n                    ? fractionPart.replace( new RegExp( '\\\\d{' + g2 + '}\\\\B', 'g' ),\n                      '$&' + FORMAT.fractionGroupSeparator )\n                    : fractionPart )\n                  : intPart;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return a string array representing the value of this BigNumber as a simple fraction with\n         * an integer numerator and an integer denominator. The denominator will be a positive\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\n         * denominator is not specified, the denominator will be the lowest value necessary to\n         * represent the number exactly.\n         *\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\n         *\n         * 'toFraction() max denominator not an integer: {md}'\n         * 'toFraction() max denominator out of range: {md}'\n         */\n        P.toFraction = function (md) {\n            var arr, d0, d2, e, exp, n, n0, q, s,\n                k = ERRORS,\n                x = this,\n                xc = x.c,\n                d = new BigNumber(ONE),\n                n1 = d0 = new BigNumber(ONE),\n                d1 = n0 = new BigNumber(ONE);\n\n            if ( md != null ) {\n                ERRORS = false;\n                n = new BigNumber(md);\n                ERRORS = k;\n\n                if ( !( k = n.isInt() ) || n.lt(ONE) ) {\n\n                    if (ERRORS) {\n                        raise( 22,\n                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );\n                    }\n\n                    // ERRORS is false:\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.\n                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;\n                }\n            }\n\n            if ( !xc ) return x.toString();\n            s = coeffToString(xc);\n\n            // Determine initial denominator.\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n            e = d.e = s.length - x.e - 1;\n            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];\n            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;\n\n            exp = MAX_EXP;\n            MAX_EXP = 1 / 0;\n            n = new BigNumber(s);\n\n            // n0 = d1 = 0\n            n0.c[0] = 0;\n\n            for ( ; ; )  {\n                q = div( n, d, 0, 1 );\n                d2 = d0.plus( q.times(d1) );\n                if ( d2.cmp(md) == 1 ) break;\n                d0 = d1;\n                d1 = d2;\n                n1 = n0.plus( q.times( d2 = n1 ) );\n                n0 = d2;\n                d = n.minus( q.times( d2 = d ) );\n                n = d2;\n            }\n\n            d2 = div( md.minus(d0), d1, 0, 1 );\n            n0 = n0.plus( d2.times(n1) );\n            d0 = d0.plus( d2.times(d1) );\n            n0.s = n1.s = x.s;\n            e *= 2;\n\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\n            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(\n                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1\n                    ? [ n1.toString(), d1.toString() ]\n                    : [ n0.toString(), d0.toString() ];\n\n            MAX_EXP = exp;\n            return arr;\n        };\n\n\n        /*\n         * Return the value of this BigNumber converted to a number primitive.\n         */\n        P.toNumber = function () {\n            var x = this;\n\n            // Ensure zero has correct sign.\n            return +x || ( x.s ? x.s * 0 : NaN );\n        };\n\n\n        /*\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\n         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.\n         *\n         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.\n         * (Performs 54 loop iterations for n of 9007199254740992.)\n         *\n         * 'pow() exponent not an integer: {n}'\n         * 'pow() exponent out of range: {n}'\n         */\n        P.toPower = P.pow = function (n) {\n            var k, y,\n                i = mathfloor( n < 0 ? -n : +n ),\n                x = this;\n\n            // Pass ±Infinity to Math.pow if exponent is out of range.\n            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&\n              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||\n                parseFloat(n) != n && !( n = NaN ) ) ) {\n                return new BigNumber( Math.pow( +x, n ) );\n            }\n\n            // Truncating each coefficient array to a length of k after each multiplication equates\n            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a\n            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)\n            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;\n            y = new BigNumber(ONE);\n\n            for ( ; ; ) {\n\n                if ( i % 2 ) {\n                    y = y.times(x);\n                    if ( !y.c ) break;\n                    if ( k && y.c.length > k ) y.c.length = k;\n                }\n\n                i = mathfloor( i / 2 );\n                if ( !i ) break;\n\n                x = x.times(x);\n                if ( k && x.c && x.c.length > k ) x.c.length = k;\n            }\n\n            if ( n < 0 ) y = ONE.div(y);\n            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\n         * necessary to represent the integer part of the value in fixed-point notation, then use\n         * exponential notation.\n         *\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toPrecision() precision not an integer: {sd}'\n         * 'toPrecision() precision out of range: {sd}'\n         * 'toPrecision() rounding mode not an integer: {rm}'\n         * 'toPrecision() rounding mode out of range: {rm}'\n         */\n        P.toPrecision = function ( sd, rm ) {\n            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )\n              ? sd | 0 : null, rm, 24 );\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\n         * TO_EXP_NEG, return exponential notation.\n         *\n         * [b] {number} Integer, 2 to 64 inclusive.\n         *\n         * 'toString() base not an integer: {b}'\n         * 'toString() base out of range: {b}'\n         */\n        P.toString = function (b) {\n            var str,\n                n = this,\n                s = n.s,\n                e = n.e;\n\n            // Infinity or NaN?\n            if ( e === null ) {\n\n                if (s) {\n                    str = 'Infinity';\n                    if ( s < 0 ) str = '-' + str;\n                } else {\n                    str = 'NaN';\n                }\n            } else {\n                str = coeffToString( n.c );\n\n                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n                      ? toExponential( str, e )\n                      : toFixedPoint( str, e );\n                } else {\n                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );\n                }\n\n                if ( s < 0 && n.c[0] ) str = '-' + str;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\n         * number.\n         */\n        P.truncated = P.trunc = function () {\n            return round( new BigNumber(this), this.e + 1, 1 );\n        };\n\n\n\n        /*\n         * Return as toString, but do not accept a base argument.\n         */\n        P.valueOf = P.toJSON = function () {\n            return this.toString();\n        };\n\n\n        // Aliases for BigDecimal methods.\n        //P.add = P.plus;         // P.add included above\n        //P.subtract = P.minus;   // P.sub included above\n        //P.multiply = P.times;   // P.mul included above\n        //P.divide = P.div;\n        //P.remainder = P.mod;\n        //P.compareTo = P.cmp;\n        //P.negate = P.neg;\n\n\n        if ( configObj != null ) BigNumber.config(configObj);\n\n        return BigNumber;\n    }\n\n\n    // PRIVATE HELPER FUNCTIONS\n\n\n    function bitFloor(n) {\n        var i = n | 0;\n        return n > 0 || n === i ? i : i - 1;\n    }\n\n\n    // Return a coefficient array as a string of base 10 digits.\n    function coeffToString(a) {\n        var s, z,\n            i = 1,\n            j = a.length,\n            r = a[0] + '';\n\n        for ( ; i < j; ) {\n            s = a[i++] + '';\n            z = LOG_BASE - s.length;\n            for ( ; z--; s = '0' + s );\n            r += s;\n        }\n\n        // Determine trailing zeros.\n        for ( j = r.length; r.charCodeAt(--j) === 48; );\n        return r.slice( 0, j + 1 || 1 );\n    }\n\n\n    // Compare the value of BigNumbers x and y.\n    function compare( x, y ) {\n        var a, b,\n            xc = x.c,\n            yc = y.c,\n            i = x.s,\n            j = y.s,\n            k = x.e,\n            l = y.e;\n\n        // Either NaN?\n        if ( !i || !j ) return null;\n\n        a = xc && !xc[0];\n        b = yc && !yc[0];\n\n        // Either zero?\n        if ( a || b ) return a ? b ? 0 : -j : i;\n\n        // Signs differ?\n        if ( i != j ) return i;\n\n        a = i < 0;\n        b = k == l;\n\n        // Either Infinity?\n        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;\n\n        // Compare exponents.\n        if ( !b ) return k > l ^ a ? 1 : -1;\n\n        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;\n\n        // Compare digit by digit.\n        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n        // Compare lengths.\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\n    }\n\n\n    /*\n     * Return true if n is a valid number in range, otherwise false.\n     * Use for argument validation when ERRORS is false.\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\n     */\n    function intValidatorNoErrors( n, min, max ) {\n        return ( n = truncate(n) ) >= min && n <= max;\n    }\n\n\n    function isArray(obj) {\n        return Object.prototype.toString.call(obj) == '[object Array]';\n    }\n\n\n    /*\n     * Convert string of baseIn to an array of numbers of baseOut.\n     * Eg. convertBase('255', 10, 16) returns [15, 15].\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\n     */\n    function toBaseOut( str, baseIn, baseOut ) {\n        var j,\n            arr = [0],\n            arrL,\n            i = 0,\n            len = str.length;\n\n        for ( ; i < len; ) {\n            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );\n            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );\n\n            for ( ; j < arr.length; j++ ) {\n\n                if ( arr[j] > baseOut - 1 ) {\n                    if ( arr[j + 1] == null ) arr[j + 1] = 0;\n                    arr[j + 1] += arr[j] / baseOut | 0;\n                    arr[j] %= baseOut;\n                }\n            }\n        }\n\n        return arr.reverse();\n    }\n\n\n    function toExponential( str, e ) {\n        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +\n          ( e < 0 ? 'e' : 'e+' ) + e;\n    }\n\n\n    function toFixedPoint( str, e ) {\n        var len, z;\n\n        // Negative exponent?\n        if ( e < 0 ) {\n\n            // Prepend zeros.\n            for ( z = '0.'; ++e; z += '0' );\n            str = z + str;\n\n        // Positive exponent\n        } else {\n            len = str.length;\n\n            // Append zeros.\n            if ( ++e > len ) {\n                for ( z = '0', e -= len; --e; z += '0' );\n                str += z;\n            } else if ( e < len ) {\n                str = str.slice( 0, e ) + '.' + str.slice(e);\n            }\n        }\n\n        return str;\n    }\n\n\n    function truncate(n) {\n        n = parseFloat(n);\n        return n < 0 ? mathceil(n) : mathfloor(n);\n    }\n\n\n    // EXPORT\n\n\n    BigNumber = another();\n\n    // AMD.\n    if ( typeof define == 'function' && define.amd ) {\n        define( function () { return BigNumber; } );\n\n    // Node and other environments that support module.exports.\n    } else if ( typeof module != 'undefined' && module.exports ) {\n        module.exports = BigNumber;\n        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}\n\n    // Browser.\n    } else {\n        global.BigNumber = BigNumber;\n    }\n})(this);\n"]},"metadata":{},"sourceType":"script"}