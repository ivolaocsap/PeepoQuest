{"ast":null,"code":"import _defineProperty from\"/Users/ivopascoal/Desktop/cuffies/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import{InjectedConnector}from'@web3-react/injected-connector';import{WalletConnectConnector}from'@web3-react/walletconnect-connector';import{BscConnector}from'@binance-chain/bsc-connector';import{useMemo}from'react';import{ConnectorNames}from'src/state/application/reducer';import{useConfiguration}from'src/contexts/ConfigProvider/ConfigProvider';var POLLING_INTERVAL=1000000;var useWalletConnectors=function useWalletConnectors(){var _useConfiguration=useConfiguration(),chainId=_useConfiguration.chainId,defaultProvider=_useConfiguration.defaultProvider;return useMemo(function(){var _ref;if(!defaultProvider){return{};}var networkUrl=Array.isArray(defaultProvider)?defaultProvider[0]:defaultProvider;if(!chainId||!networkUrl){throw new Error('Network configuration is invalid');}var injected=new InjectedConnector({supportedChainIds:[chainId]});var binanceConnect=new BscConnector({supportedChainIds:[chainId]});var walletConnect=new WalletConnectConnector({rpc:_defineProperty({},chainId,networkUrl),bridge:'https://bridge.walletconnect.org',qrcode:true,pollingInterval:POLLING_INTERVAL});return _ref={},_defineProperty(_ref,ConnectorNames.Injected,injected),_defineProperty(_ref,ConnectorNames.WalletConnect,walletConnect),_defineProperty(_ref,ConnectorNames.BSC,binanceConnect),_ref;},[chainId,defaultProvider]);};export default useWalletConnectors;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/cuffies/src/hooks/useWalletConnectors.ts"],"names":["InjectedConnector","WalletConnectConnector","BscConnector","useMemo","ConnectorNames","useConfiguration","POLLING_INTERVAL","useWalletConnectors","chainId","defaultProvider","networkUrl","Array","isArray","Error","injected","supportedChainIds","binanceConnect","walletConnect","rpc","bridge","qrcode","pollingInterval","Injected","WalletConnect","BSC"],"mappings":"0JAAA,OAASA,iBAAT,KAAkC,gCAAlC,CACA,OAASC,sBAAT,KAAuC,qCAAvC,CACA,OAASC,YAAT,KAA6B,8BAA7B,CACA,OAASC,OAAT,KAAwB,OAAxB,CACA,OAASC,cAAT,KAA+B,+BAA/B,CACA,OAASC,gBAAT,KAAiC,4CAAjC,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,OAAzB,CAEA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAChC,sBAAqCF,gBAAgB,EAArD,CAAQG,OAAR,mBAAQA,OAAR,CAAiBC,eAAjB,mBAAiBA,eAAjB,CAEA,MAAON,CAAAA,OAAO,CAAC,UAAM,UACnB,GAAI,CAACM,eAAL,CAAsB,CACpB,MAAO,EAAP,CACD,CAED,GAAMC,CAAAA,UAAU,CAAGC,KAAK,CAACC,OAAN,CAAcH,eAAd,EAAiCA,eAAe,CAAC,CAAD,CAAhD,CAAsDA,eAAzE,CAEA,GAAI,CAACD,OAAD,EAAY,CAACE,UAAjB,CAA6B,CAC3B,KAAM,IAAIG,CAAAA,KAAJ,CAAU,kCAAV,CAAN,CACD,CAED,GAAMC,CAAAA,QAAQ,CAAG,GAAId,CAAAA,iBAAJ,CAAsB,CAAEe,iBAAiB,CAAE,CAACP,OAAD,CAArB,CAAtB,CAAjB,CACA,GAAMQ,CAAAA,cAAc,CAAG,GAAId,CAAAA,YAAJ,CAAiB,CAAEa,iBAAiB,CAAE,CAACP,OAAD,CAArB,CAAjB,CAAvB,CAEA,GAAMS,CAAAA,aAAa,CAAG,GAAIhB,CAAAA,sBAAJ,CAA2B,CAC/CiB,GAAG,oBAAKV,OAAL,CAAeE,UAAf,CAD4C,CAE/CS,MAAM,CAAE,kCAFuC,CAG/CC,MAAM,CAAE,IAHuC,CAI/CC,eAAe,CAAEf,gBAJ8B,CAA3B,CAAtB,CAOA,oCACGF,cAAc,CAACkB,QADlB,CAC6BR,QAD7B,uBAEGV,cAAc,CAACmB,aAFlB,CAEkCN,aAFlC,uBAGGb,cAAc,CAACoB,GAHlB,CAGwBR,cAHxB,OAKD,CA1Ba,CA0BX,CAACR,OAAD,CAAUC,eAAV,CA1BW,CAAd,CA2BD,CA9BD,CAgCA,cAAeF,CAAAA,mBAAf","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { BscConnector } from '@binance-chain/bsc-connector';\nimport { useMemo } from 'react';\nimport { ConnectorNames } from 'src/state/application/reducer';\nimport { useConfiguration } from 'src/contexts/ConfigProvider/ConfigProvider';\n\nconst POLLING_INTERVAL = 1000000;\n\nconst useWalletConnectors = () => {\n  const { chainId, defaultProvider } = useConfiguration();\n\n  return useMemo(() => {\n    if (!defaultProvider) {\n      return {};\n    }\n\n    const networkUrl = Array.isArray(defaultProvider) ? defaultProvider[0] : defaultProvider;\n\n    if (!chainId || !networkUrl) {\n      throw new Error('Network configuration is invalid');\n    }\n\n    const injected = new InjectedConnector({ supportedChainIds: [chainId] });\n    const binanceConnect = new BscConnector({ supportedChainIds: [chainId] });\n\n    const walletConnect = new WalletConnectConnector({\n      rpc: { [chainId]: networkUrl },\n      bridge: 'https://bridge.walletconnect.org',\n      qrcode: true,\n      pollingInterval: POLLING_INTERVAL,\n    });\n\n    return {\n      [ConnectorNames.Injected]: injected,\n      [ConnectorNames.WalletConnect]: walletConnect,\n      [ConnectorNames.BSC]: binanceConnect,\n    };\n  }, [chainId, defaultProvider]);\n};\n\nexport default useWalletConnectors;\n"]},"metadata":{},"sourceType":"module"}