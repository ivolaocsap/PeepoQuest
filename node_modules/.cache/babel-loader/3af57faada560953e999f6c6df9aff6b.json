{"ast":null,"code":"/* eslint-disable @typescript-eslint/ban-types */\nimport { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant'; // taken from ethers.js, compatible interface with web3 provider\n\nexport class RequestError extends Error {\n  constructor(message, code, data) {\n    super();\n    this.code = code;\n    this.data = data;\n    this.name = this.constructor.name;\n    this.message = message;\n  }\n\n}\n\nclass MiniRpcProvider {\n  constructor(chainId, url) {\n    this.isMetaMask = false;\n    this.chainId = void 0;\n    this.url = void 0;\n    this.host = void 0;\n    this.path = void 0;\n\n    this.sendAsync = (request, callback) => {\n      console.log('sendAsync', request.method, request.params);\n      this.request(request.method, request.params).then(result => callback(null, {\n        jsonrpc: '2.0',\n        id: request.id,\n        result\n      })).catch(error => callback(error, null));\n    };\n\n    this.request = async (method, params) => {\n      if (typeof method !== 'string') {\n        params = method.params;\n        method = method.method;\n      }\n\n      const response = await fetch(this.url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method,\n          params\n        })\n      });\n      if (!response.ok) throw new RequestError(`${response.status}: ${response.statusText}`, -32000);\n      const body = await response.json();\n\n      if ('error' in body) {\n        var _body$error, _body$error2, _body$error3;\n\n        throw new RequestError(body === null || body === void 0 ? void 0 : (_body$error = body.error) === null || _body$error === void 0 ? void 0 : _body$error.message, body === null || body === void 0 ? void 0 : (_body$error2 = body.error) === null || _body$error2 === void 0 ? void 0 : _body$error2.code, body === null || body === void 0 ? void 0 : (_body$error3 = body.error) === null || _body$error3 === void 0 ? void 0 : _body$error3.data);\n      } else if ('result' in body) {\n        return body.result;\n      } else {\n        throw new RequestError(`Received unexpected JSON-RPC response to ${method} request.`, -32000, body);\n      }\n    };\n\n    this.chainId = chainId;\n    this.url = url;\n    const parsed = new URL(url);\n    this.host = parsed.host;\n    this.path = parsed.pathname;\n  }\n\n}\n\nexport class NetworkConnector extends AbstractConnector {\n  constructor({\n    urls,\n    defaultChainId\n  }) {\n    invariant(defaultChainId || Object.keys(urls).length === 1, 'defaultChainId is a required argument with >1 url');\n    super({\n      supportedChainIds: Object.keys(urls).map(k => Number(k))\n    });\n    this.providers = void 0;\n    this.currentChainId = void 0;\n    this.currentChainId = defaultChainId || Number(Object.keys(urls)[0]);\n    this.providers = Object.keys(urls).reduce((accumulator, chainId) => {\n      accumulator[Number(chainId)] = new MiniRpcProvider(Number(chainId), urls[Number(chainId)]);\n      return accumulator;\n    }, {});\n  }\n\n  async activate() {\n    return {\n      provider: this.providers[this.currentChainId],\n      chainId: this.currentChainId,\n      account: null\n    };\n  }\n\n  async getProvider() {\n    return this.providers[this.currentChainId];\n  }\n\n  async getChainId() {\n    return this.currentChainId;\n  }\n\n  async getAccount() {\n    return null;\n  }\n\n  deactivate() {\n    return;\n  }\n\n  changeChainId(chainId) {\n    invariant(Object.keys(this.providers).includes(chainId.toString()), `No url found for chainId ${chainId}`);\n    this.currentChainId = chainId;\n    this.emitUpdate({\n      provider: this.providers[this.currentChainId],\n      chainId\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/cuffies/src/libs/NetworkConnector.ts"],"names":["AbstractConnector","invariant","RequestError","Error","constructor","message","code","data","name","MiniRpcProvider","chainId","url","isMetaMask","host","path","sendAsync","request","callback","console","log","method","params","then","result","jsonrpc","id","catch","error","response","fetch","headers","body","JSON","stringify","ok","status","statusText","json","parsed","URL","pathname","NetworkConnector","urls","defaultChainId","Object","keys","length","supportedChainIds","map","k","Number","providers","currentChainId","reduce","accumulator","activate","provider","account","getProvider","getChainId","getAccount","deactivate","changeChainId","includes","toString","emitUpdate"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport { ConnectorUpdate } from '@web3-react/types';\nimport { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\n\n// taken from ethers.js, compatible interface with web3 provider\ntype AsyncSendable = {\n  isMetaMask?: boolean;\n  host?: string;\n  path?: string;\n  sendAsync?: (request: any, callback: (error: any, response: any) => void) => void;\n  send?: (request: any, callback: (error: any, response: any) => void) => void;\n};\n\nexport class RequestError extends Error {\n  constructor(message: string, public code: number, public data?: unknown) {\n    super();\n    this.name = this.constructor.name;\n    this.message = message;\n  }\n}\n\nclass MiniRpcProvider implements AsyncSendable {\n  public readonly isMetaMask: false = false;\n  public readonly chainId: number;\n  public readonly url: string;\n  public readonly host: string;\n  public readonly path: string;\n\n  constructor(chainId: number, url: string) {\n    this.chainId = chainId;\n    this.url = url;\n    const parsed = new URL(url);\n    this.host = parsed.host;\n    this.path = parsed.pathname;\n  }\n\n  public readonly sendAsync = (\n    request: {\n      jsonrpc: '2.0';\n      id: number | string | null;\n      method: string;\n      params?: unknown[] | object;\n    },\n    callback: (error: any, response: any) => void,\n  ): void => {\n    console.log('sendAsync', request.method, request.params);\n    this.request(request.method, request.params)\n      .then((result) => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n      .catch((error) => callback(error, null));\n  };\n\n  public readonly request = async (\n    method: string | { method: string; params?: unknown[] | object },\n    params?: unknown[] | object,\n  ): Promise<unknown> => {\n    if (typeof method !== 'string') {\n      params = (method as any).params;\n      method = method.method;\n    }\n\n    const response = await fetch(this.url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        id: 1,\n        method,\n        params,\n      }),\n    });\n    if (!response.ok)\n      throw new RequestError(`${response.status}: ${response.statusText}`, -32000);\n    const body = await response.json();\n    if ('error' in body) {\n      throw new RequestError(body?.error?.message, body?.error?.code, body?.error?.data);\n    } else if ('result' in body) {\n      return body.result;\n    } else {\n      throw new RequestError(\n        `Received unexpected JSON-RPC response to ${method} request.`,\n        -32000,\n        body,\n      );\n    }\n  };\n}\n\ninterface NetworkConnectorArguments {\n  urls: { [chainId: number]: string };\n  defaultChainId?: number;\n}\n\nexport class NetworkConnector extends AbstractConnector {\n  private readonly providers: { [chainId: number]: MiniRpcProvider };\n  private currentChainId: number;\n\n  constructor({ urls, defaultChainId }: NetworkConnectorArguments) {\n    invariant(\n      defaultChainId || Object.keys(urls).length === 1,\n      'defaultChainId is a required argument with >1 url',\n    );\n    super({ supportedChainIds: Object.keys(urls).map((k): number => Number(k)) });\n\n    this.currentChainId = defaultChainId || Number(Object.keys(urls)[0]);\n    this.providers = Object.keys(urls).reduce<{ [chainId: number]: MiniRpcProvider }>(\n      (accumulator, chainId) => {\n        accumulator[Number(chainId)] = new MiniRpcProvider(\n          Number(chainId),\n          urls[Number(chainId)],\n        );\n        return accumulator;\n      },\n      {},\n    );\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    return {\n      provider: this.providers[this.currentChainId],\n      chainId: this.currentChainId,\n      account: null,\n    };\n  }\n\n  public async getProvider(): Promise<MiniRpcProvider> {\n    return this.providers[this.currentChainId];\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.currentChainId;\n  }\n\n  public async getAccount(): Promise<null> {\n    return null;\n  }\n\n  public deactivate() {\n    return;\n  }\n\n  public changeChainId(chainId: number) {\n    invariant(\n      Object.keys(this.providers).includes(chainId.toString()),\n      `No url found for chainId ${chainId}`,\n    );\n    this.currentChainId = chainId;\n    this.emitUpdate({ provider: this.providers[this.currentChainId], chainId });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}