{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { MaxUint256 } from '@ethersproject/constants';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useHasPendingApproval } from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nconst APPROVE_AMOUNT = MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\nexport let ApprovalState; // returns a variable indicating the state of the approval and a function which approves if necessary or early returns\n\n(function (ApprovalState) {\n  ApprovalState[ApprovalState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  ApprovalState[ApprovalState[\"NOT_APPROVED\"] = 1] = \"NOT_APPROVED\";\n  ApprovalState[ApprovalState[\"PENDING\"] = 2] = \"PENDING\";\n  ApprovalState[ApprovalState[\"APPROVED\"] = 3] = \"APPROVED\";\n})(ApprovalState || (ApprovalState = {}));\n\nfunction useApprove(token, spender) {\n  _s();\n\n  const pendingApproval = useHasPendingApproval(token === null || token === void 0 ? void 0 : token.address, spender);\n  const {\n    allowance: currentAllowance,\n    fetchAllowance: refreshAllowance\n  } = useAllowance(token, spender, pendingApproval);\n  const [approvalRequested, setApprovalRequested] = useState(false); // check the current approval status\n\n  const approvalState = useMemo(() => {\n    if (!currentAllowance) {\n      return ApprovalState.UNKNOWN;\n    }\n\n    if (approvalRequested) {\n      return pendingApproval ? ApprovalState.PENDING : ApprovalState.APPROVED;\n    } // amountToApprove will be defined if currentAllowance is\n\n\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT) ? pendingApproval ? ApprovalState.PENDING : ApprovalState.NOT_APPROVED : ApprovalState.APPROVED;\n  }, [approvalRequested, currentAllowance, pendingApproval]);\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n  const approve = useCallback(async () => {\n    console.log(spender, approvalState);\n\n    if (approvalState === ApprovalState.PENDING || approvalState === ApprovalState.APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    try {\n      await handleTransactionReceipt(token.approve(spender, APPROVE_AMOUNT), `Approve ${token.symbol}`, {\n        approval: {\n          spender: spender,\n          tokenAddress: token.address\n        }\n      });\n      setApprovalRequested(true);\n    } catch {\n      setApprovalRequested(false);\n    }\n  }, [approvalState, handleTransactionReceipt, token, spender]);\n  const refresh = useCallback(async () => {\n    await refreshAllowance();\n  }, [refreshAllowance]);\n  return [approvalState, approve, refresh];\n}\n\n_s(useApprove, \"w+aXOh71fUtasq9rw49eONNONCo=\", false, function () {\n  return [useHasPendingApproval, useAllowance, useHandleTransactionReceipt];\n});\n\nexport default useApprove;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/BabyPepe/src/hooks/useApprove.ts"],"names":["BigNumber","MaxUint256","useCallback","useMemo","useState","useHasPendingApproval","useAllowance","useHandleTransactionReceipt","APPROVE_AMOUNT","APPROVE_BASE_AMOUNT","from","ApprovalState","useApprove","token","spender","pendingApproval","address","allowance","currentAllowance","fetchAllowance","refreshAllowance","approvalRequested","setApprovalRequested","approvalState","UNKNOWN","PENDING","APPROVED","lt","NOT_APPROVED","handleTransactionReceipt","approve","console","log","error","symbol","approval","tokenAddress","refresh"],"mappings":"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","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { MaxUint256 } from '@ethersproject/constants';\nimport { useCallback, useMemo, useState } from 'react';\nimport ERC20 from '../diamondhand/ERC20';\nimport { useHasPendingApproval } from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst APPROVE_AMOUNT = MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApprove(\n  token: ERC20,\n  spender: string,\n): [ApprovalState, () => Promise<void>, () => Promise<void>] {\n  const pendingApproval = useHasPendingApproval(token?.address, spender);\n  const { allowance: currentAllowance, fetchAllowance: refreshAllowance } = useAllowance(\n    token,\n    spender,\n    pendingApproval,\n  );\n  const [approvalRequested, setApprovalRequested] = useState(false);\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    if (!currentAllowance) {\n      return ApprovalState.UNKNOWN;\n    }\n\n    if (approvalRequested) {\n      return pendingApproval ? ApprovalState.PENDING : ApprovalState.APPROVED;\n    }\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED;\n  }, [approvalRequested, currentAllowance, pendingApproval]);\n\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const approve = useCallback(async (): Promise<void> => {\n    console.log(spender, approvalState);\n    if (approvalState === ApprovalState.PENDING || approvalState === ApprovalState.APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n    try {\n      await handleTransactionReceipt(\n        token.approve(spender, APPROVE_AMOUNT),\n        `Approve ${token.symbol}`,\n        {\n          approval: {\n            spender: spender,\n            tokenAddress: token.address,\n          },\n        },\n      );\n      setApprovalRequested(true);\n    } catch {\n      setApprovalRequested(false);\n    }\n  }, [approvalState, handleTransactionReceipt, token, spender]);\n\n  const refresh = useCallback(async () => {\n    await refreshAllowance();\n  }, [refreshAllowance]);\n\n  return [approvalState, approve, refresh];\n}\n\nexport default useApprove;\n"]},"metadata":{},"sourceType":"module"}