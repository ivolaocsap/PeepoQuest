{"ast":null,"code":"var _jsxFileName = \"/Users/ivopascoal/Desktop/PhysicalNFTs/src/contexts/AccountBalanceProvider/AccountBalanceProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport useDiamondHand from '../../hooks/useDiamondHand';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport ERC20 from '../../diamondhand/ERC20';\nimport { useBlockNumber } from '../../state/application/hooks';\nimport { useConfiguration } from '../ConfigProvider/ConfigProvider';\nimport { useWeb3React } from '@web3-react/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetBalanceContext = /*#__PURE__*/createContext(null);\nconst SetListeningTokenContext = /*#__PURE__*/createContext(null);\nexport const AccountBalanceProvider = ({\n  children\n}) => {\n  _s();\n\n  const [balance, setBalance] = useState({});\n  const [listeningToken, _setListeningToken] = useState([]);\n  const {\n    addresses\n  } = useConfiguration();\n  const isWindowVisible = useIsWindowVisible();\n  const blockNumber = useBlockNumber();\n  const CuffiesBank = useDiamondHand();\n  const lastCheckedBlockNumber = useRef();\n  const {\n    library: provider\n  } = useWeb3React();\n  const {\n    account\n  } = useWeb3React();\n  const getBalance = useCallback(async () => {\n    if (!account || !(addresses === null || addresses === void 0 ? void 0 : addresses.Multicall)) {\n      return {};\n    }\n\n    return await ERC20.multicallTokenBalance(provider, addresses.Multicall, listeningToken.map(t => t.address), account);\n  }, [account, addresses === null || addresses === void 0 ? void 0 : addresses.Multicall, listeningToken, provider]);\n  const setListeningToken = useCallback(token => {\n    if (!token) {\n      return;\n    }\n\n    _setListeningToken(x => {\n      if (x.some(t => t.symbol === token.symbol)) {\n        return x;\n      }\n\n      return [...x, token];\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GetBalanceContext.Provider, {\n    value: balance,\n    children: /*#__PURE__*/_jsxDEV(SetListeningTokenContext.Provider, {\n      value: setListeningToken,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AccountBalanceProvider, \"f7KXOtchEqE4JIGhn8Eb+ki/g2Y=\", false, function () {\n  return [useConfiguration, useIsWindowVisible, useBlockNumber, useDiamondHand, useWeb3React, useWeb3React];\n});\n\n_c = AccountBalanceProvider;\nexport const useTokenBalance = token => {\n  _s2();\n\n  const setListeningToken = useContext(SetListeningTokenContext);\n  useEffect(() => {\n    if (token) {\n      setListeningToken(token);\n    }\n  }, [setListeningToken, token]);\n  const context = useContext(GetBalanceContext);\n\n  if (context == null || setListeningToken == null) {\n    throw new Error('BalanceContextProvider not found');\n  }\n\n  return token ? context[token.address] : null;\n};\n\n_s2(useTokenBalance, \"lWWDJhF7ehL1hRyVC7ziEw1JoSM=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountBalanceProvider\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/PhysicalNFTs/src/contexts/AccountBalanceProvider/AccountBalanceProvider.tsx"],"names":["createContext","useCallback","useContext","useEffect","useRef","useState","useDiamondHand","useIsWindowVisible","ERC20","useBlockNumber","useConfiguration","useWeb3React","GetBalanceContext","SetListeningTokenContext","AccountBalanceProvider","children","balance","setBalance","listeningToken","_setListeningToken","addresses","isWindowVisible","blockNumber","CuffiesBank","lastCheckedBlockNumber","library","provider","account","getBalance","Multicall","multicallTokenBalance","map","t","address","setListeningToken","token","x","some","symbol","useTokenBalance","context","Error"],"mappings":";;;;AACA,SACEA,aADF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,SALF,EAMEC,MANF,EAOEC,QAPF,QAQO,OARP;AASA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,gBAAT,QAAiC,kCAAjC;AACA,SAASC,YAAT,QAA6B,kBAA7B;;AAGA,MAAMC,iBAAiB,gBAAGZ,aAAa,CAAe,IAAf,CAAvC;AACA,MAAMa,wBAAwB,gBAAGb,aAAa,CAAyB,IAAzB,CAA9C;AAEA,OAAO,MAAMc,sBAAyD,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACzF,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAe,EAAf,CAAtC;AACA,QAAM,CAACa,cAAD,EAAiBC,kBAAjB,IAAuCd,QAAQ,CAAU,EAAV,CAArD;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAgBV,gBAAgB,EAAtC;AACA,QAAMW,eAAe,GAAGd,kBAAkB,EAA1C;AACA,QAAMe,WAAW,GAAGb,cAAc,EAAlC;AACA,QAAMc,WAAW,GAAGjB,cAAc,EAAlC;AACA,QAAMkB,sBAAsB,GAAGpB,MAAM,EAArC;AACA,QAAM;AAAEqB,IAAAA,OAAO,EAAEC;AAAX,MAAwBf,YAAY,EAA1C;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAAchB,YAAY,EAAhC;AAEA,QAAMiB,UAAU,GAAG3B,WAAW,CAAC,YAAY;AACzC,QAAI,CAAC0B,OAAD,IAAY,EAACP,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAES,SAAZ,CAAhB,EAAuC;AACrC,aAAO,EAAP;AACD;;AACD,WAAO,MAAMrB,KAAK,CAACsB,qBAAN,CACXJ,QADW,EAEXN,SAAS,CAACS,SAFC,EAGXX,cAAc,CAACa,GAAf,CAAoBC,CAAD,IAAOA,CAAC,CAACC,OAA5B,CAHW,EAIXN,OAJW,CAAb;AAMD,GAV6B,EAU3B,CAACA,OAAD,EAAUP,SAAV,aAAUA,SAAV,uBAAUA,SAAS,CAAES,SAArB,EAAgCX,cAAhC,EAAgDQ,QAAhD,CAV2B,CAA9B;AAYA,QAAMQ,iBAAiB,GAAGjC,WAAW,CAAEkC,KAAD,IAAkB;AACtD,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AACDhB,IAAAA,kBAAkB,CAAEiB,CAAD,IAAO;AACxB,UAAIA,CAAC,CAACC,IAAF,CAAQL,CAAD,IAAOA,CAAC,CAACM,MAAF,KAAaH,KAAK,CAACG,MAAjC,CAAJ,EAA8C;AAC5C,eAAOF,CAAP;AACD;;AAED,aAAO,CAAC,GAAGA,CAAJ,EAAOD,KAAP,CAAP;AACD,KANiB,CAAlB;AAOD,GAXoC,EAWlC,EAXkC,CAArC;AAaA,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEnB,OAAnC;AAAA,2BACE,QAAC,wBAAD,CAA0B,QAA1B;AAAmC,MAAA,KAAK,EAAEkB,iBAA1C;AAAA,gBACGnB;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA3CM;;GAAMD,sB;UAGWJ,gB,EACEH,kB,EACJE,c,EACAH,c,EAEUK,Y,EACVA,Y;;;KATTG,sB;AA6Cb,OAAO,MAAMyB,eAAe,GAAIJ,KAAD,IAA6B;AAAA;;AAC1D,QAAMD,iBAAiB,GAAGhC,UAAU,CAACW,wBAAD,CAApC;AACAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgC,KAAJ,EAAW;AACTD,MAAAA,iBAAiB,CAACC,KAAD,CAAjB;AACD;AACF,GAJQ,EAIN,CAACD,iBAAD,EAAoBC,KAApB,CAJM,CAAT;AAMA,QAAMK,OAAO,GAAGtC,UAAU,CAACU,iBAAD,CAA1B;;AAEA,MAAI4B,OAAO,IAAI,IAAX,IAAmBN,iBAAiB,IAAI,IAA5C,EAAkD;AAChD,UAAM,IAAIO,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAED,SAAON,KAAK,GAAGK,OAAO,CAACL,KAAK,CAACF,OAAP,CAAV,GAA4B,IAAxC;AACD,CAfM;;IAAMM,e","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport {\n  createContext,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport useDiamondHand from '../../hooks/useDiamondHand';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport ERC20 from '../../diamondhand/ERC20';\nimport { useBlockNumber } from '../../state/application/hooks';\nimport { useConfiguration } from '../ConfigProvider/ConfigProvider';\nimport { useWeb3React } from '@web3-react/core';\n\ntype BalanceState = Record<string, BigNumber>;\nconst GetBalanceContext = createContext<BalanceState>(null);\nconst SetListeningTokenContext = createContext<(token: ERC20) => void>(null);\n\nexport const AccountBalanceProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [balance, setBalance] = useState<BalanceState>({});\n  const [listeningToken, _setListeningToken] = useState<ERC20[]>([]);\n  const { addresses } = useConfiguration();\n  const isWindowVisible = useIsWindowVisible();\n  const blockNumber = useBlockNumber();\n  const CuffiesBank = useDiamondHand();\n  const lastCheckedBlockNumber = useRef<number>();\n  const { library: provider } = useWeb3React();\n  const { account } = useWeb3React();\n\n  const getBalance = useCallback(async () => {\n    if (!account || !addresses?.Multicall) {\n      return {};\n    }\n    return await ERC20.multicallTokenBalance(\n      provider,\n      addresses.Multicall,\n      listeningToken.map((t) => t.address),\n      account,\n    );\n  }, [account, addresses?.Multicall, listeningToken, provider]);\n\n  const setListeningToken = useCallback((token: ERC20) => {\n    if (!token) {\n      return;\n    }\n    _setListeningToken((x) => {\n      if (x.some((t) => t.symbol === token.symbol)) {\n        return x;\n      }\n\n      return [...x, token];\n    });\n  }, []);\n\n  return (\n    <GetBalanceContext.Provider value={balance}>\n      <SetListeningTokenContext.Provider value={setListeningToken}>\n        {children}\n      </SetListeningTokenContext.Provider>\n    </GetBalanceContext.Provider>\n  );\n};\n\nexport const useTokenBalance = (token: ERC20): BigNumber => {\n  const setListeningToken = useContext(SetListeningTokenContext);\n  useEffect(() => {\n    if (token) {\n      setListeningToken(token);\n    }\n  }, [setListeningToken, token]);\n\n  const context = useContext(GetBalanceContext);\n\n  if (context == null || setListeningToken == null) {\n    throw new Error('BalanceContextProvider not found');\n  }\n\n  return token ? context[token.address] : null;\n};\n"]},"metadata":{},"sourceType":"module"}