{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst axios_1 = require(\"axios\");\n\nconst Web3 = require(\"web3\");\n\nconst types_1 = require(\"../../../types\");\n\nexports.CryptoBotsSchema = {\n  version: 1,\n  deploymentBlock: 4819345,\n  name: 'CryptoBots',\n  description: 'A blockchain-based game to find out whose bot army is the best!',\n  thumbnail: 'https://cryptobots.me/static/media/banner.38d05abc.svg',\n  website: 'https://cryptobots.me/',\n  fields: [{\n    name: 'ID',\n    type: 'uint256',\n    description: 'CryptoBot number.'\n  }],\n  assetFromFields: fields => fields.ID,\n  assetToFields: asset => ({\n    ID: asset\n  }),\n  formatter: asset => __awaiter(this, void 0, void 0, function* () {\n    const response = yield axios_1.default.post(`https://cryptobots.me/api/bot/search`, {\n      ids: [asset]\n    }).catch(err => {\n      if (err.response && (err.response.status === 404 || err.response.status === 400)) {\n        return null;\n      } else {\n        throw err;\n      }\n    });\n\n    if (response === null || !response.data.items[0]) {\n      return {\n        thumbnail: 'https://cryptobots.me/static/media/banner.38d05abc.svg',\n        title: 'CryptoBot #' + asset,\n        description: '',\n        url: 'https://cryptobots.me/bot/' + asset,\n        properties: []\n      };\n    } else {\n      const data = response.data.items[0];\n      return {\n        thumbnail: 'https://cryptobots.me/img/' + data.info.genes,\n        title: 'CryptoBot #' + asset,\n        description: 'Generation: ' + data.info.generation,\n        url: 'https://cryptobots.me/bot/' + asset,\n        properties: []\n      };\n    }\n  }),\n  functions: {\n    transfer: asset => ({\n      type: Web3.AbiType.Function,\n      name: 'transfer',\n      payable: false,\n      constant: false,\n      stateMutability: types_1.StateMutability.Nonpayable,\n      target: '0xf7a6e15dfd5cdd9ef12711bd757a9b6021abf643',\n      inputs: [{\n        kind: types_1.FunctionInputKind.Replaceable,\n        name: '_to',\n        type: 'address'\n      }, {\n        kind: types_1.FunctionInputKind.Asset,\n        name: '_tokenId',\n        type: 'uint256',\n        value: asset\n      }],\n      outputs: []\n    }),\n    ownerOf: asset => ({\n      type: Web3.AbiType.Function,\n      name: 'ownerOf',\n      payable: false,\n      constant: true,\n      stateMutability: types_1.StateMutability.View,\n      target: '0xf7a6e15dfd5cdd9ef12711bd757a9b6021abf643',\n      inputs: [{\n        kind: types_1.FunctionInputKind.Asset,\n        name: '_tokenId',\n        type: 'uint256',\n        value: asset\n      }],\n      outputs: [{\n        kind: types_1.FunctionOutputKind.Owner,\n        name: 'owner',\n        type: 'address'\n      }]\n    }),\n    assetsOfOwnerByIndex: []\n  },\n  events: {\n    transfer: [{\n      type: Web3.AbiType.Event,\n      name: 'Transfer',\n      target: '0xf7a6e15dfd5cdd9ef12711bd757a9b6021abf643',\n      anonymous: false,\n      inputs: [{\n        kind: types_1.EventInputKind.Source,\n        indexed: false,\n        name: 'from',\n        type: 'address'\n      }, {\n        kind: types_1.EventInputKind.Destination,\n        indexed: false,\n        name: 'to',\n        type: 'address'\n      }, {\n        kind: types_1.EventInputKind.Asset,\n        indexed: false,\n        name: 'tokenId',\n        type: 'uint256'\n      }],\n      assetFromInputs: inputs => __awaiter(this, void 0, void 0, function* () {\n        return inputs.tokenId;\n      })\n    }]\n  },\n  hash: a => a\n};","map":{"version":3,"sources":["../../../../src/schemas/main/CryptoBots/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst axios_1 = require(\"axios\");\nconst Web3 = require(\"web3\");\nconst types_1 = require(\"../../../types\");\nexports.CryptoBotsSchema = {\n    version: 1,\n    deploymentBlock: 4819345,\n    name: 'CryptoBots',\n    description: 'A blockchain-based game to find out whose bot army is the best!',\n    thumbnail: 'https://cryptobots.me/static/media/banner.38d05abc.svg',\n    website: 'https://cryptobots.me/',\n    fields: [\n        { name: 'ID', type: 'uint256', description: 'CryptoBot number.' },\n    ],\n    assetFromFields: (fields) => fields.ID,\n    assetToFields: asset => ({ ID: asset }),\n    formatter: (asset) => __awaiter(this, void 0, void 0, function* () {\n        const response = yield axios_1.default.post(`https://cryptobots.me/api/bot/search`, { ids: [asset] }).catch(err => {\n            if (err.response && (err.response.status === 404 || err.response.status === 400)) {\n                return null;\n            }\n            else {\n                throw err;\n            }\n        });\n        if (response === null || !response.data.items[0]) {\n            return {\n                thumbnail: 'https://cryptobots.me/static/media/banner.38d05abc.svg',\n                title: 'CryptoBot #' + asset,\n                description: '',\n                url: 'https://cryptobots.me/bot/' + asset,\n                properties: [],\n            };\n        }\n        else {\n            const data = response.data.items[0];\n            return {\n                thumbnail: 'https://cryptobots.me/img/' + data.info.genes,\n                title: 'CryptoBot #' + asset,\n                description: 'Generation: ' + data.info.generation,\n                url: 'https://cryptobots.me/bot/' + asset,\n                properties: [],\n            };\n        }\n    }),\n    functions: {\n        transfer: asset => ({\n            type: Web3.AbiType.Function,\n            name: 'transfer',\n            payable: false,\n            constant: false,\n            stateMutability: types_1.StateMutability.Nonpayable,\n            target: '0xf7a6e15dfd5cdd9ef12711bd757a9b6021abf643',\n            inputs: [\n                { kind: types_1.FunctionInputKind.Replaceable, name: '_to', type: 'address' },\n                { kind: types_1.FunctionInputKind.Asset, name: '_tokenId', type: 'uint256', value: asset },\n            ],\n            outputs: [],\n        }),\n        ownerOf: asset => ({\n            type: Web3.AbiType.Function,\n            name: 'ownerOf',\n            payable: false,\n            constant: true,\n            stateMutability: types_1.StateMutability.View,\n            target: '0xf7a6e15dfd5cdd9ef12711bd757a9b6021abf643',\n            inputs: [\n                { kind: types_1.FunctionInputKind.Asset, name: '_tokenId', type: 'uint256', value: asset },\n            ],\n            outputs: [\n                { kind: types_1.FunctionOutputKind.Owner, name: 'owner', type: 'address' },\n            ],\n        }),\n        assetsOfOwnerByIndex: [],\n    },\n    events: {\n        transfer: [{\n                type: Web3.AbiType.Event,\n                name: 'Transfer',\n                target: '0xf7a6e15dfd5cdd9ef12711bd757a9b6021abf643',\n                anonymous: false,\n                inputs: [\n                    { kind: types_1.EventInputKind.Source, indexed: false, name: 'from', type: 'address' },\n                    { kind: types_1.EventInputKind.Destination, indexed: false, name: 'to', type: 'address' },\n                    { kind: types_1.EventInputKind.Asset, indexed: false, name: 'tokenId', type: 'uint256' },\n                ],\n                assetFromInputs: (inputs) => __awaiter(this, void 0, void 0, function* () { return inputs.tokenId; }),\n            }],\n    },\n    hash: a => a,\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}