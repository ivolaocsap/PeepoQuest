{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport useDiamondHand from 'src/hooks/useDiamondHand';\n\nconst useTicketClaim = ticketIds => {\n  _s();\n\n  const dh = useDiamondHand();\n  const [isCanClaimReward, setIsCanClaimReward] = useState(false);\n  const [claimStatuses, setClaimStatuses] = useState([]);\n  const getTicketClaimStatus = useCallback(() => {\n    var _dh$TICKET;\n\n    if (!dh || !ticketIds) return;\n    dh === null || dh === void 0 ? void 0 : (_dh$TICKET = dh.TICKET) === null || _dh$TICKET === void 0 ? void 0 : _dh$TICKET.getTicketClaimStatuses(ticketIds).then(ticketStatuses => {\n      var _ticketStatuses$map;\n\n      const statuses = ticketIds === null || ticketIds === void 0 ? void 0 : ticketIds.map((t, index) => {\n        var _ticketStatuses$index;\n\n        return {\n          id: t,\n          claimed: (_ticketStatuses$index = ticketStatuses[index]) === null || _ticketStatuses$index === void 0 ? void 0 : _ticketStatuses$index.claimed\n        };\n      });\n      setClaimStatuses(statuses);\n      setIsCanClaimReward(ticketStatuses === null || ticketStatuses === void 0 ? void 0 : (_ticketStatuses$map = ticketStatuses.map(s => s === null || s === void 0 ? void 0 : s.claimed)) === null || _ticketStatuses$map === void 0 ? void 0 : _ticketStatuses$map.includes(false));\n    });\n  }, [dh, ticketIds]);\n  useEffect(() => {\n    getTicketClaimStatus();\n  }, [getTicketClaimStatus]);\n  return {\n    isCanClaimReward,\n    claimStatuses,\n    getTicketClaimStatus\n  };\n};\n\n_s(useTicketClaim, \"+0Enl9pcpXB8yM1SCbRaAVl3D8s=\", false, function () {\n  return [useDiamondHand];\n});\n\nexport default useTicketClaim;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/BabyPepe/src/views/TicketDetail/hooks/useTicketClaim.ts"],"names":["useCallback","useEffect","useState","useDiamondHand","useTicketClaim","ticketIds","dh","isCanClaimReward","setIsCanClaimReward","claimStatuses","setClaimStatuses","getTicketClaimStatus","TICKET","getTicketClaimStatuses","then","ticketStatuses","statuses","map","t","index","id","claimed","s","includes"],"mappings":";;AACA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAOC,cAAP,MAA2B,0BAA3B;;AAMA,MAAMC,cAAc,GAAIC,SAAD,IAA4B;AAAA;;AACjD,QAAMC,EAAE,GAAGH,cAAc,EAAzB;AACA,QAAM,CAACI,gBAAD,EAAmBC,mBAAnB,IAA0CN,QAAQ,CAAU,KAAV,CAAxD;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAsB,EAAtB,CAAlD;AAEA,QAAMS,oBAAoB,GAAGX,WAAW,CAAC,MAAM;AAAA;;AAC7C,QAAI,CAACM,EAAD,IAAO,CAACD,SAAZ,EAAuB;AACvBC,IAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,0BAAAA,EAAE,CAAEM,MAAJ,0DAAYC,sBAAZ,CAAmCR,SAAnC,EAA8CS,IAA9C,CAAoDC,cAAD,IAA2B;AAAA;;AAC5E,YAAMC,QAAQ,GAAGX,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEY,GAAX,CAAe,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAAA;;AAC5C,eAAO;AACLC,UAAAA,EAAE,EAAEF,CADC;AAELG,UAAAA,OAAO,2BAAEN,cAAc,CAACI,KAAD,CAAhB,0DAAE,sBAAuBE;AAF3B,SAAP;AAID,OALgB,CAAjB;AAMAX,MAAAA,gBAAgB,CAACM,QAAD,CAAhB;AACAR,MAAAA,mBAAmB,CAACO,cAAD,aAACA,cAAD,8CAACA,cAAc,CAAEE,GAAhB,CAAqBK,CAAD,IAAOA,CAAP,aAAOA,CAAP,uBAAOA,CAAC,CAAED,OAA9B,CAAD,wDAAC,oBAAwCE,QAAxC,CAAiD,KAAjD,CAAD,CAAnB;AACD,KATD;AAUD,GAZuC,EAYrC,CAACjB,EAAD,EAAKD,SAAL,CAZqC,CAAxC;AAcAJ,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,oBAAoB;AACrB,GAFQ,EAEN,CAACA,oBAAD,CAFM,CAAT;AAIA,SAAO;AAAEJ,IAAAA,gBAAF;AAAoBE,IAAAA,aAApB;AAAmCE,IAAAA;AAAnC,GAAP;AACD,CAxBD;;GAAMP,c;UACOD,c;;;AAyBb,eAAeC,cAAf","sourcesContent":["import { BigNumber } from 'ethers';\nimport { useCallback, useEffect, useState } from 'react';\nimport useDiamondHand from 'src/hooks/useDiamondHand';\n\ntype TicketClaimStatus = {\n  id: BigNumber;\n  claimed: boolean;\n};\nconst useTicketClaim = (ticketIds: BigNumber[]) => {\n  const dh = useDiamondHand();\n  const [isCanClaimReward, setIsCanClaimReward] = useState<boolean>(false);\n  const [claimStatuses, setClaimStatuses] = useState<TicketClaimStatus[]>([]);\n\n  const getTicketClaimStatus = useCallback(() => {\n    if (!dh || !ticketIds) return;\n    dh?.TICKET?.getTicketClaimStatuses(ticketIds).then((ticketStatuses: any[]) => {\n      const statuses = ticketIds?.map((t, index) => {\n        return {\n          id: t,\n          claimed: ticketStatuses[index]?.claimed,\n        };\n      });\n      setClaimStatuses(statuses);\n      setIsCanClaimReward(ticketStatuses?.map((s) => s?.claimed)?.includes(false));\n    });\n  }, [dh, ticketIds]);\n\n  useEffect(() => {\n    getTicketClaimStatus();\n  }, [getTicketClaimStatus]);\n\n  return { isCanClaimReward, claimStatuses, getTicketClaimStatus };\n};\n\nexport default useTicketClaim;\n"]},"metadata":{},"sourceType":"module"}