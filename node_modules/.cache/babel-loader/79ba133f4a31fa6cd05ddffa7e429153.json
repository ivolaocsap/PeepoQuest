{"ast":null,"code":"import { BigNumber } from '@ethersproject/bignumber';\nimport fromUnixTime from 'date-fns/fromUnixTime';\nimport { ContractWrapper } from './ContractWrapper';\nexport class Lottery extends ContractWrapper {\n  constructor(abi, address, signer, diamondHand) {\n    super(abi, address, signer);\n    this.diamondHand = diamondHand;\n  }\n\n  async getCurrentLottoInfo() {\n    const [[lotto], [prizes], [maxValidRange], [powerBallRange]] = await this.diamondHand.multicall([{\n      contract: this.contract,\n      method: 'getCurrentLotto'\n    }, {\n      contract: this.contract,\n      method: 'getCurrentPrizes'\n    }, {\n      contract: this.contract,\n      method: 'maxValidRange_'\n    }, {\n      contract: this.contract,\n      method: 'powerBallRange_'\n    }]);\n\n    if (!lotto) {\n      return {};\n    }\n\n    const numberOfTickets = await this.diamondHand.TICKET.getNumberOfTickets(lotto[0]);\n    return {\n      info: {\n        lotteryId: lotto[0].toNumber(),\n        lotteryStatus: lotto[1],\n        prizePool: lotto[2],\n        costPerTicket: lotto[3],\n        prizeDistribution: lotto[4].map(t => t.toNumber()),\n        startingTimestamp: fromUnixTime(lotto[5].toNumber()),\n        closingTimestamp: fromUnixTime(lotto[6].toNumber()),\n        winningNumbers: lotto[7],\n        winners: lotto[8],\n        numberOfTickets\n      },\n      prizes,\n      maxValidRange,\n      powerBallRange\n    };\n  }\n\n  async getCurrentLotto() {\n    return await this.contract.getCurrentLotto();\n  }\n\n  getBasicLottoInfo(lotteryId) {\n    return this.contract.getBasicLottoInfo(BigNumber.from(lotteryId)).then(data => {\n      var _data$prizeDistributi;\n\n      const prizes = data === null || data === void 0 ? void 0 : (_data$prizeDistributi = data.prizeDistribution) === null || _data$prizeDistributi === void 0 ? void 0 : _data$prizeDistributi.map(prize => {\n        var _data$prizePool;\n\n        return data === null || data === void 0 ? void 0 : (_data$prizePool = data.prizePool) === null || _data$prizePool === void 0 ? void 0 : _data$prizePool.mul(prize).div(1e6);\n      });\n      return { ...data,\n        prizes\n      };\n    });\n  }\n\n  async getCurrentPrizes() {\n    return await this.contract.getCurrentPrizes();\n  }\n\n  async getCostPerTicket() {\n    return await this.contract.costPerTicket_();\n  }\n\n  async getCurrentTotalPrize() {\n    return await this.contract.getCurrentTotalPrize();\n  }\n\n  async autoStartLotto() {\n    return await this.contract.safeCall.autoStartLotto();\n  }\n\n  async manualStartLotto(startingTime, closingTime) {\n    return await this.contract.safeCall.manualStartLotto(startingTime, closingTime);\n  }\n\n  async drawWinningNumbers(lotteryId) {\n    return await this.contract.safeCall.drawWinningNumbers(lotteryId);\n  }\n\n  async batchBuyLottoTicket(lotteryId, numberOfTickets, chosenNumbersForEachTicket) {\n    return await this.contract.safeCall.batchBuyLottoTicket(lotteryId, numberOfTickets, chosenNumbersForEachTicket);\n  }\n\n  async batchClaimRewards(lotteryId, tokenIds) {\n    return await this.contract.safeCall.batchClaimRewards(lotteryId, tokenIds);\n  }\n\n  async maxValidRange() {\n    return await this.contract.maxValidRange_();\n  }\n\n  async powerBallRange() {\n    return await this.contract.powerBallRange_();\n  }\n\n}\nexport let LotteryStatus;\n\n(function (LotteryStatus) {\n  LotteryStatus[LotteryStatus[\"NotStarted\"] = 0] = \"NotStarted\";\n  LotteryStatus[LotteryStatus[\"Open\"] = 1] = \"Open\";\n  LotteryStatus[LotteryStatus[\"Closed\"] = 2] = \"Closed\";\n  LotteryStatus[LotteryStatus[\"Completed\"] = 3] = \"Completed\";\n})(LotteryStatus || (LotteryStatus = {}));","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/BabyPepe/src/diamondhand/Lottery.ts"],"names":["BigNumber","fromUnixTime","ContractWrapper","Lottery","constructor","abi","address","signer","diamondHand","getCurrentLottoInfo","lotto","prizes","maxValidRange","powerBallRange","multicall","contract","method","numberOfTickets","TICKET","getNumberOfTickets","info","lotteryId","toNumber","lotteryStatus","prizePool","costPerTicket","prizeDistribution","map","t","startingTimestamp","closingTimestamp","winningNumbers","winners","getCurrentLotto","getBasicLottoInfo","from","then","data","prize","mul","div","getCurrentPrizes","getCostPerTicket","costPerTicket_","getCurrentTotalPrize","autoStartLotto","safeCall","manualStartLotto","startingTime","closingTime","drawWinningNumbers","batchBuyLottoTicket","chosenNumbersForEachTicket","batchClaimRewards","tokenIds","maxValidRange_","powerBallRange_","LotteryStatus"],"mappings":"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","sourcesContent":["import { Provider } from '@ethersproject/abstract-provider';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport fromUnixTime from 'date-fns/fromUnixTime';\nimport { ContractWrapper } from './ContractWrapper';\nimport { DiamondHand } from './DiamondHand';\n\nexport type LottoInfo = {\n  info: {\n    lotteryId: number;\n    lotteryStatus: LotteryStatus;\n    prizePool: BigNumber;\n    costPerTicket: BigNumber;\n    prizeDistribution: number[];\n    startingTimestamp: Date;\n    closingTimestamp: Date;\n    winningNumbers: number[];\n    winners: BigNumber[];\n    numberOfTickets: BigNumber;\n  };\n  prizes: BigNumber[];\n  maxValidRange: number;\n  powerBallRange: number;\n};\nexport class Lottery extends ContractWrapper {\n  constructor(\n    abi: any[],\n    address: string,\n    signer: Signer | Provider,\n    private diamondHand: DiamondHand,\n  ) {\n    super(abi, address, signer);\n  }\n\n  async getCurrentLottoInfo() {\n    const [[lotto], [prizes], [maxValidRange], [powerBallRange]] =\n      await this.diamondHand.multicall([\n        {\n          contract: this.contract,\n          method: 'getCurrentLotto',\n        },\n        {\n          contract: this.contract,\n          method: 'getCurrentPrizes',\n        },\n        {\n          contract: this.contract,\n          method: 'maxValidRange_',\n        },\n        {\n          contract: this.contract,\n          method: 'powerBallRange_',\n        },\n      ]);\n\n    if (!lotto) {\n      return {} as LottoInfo;\n    }\n\n    const numberOfTickets = await this.diamondHand.TICKET.getNumberOfTickets(lotto[0]);\n\n    return {\n      info: {\n        lotteryId: lotto[0].toNumber(),\n        lotteryStatus: lotto[1],\n        prizePool: lotto[2],\n        costPerTicket: lotto[3],\n        prizeDistribution: lotto[4].map((t: BigNumber) => t.toNumber()),\n        startingTimestamp: fromUnixTime(lotto[5].toNumber()),\n        closingTimestamp: fromUnixTime(lotto[6].toNumber()),\n        winningNumbers: lotto[7],\n        winners: lotto[8],\n        numberOfTickets,\n      },\n      prizes,\n      maxValidRange,\n      powerBallRange,\n    } as LottoInfo;\n  }\n\n  async getCurrentLotto() {\n    return await this.contract.getCurrentLotto();\n  }\n\n  getBasicLottoInfo(lotteryId: number) {\n    return this.contract.getBasicLottoInfo(BigNumber.from(lotteryId)).then((data: any) => {\n      const prizes = data?.prizeDistribution?.map((prize: BigNumber) =>\n        data?.prizePool?.mul(prize).div(1e6),\n      );\n      return { ...data, prizes };\n    });\n  }\n\n  async getCurrentPrizes() {\n    return await this.contract.getCurrentPrizes();\n  }\n\n  async getCostPerTicket() {\n    return await this.contract.costPerTicket_();\n  }\n\n  async getCurrentTotalPrize() {\n    return await this.contract.getCurrentTotalPrize();\n  }\n\n  async autoStartLotto() {\n    return await this.contract.safeCall.autoStartLotto();\n  }\n\n  async manualStartLotto(startingTime: number, closingTime: number) {\n    return await this.contract.safeCall.manualStartLotto(startingTime, closingTime);\n  }\n\n  async drawWinningNumbers(lotteryId: number) {\n    return await this.contract.safeCall.drawWinningNumbers(lotteryId);\n  }\n\n  async batchBuyLottoTicket(\n    lotteryId: BigNumberish,\n    numberOfTickets: number,\n    chosenNumbersForEachTicket: number[],\n  ) {\n    return await this.contract.safeCall.batchBuyLottoTicket(\n      lotteryId,\n      numberOfTickets,\n      chosenNumbersForEachTicket,\n    );\n  }\n\n  async batchClaimRewards(lotteryId: BigNumber, tokenIds: BigNumber[]) {\n    return await this.contract.safeCall.batchClaimRewards(lotteryId, tokenIds);\n  }\n\n  async maxValidRange() {\n    return await this.contract.maxValidRange_();\n  }\n\n  async powerBallRange() {\n    return await this.contract.powerBallRange_();\n  }\n}\n\nexport type LotteryInfo = {\n  lotteryId: BigNumber;\n  lotteryStatus: number;\n  prizePool: BigNumber;\n  costPerTicket: BigNumber;\n  prizeDistribution: BigNumber[];\n  startingTimestamp: BigNumber;\n  closingTimestamp: BigNumber;\n  winningNumbers: number[];\n  winners: BigNumber[];\n  numberOfTickets?: BigNumber;\n  prizes?: BigNumber[];\n};\n\nexport enum LotteryStatus {\n  NotStarted, // The lottery has not started yet\n  Open, // The lottery is open for ticket purchases\n  Closed, // The lottery is no longer open for ticket purchases\n  Completed, // The numbers drawn\n}\n"]},"metadata":{},"sourceType":"module"}