{"ast":null,"code":"var _jsxFileName = \"/Users/ivopascoal/Desktop/PeepoAvax/src/views/Farms/ButtonStake.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo } from 'react';\nimport { ButtonAction } from 'src/components/ButtonAction';\nimport styled from 'styled-components';\nimport useDiamondHand from 'src/hooks/useDiamondHand';\nimport useHandleTransactionReceipt from 'src/hooks/useHandleTransactionReceipt';\nimport { useConfiguration } from 'src/contexts/ConfigProvider/ConfigProvider';\nimport { useTokenBalance } from 'src/contexts/AccountBalanceProvider/AccountBalanceProvider';\nimport useApprove, { ApprovalState } from 'src/hooks/useApprove';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ButtonStatus;\n\n(function (ButtonStatus) {\n  ButtonStatus[ButtonStatus[\"notConnected\"] = 1] = \"notConnected\";\n  ButtonStatus[ButtonStatus[\"insufficient\"] = 2] = \"insufficient\";\n  ButtonStatus[ButtonStatus[\"requireApproval\"] = 3] = \"requireApproval\";\n  ButtonStatus[ButtonStatus[\"approvalPending\"] = 4] = \"approvalPending\";\n  ButtonStatus[ButtonStatus[\"paused\"] = 15] = \"paused\";\n  ButtonStatus[ButtonStatus[\"ready\"] = 20] = \"ready\";\n  ButtonStatus[ButtonStatus[\"notEnough\"] = 21] = \"notEnough\";\n})(ButtonStatus || (ButtonStatus = {}));\n\nexport const ButtonStake = ({\n  amount,\n  token\n}) => {\n  _s();\n\n  const dh = useDiamondHand();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n  const config = useConfiguration();\n  const balance = useTokenBalance(token);\n  const buyAddress = useMemo(() => {\n    var _config$addresses;\n\n    if (!config) {\n      return;\n    }\n\n    return config === null || config === void 0 ? void 0 : (_config$addresses = config.addresses) === null || _config$addresses === void 0 ? void 0 : _config$addresses.MasterChef;\n  }, [config]);\n  const [approvalTokenState, approveToken] = useApprove(token, buyAddress);\n\n  const stake = async () => {\n    try {\n      var _dh$MASTERCHEF;\n\n      const tx = await handleTransactionReceipt((_dh$MASTERCHEF = dh.MASTERCHEF) === null || _dh$MASTERCHEF === void 0 ? void 0 : _dh$MASTERCHEF.deposit(0, amount), `Stake`);\n\n      if (tx && tx.response) {\n        await tx.response.wait();\n        tx.hideModal();\n      }\n    } catch {//\n    }\n  };\n\n  const status = useMemo(() => {\n    if (approvalTokenState == ApprovalState.PENDING) {\n      return ButtonStatus.approvalPending;\n    }\n\n    if (approvalTokenState !== ApprovalState.APPROVED) {\n      return ButtonStatus.requireApproval;\n    }\n\n    return ButtonStatus.ready;\n  }, [approvalTokenState, balance]);\n  const buttonText = useMemo(() => {\n    switch (status) {\n      case ButtonStatus.approvalPending:\n        return `Approving ${token === null || token === void 0 ? void 0 : token.symbol}...`;\n\n      case ButtonStatus.requireApproval:\n        return 'Approve';\n\n      default:\n        return 'Stake';\n    }\n  }, [status, token]);\n  const onClickBuy = useCallback(async () => {\n    switch (status) {\n      case ButtonStatus.requireApproval:\n        await approveToken();\n        break;\n\n      case ButtonStatus.approvalPending:\n        break;\n\n      case ButtonStatus.ready:\n        stake();\n        break;\n    }\n  }, [status, approveToken, stake]);\n  return /*#__PURE__*/_jsxDEV(StyledButtonAction, {\n    onClick: onClickBuy,\n    children: buttonText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ButtonStake, \"XxpNW5SEvY0LSwqKRKc/9hFRugM=\", false, function () {\n  return [useDiamondHand, useHandleTransactionReceipt, useConfiguration, useTokenBalance, useApprove];\n});\n\n_c = ButtonStake;\nconst StyledButtonAction = styled(ButtonAction)`\n  display: inline-block;\n  width: initial;\n  text-color: #f4b5d2;\n  background-color: #5a8f35;\n  :hover {\n    background-color: #a1118b;\n  }\n`;\n_c2 = StyledButtonAction;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ButtonStake\");\n$RefreshReg$(_c2, \"StyledButtonAction\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/PeepoAvax/src/views/Farms/ButtonStake.tsx"],"names":["React","useCallback","useMemo","ButtonAction","styled","useDiamondHand","useHandleTransactionReceipt","useConfiguration","useTokenBalance","useApprove","ApprovalState","ButtonStatus","ButtonStake","amount","token","dh","handleTransactionReceipt","config","balance","buyAddress","addresses","MasterChef","approvalTokenState","approveToken","stake","tx","MASTERCHEF","deposit","response","wait","hideModal","status","PENDING","approvalPending","APPROVED","requireApproval","ready","buttonText","symbol","onClickBuy","StyledButtonAction"],"mappings":";;;AAAA,OAAOA,KAAP,IAA4BC,WAA5B,EAAoDC,OAApD,QAA6E,OAA7E;AACA,SAASC,YAAT,QAA6B,6BAA7B;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,2BAAP,MAAwC,uCAAxC;AACA,SAASC,gBAAT,QAAiC,4CAAjC;AACA,SAASC,eAAT,QAAgC,4DAAhC;AACA,OAAOC,UAAP,IAAqBC,aAArB,QAA0C,sBAA1C;;IAGKC,Y;;WAAAA,Y;AAAAA,EAAAA,Y,CAAAA,Y;AAAAA,EAAAA,Y,CAAAA,Y;AAAAA,EAAAA,Y,CAAAA,Y;AAAAA,EAAAA,Y,CAAAA,Y;AAAAA,EAAAA,Y,CAAAA,Y;AAAAA,EAAAA,Y,CAAAA,Y;AAAAA,EAAAA,Y,CAAAA,Y;GAAAA,Y,KAAAA,Y;;AAeL,OAAO,MAAMC,WAAsE,GAAG,CAAC;AACrFC,EAAAA,MADqF;AAErFC,EAAAA;AAFqF,CAAD,KAGhF;AAAA;;AACJ,QAAMC,EAAE,GAAGV,cAAc,EAAzB;AACA,QAAMW,wBAAwB,GAAGV,2BAA2B,EAA5D;AACA,QAAMW,MAAM,GAAGV,gBAAgB,EAA/B;AAEA,QAAMW,OAAO,GAAGV,eAAe,CAACM,KAAD,CAA/B;AAEA,QAAMK,UAAU,GAAGjB,OAAO,CAAC,MAAM;AAAA;;AAC/B,QAAI,CAACe,MAAL,EAAa;AACX;AACD;;AACD,WAAOA,MAAP,aAAOA,MAAP,4CAAOA,MAAM,CAAEG,SAAf,sDAAO,kBAAmBC,UAA1B;AACD,GALyB,EAKvB,CAACJ,MAAD,CALuB,CAA1B;AAOA,QAAM,CAACK,kBAAD,EAAqBC,YAArB,IAAqCd,UAAU,CAACK,KAAD,EAAQK,UAAR,CAArD;;AAEA,QAAMK,KAAK,GAAG,YAAY;AACxB,QAAI;AAAA;;AACF,YAAMC,EAAE,GAAG,MAAMT,wBAAwB,mBAACD,EAAE,CAACW,UAAJ,mDAAC,eAAeC,OAAf,CAAuB,CAAvB,EAA0Bd,MAA1B,CAAD,EAAqC,OAArC,CAAzC;;AACA,UAAIY,EAAE,IAAIA,EAAE,CAACG,QAAb,EAAuB;AACrB,cAAMH,EAAE,CAACG,QAAH,CAAYC,IAAZ,EAAN;AACAJ,QAAAA,EAAE,CAACK,SAAH;AACD;AACF,KAND,CAME,MAAM,CACN;AACD;AACF,GAVD;;AAYA,QAAMC,MAAM,GAAG7B,OAAO,CAAC,MAAM;AAC3B,QAAIoB,kBAAkB,IAAIZ,aAAa,CAACsB,OAAxC,EAAiD;AAC/C,aAAOrB,YAAY,CAACsB,eAApB;AACD;;AAED,QAAIX,kBAAkB,KAAKZ,aAAa,CAACwB,QAAzC,EAAmD;AACjD,aAAOvB,YAAY,CAACwB,eAApB;AACD;;AAED,WAAOxB,YAAY,CAACyB,KAApB;AACD,GAVqB,EAUnB,CAACd,kBAAD,EAAqBJ,OAArB,CAVmB,CAAtB;AAYA,QAAMmB,UAAU,GAAGnC,OAAO,CAAC,MAAM;AAC/B,YAAQ6B,MAAR;AACE,WAAKpB,YAAY,CAACsB,eAAlB;AACE,eAAQ,aAAYnB,KAAb,aAAaA,KAAb,uBAAaA,KAAK,CAAEwB,MAAO,KAAlC;;AAEF,WAAK3B,YAAY,CAACwB,eAAlB;AACE,eAAO,SAAP;;AACF;AACE,eAAO,OAAP;AAPJ;AASD,GAVyB,EAUvB,CAACJ,MAAD,EAASjB,KAAT,CAVuB,CAA1B;AAYA,QAAMyB,UAAU,GAAGtC,WAAW,CAAC,YAAY;AACzC,YAAQ8B,MAAR;AACE,WAAKpB,YAAY,CAACwB,eAAlB;AACE,cAAMZ,YAAY,EAAlB;AACA;;AACF,WAAKZ,YAAY,CAACsB,eAAlB;AACE;;AACF,WAAKtB,YAAY,CAACyB,KAAlB;AACEZ,QAAAA,KAAK;AACL;AARJ;AAUD,GAX6B,EAW3B,CAACO,MAAD,EAASR,YAAT,EAAuBC,KAAvB,CAX2B,CAA9B;AAaA,sBAAO,QAAC,kBAAD;AAAoB,IAAA,OAAO,EAAEe,UAA7B;AAAA,cAA0CF;AAA1C;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CArEM;;GAAMzB,W;UAIAP,c,EACsBC,2B,EAClBC,gB,EAECC,e,EAS2BC,U;;;KAjBhCG,W;AAuEb,MAAM4B,kBAAkB,GAAGpC,MAAM,CAACD,YAAD,CAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;MAAMqC,kB","sourcesContent":["import React, { forwardRef, useCallback, useEffect, useMemo, useState } from 'react';\nimport { ButtonAction } from 'src/components/ButtonAction';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport styled from 'styled-components';\nimport useDiamondHand from 'src/hooks/useDiamondHand';\nimport useHandleTransactionReceipt from 'src/hooks/useHandleTransactionReceipt';\nimport { useConfiguration } from 'src/contexts/ConfigProvider/ConfigProvider';\nimport { useTokenBalance } from 'src/contexts/AccountBalanceProvider/AccountBalanceProvider';\nimport useApprove, { ApprovalState } from 'src/hooks/useApprove';\nimport ERC20 from 'src/diamondhand/ERC20';\n\nenum ButtonStatus {\n  notConnected = 1,\n  insufficient = 2,\n  requireApproval = 3,\n  approvalPending = 4,\n  paused = 15,\n  ready = 20,\n  notEnough = 21,\n}\n\ninterface ButtonStakeProps {\n  amount?: BigNumber;\n  token?: ERC20;\n}\n\nexport const ButtonStake: React.ForwardRefRenderFunction<unknown, ButtonStakeProps> = ({\n  amount,\n  token,\n}) => {\n  const dh = useDiamondHand();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n  const config = useConfiguration();\n\n  const balance = useTokenBalance(token);\n\n  const buyAddress = useMemo(() => {\n    if (!config) {\n      return;\n    }\n    return config?.addresses?.MasterChef;\n  }, [config]);\n\n  const [approvalTokenState, approveToken] = useApprove(token, buyAddress);\n\n  const stake = async () => {\n    try {\n      const tx = await handleTransactionReceipt(dh.MASTERCHEF?.deposit(0, amount), `Stake`);\n      if (tx && tx.response) {\n        await tx.response.wait();\n        tx.hideModal();\n      }\n    } catch {\n      //\n    }\n  };\n\n  const status = useMemo(() => {\n    if (approvalTokenState == ApprovalState.PENDING) {\n      return ButtonStatus.approvalPending;\n    }\n\n    if (approvalTokenState !== ApprovalState.APPROVED) {\n      return ButtonStatus.requireApproval;\n    }\n\n    return ButtonStatus.ready;\n  }, [approvalTokenState, balance]);\n\n  const buttonText = useMemo(() => {\n    switch (status) {\n      case ButtonStatus.approvalPending:\n        return `Approving ${token?.symbol}...`;\n\n      case ButtonStatus.requireApproval:\n        return 'Approve';\n      default:\n        return 'Stake';\n    }\n  }, [status, token]);\n\n  const onClickBuy = useCallback(async () => {\n    switch (status) {\n      case ButtonStatus.requireApproval:\n        await approveToken();\n        break;\n      case ButtonStatus.approvalPending:\n        break;\n      case ButtonStatus.ready:\n        stake();\n        break;\n    }\n  }, [status, approveToken, stake]);\n\n  return <StyledButtonAction onClick={onClickBuy}>{buttonText}</StyledButtonAction>;\n};\n\nconst StyledButtonAction = styled(ButtonAction)`\n  display: inline-block;\n  width: initial;\n  text-color: #f4b5d2;\n  background-color: #5a8f35;\n  :hover {\n    background-color: #a1118b;\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}