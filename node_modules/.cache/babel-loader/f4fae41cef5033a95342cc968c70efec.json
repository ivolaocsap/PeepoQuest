{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Web3 = require(\"web3\");\n\nconst types_1 = require(\"../../../types\");\n\nconst AddressMap = require(\"./addressMap.json\");\n\nconst ItemDB = require(\"./ethercraft.json\");\n\nconst Images = require(\"./images.json\");\n\nItemDB.map(x => {\n  x.address = x.address.toLowerCase();\n  const addr = AddressMap[x.address];\n\n  if (addr) {\n    x.address = addr;\n  }\n});\n\nconst dataOf = asset => ItemDB.filter(x => x.address.toLowerCase() === asset.toLowerCase())[0];\n\nconst nameOf = asset => dataOf(asset).strings[0].name;\n\nconst indexOf = asset => ItemDB.map((v, i) => i).filter(i => ItemDB[i].address.toLowerCase() === asset.toLowerCase())[0];\n\nconst imageOf = asset => {\n  const index = indexOf(asset);\n  return Images[index];\n};\n\nconst descriptionOf = asset => {\n  const data = dataOf(asset);\n  return data.strings[0].description;\n};\n\nconst unit = '1000000000000000000'; // 10e18\n\nconst kinds = ItemDB.map(x => x.strings[0].name);\n\nconst addressByKind = name => ItemDB.filter(x => x.strings[0].name === name)[0].address;\n\nexports.EthercraftSchema = {\n  version: 1,\n  deploymentBlock: 0,\n  name: 'Ethercraft',\n  description: 'A decentralized RPG running on the Ethereum blockchain.',\n  thumbnail: 'https://cdn.discordapp.com/icons/400700363402903552/4f9c2076b2b8a9c0b8a57ce3ecdc57fe.png',\n  website: 'https://ethercraft.io',\n  fields: [{\n    name: 'Kind',\n    type: 'enum',\n    values: kinds,\n    description: 'Kind of item.'\n  }],\n  assetFromFields: fields => addressByKind(fields.Kind),\n  assetToFields: asset => ({\n    Kind: nameOf(asset)\n  }),\n  allAssets: () => ItemDB.map(x => x.address),\n  formatter: asset => __awaiter(this, void 0, void 0, function* () {\n    return {\n      thumbnail: imageOf(asset),\n      title: 'Ethercraft - ' + nameOf(asset),\n      description: descriptionOf(asset),\n      url: 'https://ethercraft.io/#/shop/' + indexOf(asset),\n      properties: []\n    };\n  }),\n  functions: {\n    transfer: asset => ({\n      type: Web3.AbiType.Function,\n      name: 'transfer',\n      payable: false,\n      constant: false,\n      stateMutability: types_1.StateMutability.Nonpayable,\n      target: asset,\n      inputs: [{\n        kind: types_1.FunctionInputKind.Replaceable,\n        name: 'to',\n        type: 'address'\n      }, {\n        kind: types_1.FunctionInputKind.Asset,\n        name: 'tokens',\n        type: 'uint256',\n        value: unit\n      }],\n      outputs: []\n    }),\n    countOf: asset => ({\n      type: Web3.AbiType.Function,\n      name: 'balanceOf',\n      payable: false,\n      constant: true,\n      stateMutability: types_1.StateMutability.View,\n      target: asset,\n      inputs: [{\n        kind: types_1.FunctionInputKind.Owner,\n        name: 'tokenOwner',\n        type: 'address'\n      }],\n      outputs: [{\n        kind: types_1.FunctionOutputKind.Count,\n        name: 'balance',\n        type: 'uint'\n      }],\n      assetFromOutputs: outputs => outputs.balance\n    }),\n    assetsOfOwnerByIndex: []\n  },\n  events: {\n    transfer: []\n  },\n  hash: a => a\n};","map":{"version":3,"sources":["../../../../src/schemas/main/Ethercraft/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAOA,MAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEC,MAAc,CAAC,GAAf,CAAoB,CAAD,IAAW;AAC7B,EAAA,CAAC,CAAC,OAAF,GAAY,CAAC,CAAC,OAAF,CAAU,WAAV,EAAZ;AACA,QAAM,IAAI,GAAI,UAAkB,CAAC,CAAC,CAAC,OAAH,CAAhC;;AACA,MAAI,IAAJ,EAAU;AACR,IAAA,CAAC,CAAC,OAAF,GAAY,IAAZ;AACD;AACF,CANA;;AAUD,MAAM,MAAM,GAAI,KAAD,IAA4B,MAAc,CAAC,MAAf,CAAuB,CAAD,IAAY,CAAC,CAAC,OAAF,CAAU,WAAV,OAA4B,KAAK,CAAC,WAAN,EAA9D,EAAmF,CAAnF,CAA3C;;AAEA,MAAM,MAAM,GAAI,KAAD,IAA2B,MAAM,CAAC,KAAD,CAAN,CAAc,OAAd,CAAsB,CAAtB,EAAyB,IAAnE;;AAEA,MAAM,OAAO,GAAI,KAAD,IAA4B,MAAc,CAAC,GAAf,CAAmB,CAAC,CAAD,EAAS,CAAT,KAAoB,CAAvC,EAA0C,MAA1C,CAAkD,CAAD,IAAa,MAAc,CAAC,CAAD,CAAd,CAAkB,OAAlB,CAA0B,WAA1B,OAA4C,KAAK,CAAC,WAAN,EAA1G,EAA+H,CAA/H,CAA5C;;AAEA,MAAM,OAAO,GAAI,KAAD,IAA0B;AACxC,QAAM,KAAK,GAAG,OAAO,CAAC,KAAD,CAArB;AACA,SAAQ,MAAc,CAAC,KAAD,CAAtB;AACD,CAHD;;AAKA,MAAM,aAAa,GAAI,KAAD,IAA0B;AAC9C,QAAM,IAAI,GAAG,MAAM,CAAC,KAAD,CAAnB;AACA,SAAO,IAAI,CAAC,OAAL,CAAa,CAAb,EAAgB,WAAvB;AACD,CAHD;;AAKA,MAAM,IAAI,GAAG,qBAAb,C,CAAoC;;AAEpC,MAAM,KAAK,GAAI,MAAc,CAAC,GAAf,CAAoB,CAAD,IAAY,CAAC,CAAC,OAAF,CAAU,CAAV,EAAa,IAA5C,CAAf;;AAEA,MAAM,aAAa,GAAI,IAAD,IAAmB,MAAc,CAAC,MAAf,CAAuB,CAAD,IAAY,CAAC,CAAC,OAAF,CAAU,CAAV,EAAa,IAAb,KAAsB,IAAxD,EAA8D,CAA9D,EAAiE,OAA1G;;AAEa,OAAA,CAAA,gBAAA,GAA2C;AACtD,EAAA,OAAO,EAAE,CAD6C;AAEtD,EAAA,eAAe,EAAE,CAFqC;AAGtD,EAAA,IAAI,EAAE,YAHgD;AAItD,EAAA,WAAW,EAAE,yDAJyC;AAKtD,EAAA,SAAS,EAAE,0FAL2C;AAMtD,EAAA,OAAO,EAAE,uBAN6C;AAOtD,EAAA,MAAM,EAAE,CACN;AAAC,IAAA,IAAI,EAAE,MAAP;AAAe,IAAA,IAAI,EAAE,MAArB;AAA6B,IAAA,MAAM,EAAE,KAArC;AAA4C,IAAA,WAAW,EAAE;AAAzD,GADM,CAP8C;AAUtD,EAAA,eAAe,EAAG,MAAD,IAAiB,aAAa,CAAC,MAAM,CAAC,IAAR,CAVO;AAWtD,EAAA,aAAa,EAAE,KAAK,KAAK;AAAC,IAAA,IAAI,EAAE,MAAM,CAAC,KAAD;AAAb,GAAL,CAXkC;AAYtD,EAAA,SAAS,EAAE,MAAO,MAAc,CAAC,GAAf,CAAoB,CAAD,IAAY,CAAC,CAAC,OAAjC,CAZoC;AAatD,EAAA,SAAS,EACD,KAAN,IAAc,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACZ,WAAO;AACL,MAAA,SAAS,EAAE,OAAO,CAAC,KAAD,CADb;AAEL,MAAA,KAAK,EAAE,kBAAkB,MAAM,CAAC,KAAD,CAF1B;AAGL,MAAA,WAAW,EAAE,aAAa,CAAC,KAAD,CAHrB;AAIL,MAAA,GAAG,EAAE,kCAAkC,OAAO,CAAC,KAAD,CAJzC;AAKL,MAAA,UAAU,EAAE;AALP,KAAP;AAOD,GARa,CAdsC;AAuBtD,EAAA,SAAS,EAAE;AACT,IAAA,QAAQ,EAAE,KAAK,KAAK;AAClB,MAAA,IAAI,EAAE,IAAI,CAAC,OAAL,CAAa,QADD;AAElB,MAAA,IAAI,EAAE,UAFY;AAGlB,MAAA,OAAO,EAAE,KAHS;AAIlB,MAAA,QAAQ,EAAE,KAJQ;AAKlB,MAAA,eAAe,EAAE,OAAA,CAAA,eAAA,CAAgB,UALf;AAMlB,MAAA,MAAM,EAAE,KANU;AAOlB,MAAA,MAAM,EAAE,CACN;AAAC,QAAA,IAAI,EAAE,OAAA,CAAA,iBAAA,CAAkB,WAAzB;AAAsC,QAAA,IAAI,EAAE,IAA5C;AAAkD,QAAA,IAAI,EAAE;AAAxD,OADM,EAEN;AAAC,QAAA,IAAI,EAAE,OAAA,CAAA,iBAAA,CAAkB,KAAzB;AAAgC,QAAA,IAAI,EAAE,QAAtC;AAAgD,QAAA,IAAI,EAAE,SAAtD;AAAiE,QAAA,KAAK,EAAE;AAAxE,OAFM,CAPU;AAWlB,MAAA,OAAO,EAAE;AAXS,KAAL,CADN;AAcT,IAAA,OAAO,EAAE,KAAK,KAAK;AACjB,MAAA,IAAI,EAAE,IAAI,CAAC,OAAL,CAAa,QADF;AAEjB,MAAA,IAAI,EAAE,WAFW;AAGjB,MAAA,OAAO,EAAE,KAHQ;AAIjB,MAAA,QAAQ,EAAE,IAJO;AAKjB,MAAA,eAAe,EAAE,OAAA,CAAA,eAAA,CAAgB,IALhB;AAMjB,MAAA,MAAM,EAAE,KANS;AAOjB,MAAA,MAAM,EAAE,CACN;AAAC,QAAA,IAAI,EAAE,OAAA,CAAA,iBAAA,CAAkB,KAAzB;AAAgC,QAAA,IAAI,EAAE,YAAtC;AAAoD,QAAA,IAAI,EAAE;AAA1D,OADM,CAPS;AAUjB,MAAA,OAAO,EAAE,CACP;AAAC,QAAA,IAAI,EAAE,OAAA,CAAA,kBAAA,CAAmB,KAA1B;AAAiC,QAAA,IAAI,EAAE,SAAvC;AAAkD,QAAA,IAAI,EAAE;AAAxD,OADO,CAVQ;AAajB,MAAA,gBAAgB,EAAG,OAAD,IAAkB,OAAO,CAAC;AAb3B,KAAL,CAdL;AA6BT,IAAA,oBAAoB,EAAE;AA7Bb,GAvB2C;AAsDtD,EAAA,MAAM,EAAE;AACN,IAAA,QAAQ,EAAE;AADJ,GAtD8C;AAyDtD,EAAA,IAAI,EAAE,CAAC,IAAI;AAzD2C,CAA3C","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Web3 = require(\"web3\");\nconst types_1 = require(\"../../../types\");\nconst AddressMap = require(\"./addressMap.json\");\nconst ItemDB = require(\"./ethercraft.json\");\nconst Images = require(\"./images.json\");\nItemDB.map((x) => {\n    x.address = x.address.toLowerCase();\n    const addr = AddressMap[x.address];\n    if (addr) {\n        x.address = addr;\n    }\n});\nconst dataOf = (asset) => ItemDB.filter((x) => x.address.toLowerCase() === asset.toLowerCase())[0];\nconst nameOf = (asset) => dataOf(asset).strings[0].name;\nconst indexOf = (asset) => ItemDB.map((v, i) => i).filter((i) => ItemDB[i].address.toLowerCase() === asset.toLowerCase())[0];\nconst imageOf = (asset) => {\n    const index = indexOf(asset);\n    return Images[index];\n};\nconst descriptionOf = (asset) => {\n    const data = dataOf(asset);\n    return data.strings[0].description;\n};\nconst unit = '1000000000000000000'; // 10e18\nconst kinds = ItemDB.map((x) => x.strings[0].name);\nconst addressByKind = (name) => ItemDB.filter((x) => x.strings[0].name === name)[0].address;\nexports.EthercraftSchema = {\n    version: 1,\n    deploymentBlock: 0,\n    name: 'Ethercraft',\n    description: 'A decentralized RPG running on the Ethereum blockchain.',\n    thumbnail: 'https://cdn.discordapp.com/icons/400700363402903552/4f9c2076b2b8a9c0b8a57ce3ecdc57fe.png',\n    website: 'https://ethercraft.io',\n    fields: [\n        { name: 'Kind', type: 'enum', values: kinds, description: 'Kind of item.' },\n    ],\n    assetFromFields: (fields) => addressByKind(fields.Kind),\n    assetToFields: asset => ({ Kind: nameOf(asset) }),\n    allAssets: () => ItemDB.map((x) => x.address),\n    formatter: (asset) => __awaiter(this, void 0, void 0, function* () {\n        return {\n            thumbnail: imageOf(asset),\n            title: 'Ethercraft - ' + nameOf(asset),\n            description: descriptionOf(asset),\n            url: 'https://ethercraft.io/#/shop/' + indexOf(asset),\n            properties: [],\n        };\n    }),\n    functions: {\n        transfer: asset => ({\n            type: Web3.AbiType.Function,\n            name: 'transfer',\n            payable: false,\n            constant: false,\n            stateMutability: types_1.StateMutability.Nonpayable,\n            target: asset,\n            inputs: [\n                { kind: types_1.FunctionInputKind.Replaceable, name: 'to', type: 'address' },\n                { kind: types_1.FunctionInputKind.Asset, name: 'tokens', type: 'uint256', value: unit },\n            ],\n            outputs: [],\n        }),\n        countOf: asset => ({\n            type: Web3.AbiType.Function,\n            name: 'balanceOf',\n            payable: false,\n            constant: true,\n            stateMutability: types_1.StateMutability.View,\n            target: asset,\n            inputs: [\n                { kind: types_1.FunctionInputKind.Owner, name: 'tokenOwner', type: 'address' },\n            ],\n            outputs: [\n                { kind: types_1.FunctionOutputKind.Count, name: 'balance', type: 'uint' },\n            ],\n            assetFromOutputs: (outputs) => outputs.balance,\n        }),\n        assetsOfOwnerByIndex: [],\n    },\n    events: {\n        transfer: [],\n    },\n    hash: a => a,\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}