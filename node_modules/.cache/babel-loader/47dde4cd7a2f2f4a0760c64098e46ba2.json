{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport useDiamondHand from './useDiamondHand';\nimport { useConfiguration } from 'src/contexts/ConfigProvider/ConfigProvider';\n\nclass NFT {\n  constructor(event) {\n    this.asset_events = void 0;\n    this.asset_events = event;\n  }\n\n}\n\nfunction formatMetadata(nft) {\n  return {\n    asset_events: nft.asset_events\n  };\n}\n\nconst useNftMetadata = () => {\n  _s();\n\n  const dh = useDiamondHand();\n  const {\n    account\n  } = useWeb3React();\n  const config = useConfiguration();\n  const nftaddress = config.addresses.WhiteListedNFT;\n  useEffect(() => {\n    let mounted = true;\n\n    if (!account) {\n      return;\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [account]);\n  return fetch(`https://api.opensea.io/api/v1/events/?account_address=${account}&asset_contract_address=${nftaddress}&format=json`).then(res => res.json()).then(res => res.asset_events);\n};\n\n_s(useNftMetadata, \"2F+3ppAheQjVSxMz/pwr4RtD++Y=\", false, function () {\n  return [useDiamondHand, useWeb3React, useConfiguration];\n});\n\nexport default useNftMetadata;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/PhysicalNFTs/src/hooks/useNftMetadata.ts"],"names":["useEffect","useWeb3React","useDiamondHand","useConfiguration","NFT","constructor","event","asset_events","formatMetadata","nft","useNftMetadata","dh","account","config","nftaddress","addresses","WhiteListedNFT","mounted","fetch","then","res","json"],"mappings":";;AAAA,SAASA,SAAT,QAAoC,OAApC;AAEA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,gBAAT,QAAiC,4CAAjC;;AAIA,MAAMC,GAAN,CAAU;AAGRC,EAAAA,WAAW,CAACC,KAAD,EAAgB;AAAA,SAF3BC,YAE2B;AACzB,SAAKA,YAAL,GAAoBD,KAApB;AACD;;AALO;;AAOV,SAASE,cAAT,CAAwBC,GAAxB,EAAuC;AACrC,SAAO;AAAEF,IAAAA,YAAY,EAAEE,GAAG,CAACF;AAApB,GAAP;AACD;;AAED,MAAMG,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAMC,EAAE,GAAGT,cAAc,EAAzB;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAcX,YAAY,EAAhC;AACA,QAAMY,MAAM,GAAGV,gBAAgB,EAA/B;AACA,QAAMW,UAAU,GAAGD,MAAM,CAACE,SAAP,CAAiBC,cAApC;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,OAAO,GAAG,IAAd;;AACA,QAAI,CAACL,OAAL,EAAc;AACZ;AACD;;AAED,WAAO,MAAM;AACXK,MAAAA,OAAO,GAAG,KAAV;AACD,KAFD;AAGD,GATQ,EASN,CAACL,OAAD,CATM,CAAT;AAWA,SAAOM,KAAK,CACT,yDAAwDN,OAAQ,2BAA0BE,UAAW,cAD5F,CAAL,CAGJK,IAHI,CAGEC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAHV,EAIJF,IAJI,CAIEC,GAAD,IAASA,GAAG,CAACb,YAJd,CAAP;AAKD,CArBD;;GAAMG,c;UACOR,c,EACSD,Y,EACLE,gB;;;AAoBjB,eAAeO,cAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { useWeb3React } from '@web3-react/core';\nimport useDiamondHand from './useDiamondHand';\nimport { useConfiguration } from 'src/contexts/ConfigProvider/ConfigProvider';\n\nimport { Address } from 'cluster';\n\nclass NFT {\n  asset_events: string;\n\n  constructor(event: string) {\n    this.asset_events = event;\n  }\n}\nfunction formatMetadata(nft: any): NFT {\n  return { asset_events: nft.asset_events };\n}\n\nconst useNftMetadata = () => {\n  const dh = useDiamondHand();\n  const { account } = useWeb3React();\n  const config = useConfiguration();\n  const nftaddress = config.addresses.WhiteListedNFT;\n  useEffect(() => {\n    let mounted = true;\n    if (!account) {\n      return;\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [account]);\n\n  return fetch(\n    `https://api.opensea.io/api/v1/events/?account_address=${account}&asset_contract_address=${nftaddress}&format=json`,\n  )\n    .then((res) => res.json())\n    .then((res) => res.asset_events);\n};\n\nexport default useNftMetadata;\n"]},"metadata":{},"sourceType":"module"}