{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file formatters.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @author Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n'use strict';\n\nvar utils = require('../utils/utils');\n\nvar config = require('../utils/config');\n\nvar Iban = require('./iban');\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber}\n * @returns {BigNumber} object\n */\n\n\nvar outputBigNumberFormatter = function (number) {\n  return utils.toBigNumber(number);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n  return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n  if (blockNumber === undefined) {\n    return config.defaultBlock;\n  }\n\n  return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n  if (blockNumber === undefined) {\n    return undefined;\n  } else if (isPredefinedBlockNumber(blockNumber)) {\n    return blockNumber;\n  }\n\n  return utils.toHex(blockNumber);\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\n\n\nvar inputCallFormatter = function (options) {\n  options.from = options.from || config.defaultAccount;\n\n  if (options.from) {\n    options.from = inputAddressFormatter(options.from);\n  }\n\n  if (options.to) {\n    // it might be contract creation\n    options.to = inputAddressFormatter(options.to);\n  }\n\n  ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n    return options[key] !== undefined;\n  }).forEach(function (key) {\n    options[key] = utils.fromDecimal(options[key]);\n  });\n  return options;\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} transaction options\n * @returns object\n*/\n\n\nvar inputTransactionFormatter = function (options) {\n  options.from = options.from || config.defaultAccount;\n  options.from = inputAddressFormatter(options.from);\n\n  if (options.to) {\n    // it might be contract creation\n    options.to = inputAddressFormatter(options.to);\n  }\n\n  ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n    return options[key] !== undefined;\n  }).forEach(function (key) {\n    options[key] = utils.fromDecimal(options[key]);\n  });\n  return options;\n};\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\n\n\nvar outputTransactionFormatter = function (tx) {\n  if (tx.blockNumber !== null) tx.blockNumber = utils.toDecimal(tx.blockNumber);\n  if (tx.transactionIndex !== null) tx.transactionIndex = utils.toDecimal(tx.transactionIndex);\n  tx.nonce = utils.toDecimal(tx.nonce);\n  tx.gas = utils.toDecimal(tx.gas);\n  tx.gasPrice = utils.toBigNumber(tx.gasPrice);\n  tx.value = utils.toBigNumber(tx.value);\n  return tx;\n};\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\n\n\nvar outputTransactionReceiptFormatter = function (receipt) {\n  if (receipt.blockNumber !== null) receipt.blockNumber = utils.toDecimal(receipt.blockNumber);\n  if (receipt.transactionIndex !== null) receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);\n  receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);\n  receipt.gasUsed = utils.toDecimal(receipt.gasUsed);\n\n  if (utils.isArray(receipt.logs)) {\n    receipt.logs = receipt.logs.map(function (log) {\n      return outputLogFormatter(log);\n    });\n  }\n\n  return receipt;\n};\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\n\n\nvar outputBlockFormatter = function (block) {\n  // transform to number\n  block.gasLimit = utils.toDecimal(block.gasLimit);\n  block.gasUsed = utils.toDecimal(block.gasUsed);\n  block.size = utils.toDecimal(block.size);\n  block.timestamp = utils.toDecimal(block.timestamp);\n  if (block.number !== null) block.number = utils.toDecimal(block.number);\n  block.difficulty = utils.toBigNumber(block.difficulty);\n  block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);\n\n  if (utils.isArray(block.transactions)) {\n    block.transactions.forEach(function (item) {\n      if (!utils.isString(item)) return outputTransactionFormatter(item);\n    });\n  }\n\n  return block;\n};\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\n\n\nvar outputLogFormatter = function (log) {\n  if (log.blockNumber) log.blockNumber = utils.toDecimal(log.blockNumber);\n  if (log.transactionIndex) log.transactionIndex = utils.toDecimal(log.transactionIndex);\n  if (log.logIndex) log.logIndex = utils.toDecimal(log.logIndex);\n  return log;\n};\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\n\n\nvar inputPostFormatter = function (post) {\n  // post.payload = utils.toHex(post.payload);\n  post.ttl = utils.fromDecimal(post.ttl);\n  post.workToProve = utils.fromDecimal(post.workToProve);\n  post.priority = utils.fromDecimal(post.priority); // fallback\n\n  if (!utils.isArray(post.topics)) {\n    post.topics = post.topics ? [post.topics] : [];\n  } // format the following options\n\n\n  post.topics = post.topics.map(function (topic) {\n    // convert only if not hex\n    return topic.indexOf('0x') === 0 ? topic : utils.fromUtf8(topic);\n  });\n  return post;\n};\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\n\n\nvar outputPostFormatter = function (post) {\n  post.expiry = utils.toDecimal(post.expiry);\n  post.sent = utils.toDecimal(post.sent);\n  post.ttl = utils.toDecimal(post.ttl);\n  post.workProved = utils.toDecimal(post.workProved); // post.payloadRaw = post.payload;\n  // post.payload = utils.toAscii(post.payload);\n  // if (utils.isJson(post.payload)) {\n  //     post.payload = JSON.parse(post.payload);\n  // }\n  // format the following options\n\n  if (!post.topics) {\n    post.topics = [];\n  }\n\n  post.topics = post.topics.map(function (topic) {\n    return utils.toAscii(topic);\n  });\n  return post;\n};\n\nvar inputAddressFormatter = function (address) {\n  var iban = new Iban(address);\n\n  if (iban.isValid() && iban.isDirect()) {\n    return '0x' + iban.address();\n  } else if (utils.isStrictAddress(address)) {\n    return address;\n  } else if (utils.isAddress(address)) {\n    return '0x' + address;\n  }\n\n  throw new Error('invalid address');\n};\n\nvar outputSyncingFormatter = function (result) {\n  if (!result) {\n    return result;\n  }\n\n  result.startingBlock = utils.toDecimal(result.startingBlock);\n  result.currentBlock = utils.toDecimal(result.currentBlock);\n  result.highestBlock = utils.toDecimal(result.highestBlock);\n\n  if (result.knownStates) {\n    result.knownStates = utils.toDecimal(result.knownStates);\n    result.pulledStates = utils.toDecimal(result.pulledStates);\n  }\n\n  return result;\n};\n\nmodule.exports = {\n  inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n  inputBlockNumberFormatter: inputBlockNumberFormatter,\n  inputCallFormatter: inputCallFormatter,\n  inputTransactionFormatter: inputTransactionFormatter,\n  inputAddressFormatter: inputAddressFormatter,\n  inputPostFormatter: inputPostFormatter,\n  outputBigNumberFormatter: outputBigNumberFormatter,\n  outputTransactionFormatter: outputTransactionFormatter,\n  outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n  outputBlockFormatter: outputBlockFormatter,\n  outputLogFormatter: outputLogFormatter,\n  outputPostFormatter: outputPostFormatter,\n  outputSyncingFormatter: outputSyncingFormatter\n};","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/PhysicalNFTs/node_modules/@0xproject/web3-wrapper/node_modules/web3/lib/web3/formatters.js"],"names":["utils","require","config","Iban","outputBigNumberFormatter","number","toBigNumber","isPredefinedBlockNumber","blockNumber","inputDefaultBlockNumberFormatter","undefined","defaultBlock","inputBlockNumberFormatter","toHex","inputCallFormatter","options","from","defaultAccount","inputAddressFormatter","to","filter","key","forEach","fromDecimal","inputTransactionFormatter","outputTransactionFormatter","tx","toDecimal","transactionIndex","nonce","gas","gasPrice","value","outputTransactionReceiptFormatter","receipt","cumulativeGasUsed","gasUsed","isArray","logs","map","log","outputLogFormatter","outputBlockFormatter","block","gasLimit","size","timestamp","difficulty","totalDifficulty","transactions","item","isString","logIndex","inputPostFormatter","post","ttl","workToProve","priority","topics","topic","indexOf","fromUtf8","outputPostFormatter","expiry","sent","workProved","toAscii","address","iban","isValid","isDirect","isStrictAddress","isAddress","Error","outputSyncingFormatter","result","startingBlock","currentBlock","highestBlock","knownStates","pulledStates","module","exports"],"mappings":"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","sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @author Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\n'use strict';\n\n\nvar utils = require('../utils/utils');\nvar config = require('../utils/config');\nvar Iban = require('./iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber}\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBigNumber(number);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return config.defaultBlock;\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return utils.toHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options.from = options.from || config.defaultAccount;\n\n    if (options.from) {\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.fromDecimal(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options){\n\n    options.from = options.from || config.defaultAccount;\n    options.from = inputAddressFormatter(options.from);\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.fromDecimal(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.toDecimal(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.toDecimal(tx.transactionIndex);\n    tx.nonce = utils.toDecimal(tx.nonce);\n    tx.gas = utils.toDecimal(tx.gas);\n    tx.gasPrice = utils.toBigNumber(tx.gasPrice);\n    tx.value = utils.toBigNumber(tx.value);\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.toDecimal(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.toDecimal(receipt.gasUsed);\n\n    if(utils.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(function(log){\n            return outputLogFormatter(log);\n        });\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.toDecimal(block.gasLimit);\n    block.gasUsed = utils.toDecimal(block.gasUsed);\n    block.size = utils.toDecimal(block.size);\n    block.timestamp = utils.toDecimal(block.timestamp);\n    if(block.number !== null)\n        block.number = utils.toDecimal(block.number);\n\n    block.difficulty = utils.toBigNumber(block.difficulty);\n    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);\n\n    if (utils.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!utils.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    return block;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n    if(log.blockNumber)\n        log.blockNumber = utils.toDecimal(log.blockNumber);\n    if(log.transactionIndex)\n        log.transactionIndex = utils.toDecimal(log.transactionIndex);\n    if(log.logIndex)\n        log.logIndex = utils.toDecimal(log.logIndex);\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n    post.ttl = utils.fromDecimal(post.ttl);\n    post.workToProve = utils.fromDecimal(post.workToProve);\n    post.priority = utils.fromDecimal(post.priority);\n\n    // fallback\n    if (!utils.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.toDecimal(post.expiry);\n    post.sent = utils.toDecimal(post.sent);\n    post.ttl = utils.toDecimal(post.ttl);\n    post.workProved = utils.toDecimal(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.toAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toAscii(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return '0x' + iban.address();\n    } else if (utils.isStrictAddress(address)) {\n        return address;\n    } else if (utils.isAddress(address)) {\n        return '0x' + address;\n    }\n    throw new Error('invalid address');\n};\n\n\nvar outputSyncingFormatter = function(result) {\n    if (!result) {\n        return result;\n    }\n\n    result.startingBlock = utils.toDecimal(result.startingBlock);\n    result.currentBlock = utils.toDecimal(result.currentBlock);\n    result.highestBlock = utils.toDecimal(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.toDecimal(result.knownStates);\n        result.pulledStates = utils.toDecimal(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n"]},"metadata":{},"sourceType":"script"}