{"ast":null,"code":"var _jsxFileName = \"/Users/ivopascoal/Desktop/cuffies/src/contexts/CurrentLotteryProvider/CurrentLotteryProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useRef, useState } from 'react';\nimport useDiamondHand from 'src/hooks/useDiamondHand';\nimport { useBlockNumber } from 'src/state/application/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/createContext(null);\nexport const CurrentLotteryInfoProvider = ({\n  children\n}) => {\n  _s();\n\n  const [data, setData] = useState({});\n  const diamondHand = useDiamondHand();\n  const blockNumber = useBlockNumber();\n  const lastCheckedBlockNumber = useRef();\n  useEffect(() => {\n    let mounted = true;\n\n    if (!diamondHand) {\n      return;\n    }\n\n    if (lastCheckedBlockNumber.current > blockNumber - 5) {\n      return;\n    }\n\n    lastCheckedBlockNumber.current = blockNumber;\n    diamondHand === null || diamondHand === void 0 ? void 0 : diamondHand.LOTTERY.getCurrentLottoInfo().then(res => {\n      if (mounted) {\n        setData(res);\n      }\n    });\n    return () => {\n      mounted = false;\n    };\n  }, [blockNumber, diamondHand]);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: data,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CurrentLotteryInfoProvider, \"P3ei/05r71kXTXZ4TWJ54zKdgZo=\", false, function () {\n  return [useDiamondHand, useBlockNumber];\n});\n\n_c = CurrentLotteryInfoProvider;\nexport const useCurrentLotto = () => {\n  _s2();\n\n  return useContext(Context);\n};\n\n_s2(useCurrentLotto, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentLotteryInfoProvider\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/cuffies/src/contexts/CurrentLotteryProvider/CurrentLotteryProvider.tsx"],"names":["createContext","useContext","useEffect","useRef","useState","useDiamondHand","useBlockNumber","Context","CurrentLotteryInfoProvider","children","data","setData","diamondHand","blockNumber","lastCheckedBlockNumber","mounted","current","LOTTERY","getCurrentLottoInfo","then","res","useCurrentLotto"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,MAA1D,EAAkEC,QAAlE,QAAkF,OAAlF;AAEA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,SAASC,cAAT,QAA+B,6BAA/B;;AAEA,MAAMC,OAAO,gBAAGP,aAAa,CAAY,IAAZ,CAA7B;AAEA,OAAO,MAAMQ,0BAA6D,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC7F,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAY,EAAZ,CAAhC;AACA,QAAMQ,WAAW,GAAGP,cAAc,EAAlC;AACA,QAAMQ,WAAW,GAAGP,cAAc,EAAlC;AACA,QAAMQ,sBAAsB,GAAGX,MAAM,EAArC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,OAAO,GAAG,IAAd;;AACA,QAAI,CAACH,WAAL,EAAkB;AAChB;AACD;;AAED,QAAIE,sBAAsB,CAACE,OAAvB,GAAiCH,WAAW,GAAG,CAAnD,EAAsD;AACpD;AACD;;AAEDC,IAAAA,sBAAsB,CAACE,OAAvB,GAAiCH,WAAjC;AACAD,IAAAA,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEK,OAAb,CAAqBC,mBAArB,GAA2CC,IAA3C,CAAiDC,GAAD,IAAS;AACvD,UAAIL,OAAJ,EAAa;AACXJ,QAAAA,OAAO,CAACS,GAAD,CAAP;AACD;AACF,KAJD;AAMA,WAAO,MAAM;AACXL,MAAAA,OAAO,GAAG,KAAV;AACD,KAFD;AAGD,GApBQ,EAoBN,CAACF,WAAD,EAAcD,WAAd,CApBM,CAAT;AAsBA,sBAAO,QAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAEF,IAAzB;AAAA,cAAgCD;AAAhC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA7BM;;GAAMD,0B;UAESH,c,EACAC,c;;;KAHTE,0B;AA+Bb,OAAO,MAAMa,eAAe,GAAG,MAAiB;AAAA;;AAC9C,SAAOpB,UAAU,CAACM,OAAD,CAAjB;AACD,CAFM;;IAAMc,e","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useRef, useState } from 'react';\nimport { LottoInfo } from 'src/diamondhand/Lottery';\nimport useDiamondHand from 'src/hooks/useDiamondHand';\nimport { useBlockNumber } from 'src/state/application/hooks';\n\nconst Context = createContext<LottoInfo>(null);\n\nexport const CurrentLotteryInfoProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [data, setData] = useState<LottoInfo>({} as LottoInfo);\n  const diamondHand = useDiamondHand();\n  const blockNumber = useBlockNumber();\n  const lastCheckedBlockNumber = useRef<number>();\n\n  useEffect(() => {\n    let mounted = true;\n    if (!diamondHand) {\n      return;\n    }\n\n    if (lastCheckedBlockNumber.current > blockNumber - 5) {\n      return;\n    }\n\n    lastCheckedBlockNumber.current = blockNumber;\n    diamondHand?.LOTTERY.getCurrentLottoInfo().then((res) => {\n      if (mounted) {\n        setData(res);\n      }\n    });\n\n    return () => {\n      mounted = false;\n    };\n  }, [blockNumber, diamondHand]);\n\n  return <Context.Provider value={data}>{children}</Context.Provider>;\n};\n\nexport const useCurrentLotto = (): LottoInfo => {\n  return useContext(Context);\n};\n"]},"metadata":{},"sourceType":"module"}