{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport useDiamondHand from 'src/hooks/useDiamondHand';\nimport useMyTicket from 'src/hooks/useMyTicket';\nimport useRoundInfo from './useRoundInfo';\nimport useHandleTransactionReceipt from 'src/hooks/useHandleTransactionReceipt';\nimport useMyTicketNumber from 'src/hooks/useMyTicketNumber';\nimport useTicketClaim from './useTicketClaim';\n\nconst countMatch = (a, b) => {\n  return a.filter(x => b.includes(x)).length;\n};\n\nconst prizeIndex = x => {\n  return {\n    jackpot: 0,\n    match4: 1,\n    match3: 2,\n    lost: undefined\n  }[x];\n};\n\nconst useMyRoundTicket = roundId => {\n  _s();\n\n  const dh = useDiamondHand();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n  const myTicket = useMyTicket(roundId);\n  const tickets = useMyTicketNumber(myTicket);\n  const lotteryInfo = useRoundInfo(roundId);\n  const [filteredTickets, setFilteredTickets] = useState();\n  const [claimable, setClaimable] = useState();\n  const [totalClaimable, setTotalClaimable] = useState();\n  const [winCount, setWinCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [loadingClaim, setLoadingClaim] = useState(false);\n  const validTicket = useMemo(() => {\n    if (!filteredTickets) return [];\n    const jackpotIds = filteredTickets.jackpot.map(t => t.id);\n    const match3Ids = filteredTickets.match3.map(t => t.id);\n    const match4Ids = filteredTickets.match4.map(t => t.id);\n    return jackpotIds.concat(match4Ids).concat(match3Ids);\n  }, [filteredTickets]);\n  const {\n    claimStatuses,\n    isCanClaimReward,\n    getTicketClaimStatus\n  } = useTicketClaim(validTicket);\n  const calculatePrize = useCallback(ticket => {\n    if (!(lotteryInfo === null || lotteryInfo === void 0 ? void 0 : lotteryInfo.winningNumbers) || !ticket) {\n      return;\n    }\n\n    const size = lotteryInfo === null || lotteryInfo === void 0 ? void 0 : lotteryInfo.winningNumbers.length;\n    const pbMatch = ticket[size - 1] === (lotteryInfo === null || lotteryInfo === void 0 ? void 0 : lotteryInfo.winningNumbers[size - 1]);\n    const match = countMatch(ticket.slice(0, size - 1), lotteryInfo === null || lotteryInfo === void 0 ? void 0 : lotteryInfo.winningNumbers.slice(0, size - 1));\n\n    if (match === 4 && pbMatch) {\n      return 5;\n    }\n\n    return match;\n  }, [lotteryInfo === null || lotteryInfo === void 0 ? void 0 : lotteryInfo.winningNumbers]);\n  const calculateClaimable = useCallback((numberOfTickets, level) => {\n    var _lotteryInfo$winners$;\n\n    if (!(lotteryInfo === null || lotteryInfo === void 0 ? void 0 : lotteryInfo.winners)) {\n      return BigNumber.from(0);\n    }\n\n    const index = prizeIndex(level);\n\n    if (typeof index === 'undefined' || ((_lotteryInfo$winners$ = lotteryInfo.winners[index]) === null || _lotteryInfo$winners$ === void 0 ? void 0 : _lotteryInfo$winners$.eq(0))) {\n      return BigNumber.from(0);\n    }\n\n    return lotteryInfo === null || lotteryInfo === void 0 ? void 0 : lotteryInfo.prizes[index].mul(numberOfTickets).div(lotteryInfo.winners[index]);\n  }, [lotteryInfo === null || lotteryInfo === void 0 ? void 0 : lotteryInfo.prizes, lotteryInfo === null || lotteryInfo === void 0 ? void 0 : lotteryInfo.winners]);\n  useEffect(() => {\n    setLoading(true);\n\n    if (!tickets) {\n      return;\n    }\n\n    const filtered = {\n      jackpot: [],\n      match4: [],\n      match3: [],\n      lost: []\n    };\n    tickets.forEach(item => {\n      const match = calculatePrize(item.numbers);\n\n      switch (match) {\n        case 5:\n          return filtered.jackpot.push(item);\n\n        case 4:\n          return filtered.match4.push(item);\n\n        case 3:\n          return filtered.match3.push(item);\n\n        default:\n          filtered.lost.push(item);\n      }\n    });\n    const claimableAmounts = {};\n    let total = BigNumber.from(0);\n    Object.entries(filtered).forEach(([level, tickets]) => {\n      const amount = calculateClaimable(tickets.length, level);\n      claimableAmounts[level] = amount;\n      total = total.add(amount);\n    });\n    setFilteredTickets(filtered);\n    setClaimable(claimableAmounts);\n    setTotalClaimable(total);\n    setWinCount(tickets.length - filtered.lost.length);\n    setLoading(false);\n  }, [calculateClaimable, calculatePrize, tickets]);\n  const winNumbers = useMemo(() => {\n    if (!lotteryInfo) return [];\n    return lotteryInfo.winningNumbers.slice(0, 4);\n  }, [lotteryInfo]);\n  const powerBall = useMemo(() => {\n    if (!lotteryInfo) return null;\n    return lotteryInfo.winningNumbers[4];\n  }, [lotteryInfo]);\n  const claimReward = useCallback(async () => {\n    if (!dh || !roundId || !filteredTickets) return;\n    const tickets = [...filteredTickets.jackpot.map(t => t.id), ...filteredTickets.match4.map(t => t.id), ...filteredTickets.match3.map(t => t.id)];\n\n    if (!tickets.length) {\n      return;\n    }\n\n    setLoadingClaim(true);\n\n    try {\n      const tx = await handleTransactionReceipt(dh.LOTTERY.batchClaimRewards(BigNumber.from(roundId), tickets), `Claim reward`);\n\n      if (tx && tx.response) {\n        await tx.response.wait();\n        setLoadingClaim(false);\n        getTicketClaimStatus();\n        tx.hideModal();\n      }\n    } catch {\n      setLoadingClaim(false);\n    }\n  }, [dh, roundId, filteredTickets, handleTransactionReceipt, getTicketClaimStatus]);\n  return {\n    claimStatuses,\n    filteredTickets,\n    claimable,\n    totalClaimable,\n    claimReward,\n    winCount,\n    winNumbers,\n    powerBall,\n    isCanClaimReward,\n    loading,\n    loadingClaim\n  };\n};\n\n_s(useMyRoundTicket, \"Gen6vR3rpz9O5BYVs3YKJqkD+kc=\", false, function () {\n  return [useDiamondHand, useHandleTransactionReceipt, useMyTicket, useMyTicketNumber, useRoundInfo, useTicketClaim];\n});\n\nexport default useMyRoundTicket;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/cuffies/src/views/TicketDetail/hooks/useMyRoundTicket.ts"],"names":["useCallback","useEffect","useMemo","useState","BigNumber","useDiamondHand","useMyTicket","useRoundInfo","useHandleTransactionReceipt","useMyTicketNumber","useTicketClaim","countMatch","a","b","filter","x","includes","length","prizeIndex","jackpot","match4","match3","lost","undefined","useMyRoundTicket","roundId","dh","handleTransactionReceipt","myTicket","tickets","lotteryInfo","filteredTickets","setFilteredTickets","claimable","setClaimable","totalClaimable","setTotalClaimable","winCount","setWinCount","loading","setLoading","loadingClaim","setLoadingClaim","validTicket","jackpotIds","map","t","id","match3Ids","match4Ids","concat","claimStatuses","isCanClaimReward","getTicketClaimStatus","calculatePrize","ticket","winningNumbers","size","pbMatch","match","slice","calculateClaimable","numberOfTickets","level","winners","from","index","eq","prizes","mul","div","filtered","forEach","item","numbers","push","claimableAmounts","total","Object","entries","amount","add","winNumbers","powerBall","claimReward","tx","LOTTERY","batchClaimRewards","response","wait","hideModal"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport useDiamondHand from 'src/hooks/useDiamondHand';\nimport useMyTicket from 'src/hooks/useMyTicket';\nimport useRoundInfo from './useRoundInfo';\nimport useHandleTransactionReceipt from 'src/hooks/useHandleTransactionReceipt';\nimport useMyTicketNumber, { Ticket } from 'src/hooks/useMyTicketNumber';\nimport useTicketClaim from './useTicketClaim';\n\nconst countMatch = (a: number[], b: number[]) => {\n  return a.filter((x) => b.includes(x)).length;\n};\n\ntype Level = 'jackpot' | 'match4' | 'match3' | 'lost';\n\nconst prizeIndex = (x: Level): number => {\n  return {\n    jackpot: 0,\n    match4: 1,\n    match3: 2,\n    lost: undefined,\n  }[x];\n};\n\nconst useMyRoundTicket = (roundId?: number) => {\n  const dh = useDiamondHand();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n  const myTicket = useMyTicket(roundId);\n  const tickets = useMyTicketNumber(myTicket);\n  const lotteryInfo = useRoundInfo(roundId);\n  const [filteredTickets, setFilteredTickets] = useState<Record<Level, Ticket[]>>();\n  const [claimable, setClaimable] = useState<Record<Level, BigNumber>>();\n  const [totalClaimable, setTotalClaimable] = useState<BigNumber>();\n  const [winCount, setWinCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [loadingClaim, setLoadingClaim] = useState(false);\n\n  const validTicket = useMemo(() => {\n    if (!filteredTickets) return [];\n    const jackpotIds = filteredTickets.jackpot.map((t) => t.id);\n    const match3Ids = filteredTickets.match3.map((t) => t.id);\n    const match4Ids = filteredTickets.match4.map((t) => t.id);\n    return jackpotIds.concat(match4Ids).concat(match3Ids);\n  }, [filteredTickets]);\n\n  const { claimStatuses, isCanClaimReward, getTicketClaimStatus } = useTicketClaim(validTicket);\n\n  const calculatePrize = useCallback(\n    (ticket: number[]) => {\n      if (!lotteryInfo?.winningNumbers || !ticket) {\n        return;\n      }\n      const size = lotteryInfo?.winningNumbers.length;\n      const pbMatch = ticket[size - 1] === lotteryInfo?.winningNumbers[size - 1];\n      const match = countMatch(\n        ticket.slice(0, size - 1),\n        lotteryInfo?.winningNumbers.slice(0, size - 1),\n      );\n\n      if (match === 4 && pbMatch) {\n        return 5;\n      }\n\n      return match;\n    },\n    [lotteryInfo?.winningNumbers],\n  );\n\n  const calculateClaimable = useCallback(\n    (numberOfTickets: number, level: Level) => {\n      if (!lotteryInfo?.winners) {\n        return BigNumber.from(0);\n      }\n      const index = prizeIndex(level);\n      if (typeof index === 'undefined' || lotteryInfo.winners[index]?.eq(0)) {\n        return BigNumber.from(0);\n      }\n      return lotteryInfo?.prizes[index].mul(numberOfTickets).div(lotteryInfo.winners[index]);\n    },\n    [lotteryInfo?.prizes, lotteryInfo?.winners],\n  );\n\n  useEffect(() => {\n    setLoading(true);\n    if (!tickets) {\n      return;\n    }\n    const filtered = {\n      jackpot: [],\n      match4: [],\n      match3: [],\n      lost: [],\n    } as Record<string, Ticket[]>;\n    tickets.forEach((item) => {\n      const match = calculatePrize(item.numbers);\n      switch (match) {\n        case 5:\n          return filtered.jackpot.push(item);\n\n        case 4:\n          return filtered.match4.push(item);\n\n        case 3:\n          return filtered.match3.push(item);\n\n        default:\n          filtered.lost.push(item);\n      }\n    });\n\n    const claimableAmounts = {} as Record<Level, BigNumber>;\n    let total = BigNumber.from(0);\n    Object.entries(filtered).forEach(([level, tickets]) => {\n      const amount = calculateClaimable(tickets.length, level as Level);\n      claimableAmounts[level as Level] = amount;\n      total = total.add(amount);\n    });\n\n    setFilteredTickets(filtered as any);\n    setClaimable(claimableAmounts);\n    setTotalClaimable(total);\n    setWinCount(tickets.length - filtered.lost.length);\n    setLoading(false);\n  }, [calculateClaimable, calculatePrize, tickets]);\n\n  const winNumbers = useMemo(() => {\n    if (!lotteryInfo) return [];\n    return lotteryInfo.winningNumbers.slice(0, 4);\n  }, [lotteryInfo]);\n\n  const powerBall = useMemo(() => {\n    if (!lotteryInfo) return null;\n    return lotteryInfo.winningNumbers[4];\n  }, [lotteryInfo]);\n\n  const claimReward = useCallback(async () => {\n    if (!dh || !roundId || !filteredTickets) return;\n\n    const tickets = [\n      ...filteredTickets.jackpot.map((t) => t.id),\n      ...filteredTickets.match4.map((t) => t.id),\n      ...filteredTickets.match3.map((t) => t.id),\n    ];\n    if (!tickets.length) {\n      return;\n    }\n    setLoadingClaim(true);\n\n    try {\n      const tx = await handleTransactionReceipt(\n        dh.LOTTERY.batchClaimRewards(BigNumber.from(roundId), tickets),\n        `Claim reward`,\n      );\n\n      if (tx && tx.response) {\n        await tx.response.wait();\n        setLoadingClaim(false);\n        getTicketClaimStatus();\n        tx.hideModal();\n      }\n    } catch {\n      setLoadingClaim(false);\n    }\n  }, [dh, roundId, filteredTickets, handleTransactionReceipt, getTicketClaimStatus]);\n\n  return {\n    claimStatuses,\n    filteredTickets,\n    claimable,\n    totalClaimable,\n    claimReward,\n    winCount,\n    winNumbers,\n    powerBall,\n    isCanClaimReward,\n    loading,\n    loadingClaim,\n  };\n};\n\nexport default useMyRoundTicket;\n"]},"metadata":{},"sourceType":"module"}