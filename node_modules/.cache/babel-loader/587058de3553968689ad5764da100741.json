{"ast":null,"code":"import deploymentMainnet from './diamondhand/deployments/deployments.mainnet.json';\nconst configurations = {\n  mainnet: {\n    chainId: 80001,\n    etherscanUrl: 'https://mumbai.polygonscan.com/',\n    defaultProvider: 'https://rpc-mumbai.maticvigil.com/',\n    deployments: deploymentMainnet,\n    pollingInterval: 5 * 1000,\n    refreshInterval: 10 * 1000,\n    defaultSlippageTolerance: 0.01,\n    gasLimitMultiplier: 1.1,\n    maxBalanceRefresh: 1000000,\n    abis: {\n      Lottery: deploymentMainnet.Lottery.abi,\n      Ticket: deploymentMainnet.Ticket.abi,\n      TaxService: deploymentMainnet.TaxService.abi,\n      MasterChef: deploymentMainnet.MasterChef.abi,\n      Nft: deploymentMainnet.Nft.abi\n    },\n    addresses: {\n      Lottery: deploymentMainnet.Lottery.address,\n      Ticket: deploymentMainnet.Ticket.address,\n      MasterChef: deploymentMainnet.MasterChef.address,\n      Nft: deploymentMainnet.Nft.address,\n      LuxRune: '0xEF1d37AAD657c5eD972836D5ACBCD86893B3D584',\n      Link: '0xb0897686c545045aFc77CF20eC7A532E3120E0F1',\n      Multicall: '0x08411ADd0b5AA8ee47563b146743C13b3556c9Cc',\n      TaxService: deploymentMainnet.TaxService.address,\n      RandomNumberGenerator: deploymentMainnet.RandomNumberGenerator.address,\n      PrizeReservePool: deploymentMainnet.PrizeReservePool.address\n    },\n    admins: ['0x2DcE12B0bCcf938CD6ee6F3bF872746e5D8F3e92'],\n    collateralTokens: {\n      LuxRune: ['0x2dA59E679529d3c04DAD1DfF038cabdB5Dcd8560', 18]\n    }\n  }\n};\nexport const ExternalLinks = {\n  twitter: 'https://twitter.com/LuxRune',\n  codes: 'https://github.com/LuxRune',\n  discord: 'https://discord.gg/LuxRune',\n  medium: 'https://medium.com/@LuxRune',\n  telegram: 'https://t.me/LuxRune',\n  buyLuxRune: 'https://app.sushi.com/swap?outputCurrency=0x2dA59E679529d3c04DAD1DfF038cabdB5Dcd8560',\n  rules: 'https://docs.LuxRune.finance/products/'\n};\nconst env = process.env.REACT_APP_ENV || process.env.NODE_ENV || 'development';\nexport const getDefaultConfiguration = () => {\n  // config used when no ethereum detected\n  return configurations[env];\n};","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/Peepoquest/src/config.ts"],"names":["deploymentMainnet","configurations","mainnet","chainId","etherscanUrl","defaultProvider","deployments","pollingInterval","refreshInterval","defaultSlippageTolerance","gasLimitMultiplier","maxBalanceRefresh","abis","Lottery","abi","Ticket","TaxService","MasterChef","Nft","addresses","address","LuxRune","Link","Multicall","RandomNumberGenerator","PrizeReservePool","admins","collateralTokens","ExternalLinks","twitter","codes","discord","medium","telegram","buyLuxRune","rules","env","process","REACT_APP_ENV","NODE_ENV","getDefaultConfiguration"],"mappings":"AACA,OAAOA,iBAAP,MAA8B,oDAA9B;AAEA,MAAMC,cAAgD,GAAG;AACvDC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE,KADF;AAEPC,IAAAA,YAAY,EAAE,iCAFP;AAGPC,IAAAA,eAAe,EAAE,oCAHV;AAIPC,IAAAA,WAAW,EAAEN,iBAJN;AAKPO,IAAAA,eAAe,EAAE,IAAI,IALd;AAMPC,IAAAA,eAAe,EAAE,KAAK,IANf;AAOPC,IAAAA,wBAAwB,EAAE,IAPnB;AAQPC,IAAAA,kBAAkB,EAAE,GARb;AASPC,IAAAA,iBAAiB,EAAE,OATZ;AAUPC,IAAAA,IAAI,EAAE;AACJC,MAAAA,OAAO,EAAEb,iBAAiB,CAACa,OAAlB,CAA0BC,GAD/B;AAEJC,MAAAA,MAAM,EAAEf,iBAAiB,CAACe,MAAlB,CAAyBD,GAF7B;AAGJE,MAAAA,UAAU,EAAEhB,iBAAiB,CAACgB,UAAlB,CAA6BF,GAHrC;AAIJG,MAAAA,UAAU,EAAEjB,iBAAiB,CAACiB,UAAlB,CAA6BH,GAJrC;AAKJI,MAAAA,GAAG,EAAElB,iBAAiB,CAACkB,GAAlB,CAAsBJ;AALvB,KAVC;AAiBPK,IAAAA,SAAS,EAAE;AACTN,MAAAA,OAAO,EAAEb,iBAAiB,CAACa,OAAlB,CAA0BO,OAD1B;AAETL,MAAAA,MAAM,EAAEf,iBAAiB,CAACe,MAAlB,CAAyBK,OAFxB;AAGTH,MAAAA,UAAU,EAAEjB,iBAAiB,CAACiB,UAAlB,CAA6BG,OAHhC;AAITF,MAAAA,GAAG,EAAElB,iBAAiB,CAACkB,GAAlB,CAAsBE,OAJlB;AAKTC,MAAAA,OAAO,EAAE,4CALA;AAMTC,MAAAA,IAAI,EAAE,4CANG;AAOTC,MAAAA,SAAS,EAAE,4CAPF;AAQTP,MAAAA,UAAU,EAAEhB,iBAAiB,CAACgB,UAAlB,CAA6BI,OARhC;AASTI,MAAAA,qBAAqB,EAAExB,iBAAiB,CAACwB,qBAAlB,CAAwCJ,OATtD;AAUTK,MAAAA,gBAAgB,EAAEzB,iBAAiB,CAACyB,gBAAlB,CAAmCL;AAV5C,KAjBJ;AA8BPM,IAAAA,MAAM,EAAE,CAAC,4CAAD,CA9BD;AA+BPC,IAAAA,gBAAgB,EAAE;AAChBN,MAAAA,OAAO,EAAE,CAAC,4CAAD,EAA+C,EAA/C;AADO;AA/BX;AAD8C,CAAzD;AAsCA,OAAO,MAAMO,aAAa,GAAG;AAC3BC,EAAAA,OAAO,EAAE,6BADkB;AAE3BC,EAAAA,KAAK,EAAE,4BAFoB;AAG3BC,EAAAA,OAAO,EAAE,4BAHkB;AAI3BC,EAAAA,MAAM,EAAE,6BAJmB;AAK3BC,EAAAA,QAAQ,EAAE,sBALiB;AAM3BC,EAAAA,UAAU,EACR,sFAPyB;AAQ3BC,EAAAA,KAAK,EAAE;AARoB,CAAtB;AAWP,MAAMC,GAAW,GAAGC,OAAO,CAACD,GAAR,CAAYE,aAAZ,IAA6BD,OAAO,CAACD,GAAR,CAAYG,QAAzC,IAAqD,aAAzE;AAEA,OAAO,MAAMC,uBAAuB,GAAG,MAAM;AAC3C;AACA,SAAOvC,cAAc,CAACmC,GAAD,CAArB;AACD,CAHM","sourcesContent":["import { Configuration } from './diamondhand/config';\nimport deploymentMainnet from './diamondhand/deployments/deployments.mainnet.json';\n\nconst configurations: { [env: string]: Configuration } = {\n  mainnet: {\n    chainId: 80001,\n    etherscanUrl: 'https://mumbai.polygonscan.com/',\n    defaultProvider: 'https://rpc-mumbai.maticvigil.com/',\n    deployments: deploymentMainnet,\n    pollingInterval: 5 * 1000,\n    refreshInterval: 10 * 1000,\n    defaultSlippageTolerance: 0.01,\n    gasLimitMultiplier: 1.1,\n    maxBalanceRefresh: 1000000,\n    abis: {\n      Lottery: deploymentMainnet.Lottery.abi,\n      Ticket: deploymentMainnet.Ticket.abi,\n      TaxService: deploymentMainnet.TaxService.abi,\n      MasterChef: deploymentMainnet.MasterChef.abi,\n      Nft: deploymentMainnet.Nft.abi,\n    },\n    addresses: {\n      Lottery: deploymentMainnet.Lottery.address,\n      Ticket: deploymentMainnet.Ticket.address,\n      MasterChef: deploymentMainnet.MasterChef.address,\n      Nft: deploymentMainnet.Nft.address,\n      LuxRune: '0xEF1d37AAD657c5eD972836D5ACBCD86893B3D584',\n      Link: '0xb0897686c545045aFc77CF20eC7A532E3120E0F1',\n      Multicall: '0x08411ADd0b5AA8ee47563b146743C13b3556c9Cc',\n      TaxService: deploymentMainnet.TaxService.address,\n      RandomNumberGenerator: deploymentMainnet.RandomNumberGenerator.address,\n      PrizeReservePool: deploymentMainnet.PrizeReservePool.address,\n    },\n\n    admins: ['0x2DcE12B0bCcf938CD6ee6F3bF872746e5D8F3e92'],\n    collateralTokens: {\n      LuxRune: ['0x2dA59E679529d3c04DAD1DfF038cabdB5Dcd8560', 18],\n    },\n  },\n};\n\nexport const ExternalLinks = {\n  twitter: 'https://twitter.com/LuxRune',\n  codes: 'https://github.com/LuxRune',\n  discord: 'https://discord.gg/LuxRune',\n  medium: 'https://medium.com/@LuxRune',\n  telegram: 'https://t.me/LuxRune',\n  buyLuxRune:\n    'https://app.sushi.com/swap?outputCurrency=0x2dA59E679529d3c04DAD1DfF038cabdB5Dcd8560',\n  rules: 'https://docs.LuxRune.finance/products/',\n};\n\nconst env: string = process.env.REACT_APP_ENV || process.env.NODE_ENV || 'development';\n\nexport const getDefaultConfiguration = () => {\n  // config used when no ethereum detected\n  return configurations[env];\n};\n"]},"metadata":{},"sourceType":"module"}