{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nexports.namehash = name => {\n  let node = '0000000000000000000000000000000000000000000000000000000000000000';\n\n  if (name !== '') {\n    const labels = name.split('.');\n\n    for (let i = labels.length - 1; i >= 0; i--) {\n      const labelHash = ethereumjs_util_1.sha3(labels[i]).toString('hex');\n      node = ethereumjs_util_1.sha3(new Buffer(node + labelHash, 'hex')).toString('hex');\n    }\n  }\n\n  return '0x' + node.toString();\n};\n\nexports.nodehash = name => {\n  const label = name.split('.')[0];\n\n  if (label) {\n    return '0x' + ethereumjs_util_1.sha3(label).toString('hex');\n  } else {\n    return '';\n  }\n};\n\nexports.ENSNameBaseSchema = {\n  fields: [{\n    name: 'Name',\n    type: 'string',\n    description: 'ENS Name'\n  }, {\n    name: 'NodeHash',\n    type: 'bytes32',\n    description: 'ENS Node Hash',\n    readOnly: true\n  }, {\n    name: 'NameHash',\n    type: 'bytes32',\n    description: 'ENS Name Hash',\n    readOnly: true\n  }],\n  assetFromFields: fields => ({\n    id: fields.ID,\n    address: fields.Address,\n    name: fields.Name,\n    nodeHash: exports.nodehash(fields.Name),\n    nameHash: exports.namehash(fields.Name)\n  }),\n  checkAsset: asset => {\n    return asset.name ? exports.namehash(asset.name) === asset.nameHash && exports.nodehash(asset.name) === asset.nodeHash : true;\n  },\n  hash: ({\n    nodeHash\n  }) => nodeHash\n};","map":{"version":3,"sources":["../../src/common/ens.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAUa,OAAA,CAAA,QAAA,GAAY,IAAD,IAAiB;AACvC,MAAI,IAAI,GAAG,kEAAX;;AACA,MAAI,IAAI,KAAK,EAAb,EAAiB;AACf,UAAM,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAf;;AACA,SAAK,IAAI,CAAC,GAAG,MAAM,CAAC,MAAP,GAAgB,CAA7B,EAAgC,CAAC,IAAI,CAArC,EAAwC,CAAC,EAAzC,EAA6C;AAC3C,YAAM,SAAS,GAAG,iBAAA,CAAA,IAAA,CAAK,MAAM,CAAC,CAAD,CAAX,EAAgB,QAAhB,CAAyB,KAAzB,CAAlB;AACA,MAAA,IAAI,GAAG,iBAAA,CAAA,IAAA,CAAK,IAAI,MAAJ,CAAW,IAAI,GAAG,SAAlB,EAA6B,KAA7B,CAAL,EAA0C,QAA1C,CAAmD,KAAnD,CAAP;AACD;AACF;;AACD,SAAO,OAAO,IAAI,CAAC,QAAL,EAAd;AACD,CAVY;;AAYA,OAAA,CAAA,QAAA,GAAY,IAAD,IAAiB;AACvC,QAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAd;;AACA,MAAI,KAAJ,EAAW;AACT,WAAO,OAAO,iBAAA,CAAA,IAAA,CAAK,KAAL,EAAY,QAAZ,CAAqB,KAArB,CAAd;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF,CAPY;;AASA,OAAA,CAAA,iBAAA,GAKT;AACF,EAAA,MAAM,EAAE,CACN;AAAE,IAAA,IAAI,EAAE,MAAR;AAAgB,IAAA,IAAI,EAAE,QAAtB;AAAgC,IAAA,WAAW,EAAE;AAA7C,GADM,EAEN;AACE,IAAA,IAAI,EAAE,UADR;AAEE,IAAA,IAAI,EAAE,SAFR;AAGE,IAAA,WAAW,EAAE,eAHf;AAIE,IAAA,QAAQ,EAAE;AAJZ,GAFM,EAQN;AACE,IAAA,IAAI,EAAE,UADR;AAEE,IAAA,IAAI,EAAE,SAFR;AAGE,IAAA,WAAW,EAAE,eAHf;AAIE,IAAA,QAAQ,EAAE;AAJZ,GARM,CADN;AAgBF,EAAA,eAAe,EAAG,MAAD,KAAkB;AACjC,IAAA,EAAE,EAAE,MAAM,CAAC,EADsB;AAEjC,IAAA,OAAO,EAAE,MAAM,CAAC,OAFiB;AAGjC,IAAA,IAAI,EAAE,MAAM,CAAC,IAHoB;AAIjC,IAAA,QAAQ,EAAE,OAAA,CAAA,QAAA,CAAS,MAAM,CAAC,IAAhB,CAJuB;AAKjC,IAAA,QAAQ,EAAE,OAAA,CAAA,QAAA,CAAS,MAAM,CAAC,IAAhB;AALuB,GAAlB,CAhBf;AAuBF,EAAA,UAAU,EAAG,KAAD,IAAmB;AAC7B,WAAO,KAAK,CAAC,IAAN,GACH,OAAA,CAAA,QAAA,CAAS,KAAK,CAAC,IAAf,MAAyB,KAAK,CAAC,QAA/B,IACE,OAAA,CAAA,QAAA,CAAS,KAAK,CAAC,IAAf,MAAyB,KAAK,CAAC,QAF9B,GAGH,IAHJ;AAID,GA5BC;AA6BF,EAAA,IAAI,EAAE,CAAC;AAAE,IAAA;AAAF,GAAD,KAAkB;AA7BtB,CALS","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nexports.namehash = (name) => {\n    let node = '0000000000000000000000000000000000000000000000000000000000000000';\n    if (name !== '') {\n        const labels = name.split('.');\n        for (let i = labels.length - 1; i >= 0; i--) {\n            const labelHash = ethereumjs_util_1.sha3(labels[i]).toString('hex');\n            node = ethereumjs_util_1.sha3(new Buffer(node + labelHash, 'hex')).toString('hex');\n        }\n    }\n    return '0x' + node.toString();\n};\nexports.nodehash = (name) => {\n    const label = name.split('.')[0];\n    if (label) {\n        return '0x' + ethereumjs_util_1.sha3(label).toString('hex');\n    }\n    else {\n        return '';\n    }\n};\nexports.ENSNameBaseSchema = {\n    fields: [\n        { name: 'Name', type: 'string', description: 'ENS Name' },\n        {\n            name: 'NodeHash',\n            type: 'bytes32',\n            description: 'ENS Node Hash',\n            readOnly: true,\n        },\n        {\n            name: 'NameHash',\n            type: 'bytes32',\n            description: 'ENS Name Hash',\n            readOnly: true,\n        },\n    ],\n    assetFromFields: (fields) => ({\n        id: fields.ID,\n        address: fields.Address,\n        name: fields.Name,\n        nodeHash: exports.nodehash(fields.Name),\n        nameHash: exports.namehash(fields.Name),\n    }),\n    checkAsset: (asset) => {\n        return asset.name\n            ? exports.namehash(asset.name) === asset.nameHash &&\n                exports.nodehash(asset.name) === asset.nodeHash\n            : true;\n    },\n    hash: ({ nodeHash }) => nodeHash,\n};\n//# sourceMappingURL=ens.js.map"]},"metadata":{},"sourceType":"script"}