{"ast":null,"code":"import { BigNumber } from '@ethersproject/bignumber';\nimport { Lottery } from './Lottery';\nimport BABYPONY from './BABYPONY';\nimport { Ticket } from './Ticket';\nimport { MasterChef } from './MasterChef';\nimport { multicall } from './multicall';\nimport LINK from './LINK';\nimport { Nft } from './Nft';\nimport { TaxService } from './TaxService';\nimport ERC20 from './ERC20';\n/**\n * An API module of Diamond Hand contracts.\n * All contract-interacting domain logic should be defined in here.\n */\n\nexport class DiamondHand {\n  constructor(cfg, web3Provider, account) {\n    this.myAccount = void 0;\n    this.defaultProvider = void 0;\n    this.signer = void 0;\n    this.config = void 0;\n    this.lottery = void 0;\n    this.babypony = void 0;\n    this.collateralTokens = void 0;\n    this.link = void 0;\n    this.nft = void 0;\n    this.ticket = void 0;\n    this.masterchef = void 0;\n    this.taxService = void 0;\n    this.multicallAddress = void 0;\n    const provider = account ? web3Provider.getSigner(account) : web3Provider;\n    this.defaultProvider = web3Provider;\n    this.myAccount = account;\n    const {\n      abis,\n      addresses,\n      collateralTokens\n    } = cfg;\n    this.lottery = new Lottery(abis.Lottery, addresses.Lottery, provider, this);\n    this.ticket = new Ticket(abis.Ticket, addresses.Ticket, provider);\n    this.masterchef = new MasterChef(abis.MasterChef, addresses.MasterChef, provider);\n    this.taxService = new TaxService(abis.TaxService, addresses.TaxService, provider);\n    this.nft = new Nft(abis.Nft, addresses.Nft, provider);\n    this.config = cfg;\n    this.multicallAddress = cfg.addresses.Multicall;\n    this.babypony = new BABYPONY(abis.BabyPony, addresses.BabyPony, provider, 'BABYPONY');\n    this.link = new LINK(abis.Link, addresses.Link, provider, 'LINK');\n    this.collateralTokens = [];\n\n    for (const [symbol, [address, decimal]] of Object.entries(collateralTokens)) {\n      this.collateralTokens.push(new ERC20(address, provider, symbol, decimal));\n    }\n  }\n\n  multicall(calls) {\n    return multicall(this.defaultProvider, this.multicallAddress, calls);\n  }\n\n  get provider() {\n    return this.signer || this.defaultProvider;\n  }\n\n  getCollateralTokens() {\n    return this.collateralTokens;\n  }\n\n  getTokenByAddress(address) {\n    return this.collateralTokens.find(t => t.address == address);\n  }\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n\n\n  unlockWallet(provider, account) {\n    let signer;\n\n    if (account) {\n      signer = provider.getSigner(account);\n      this.signer = provider.getSigner(account);\n    } else {\n      signer = provider;\n      this.signer = null;\n    }\n\n    this.myAccount = account;\n    this.reconnect(signer);\n  }\n\n  lock(provider) {\n    this.signer = null;\n    this.myAccount = null;\n    this.reconnect(provider);\n  }\n\n  reconnect(signer) {\n    const contracts = [this.lottery, this.ticket, this.babypony, ...Object.values(this.collateralTokens)];\n\n    for (const c of contracts) {\n      if (c) {\n        c.connect(signer);\n      }\n    }\n  }\n\n  get isUnlocked() {\n    return !!this.myAccount;\n  }\n\n  get LOTTERY() {\n    return this.lottery;\n  }\n\n  get NFT() {\n    return this.nft;\n  }\n\n  get TICKET() {\n    return this.ticket;\n  }\n\n  get BABYPONY() {\n    return this.babypony;\n  }\n\n  get LINK() {\n    return this.link;\n  }\n\n  get MASTERCHEF() {\n    return this.masterchef;\n  }\n\n  get TAXSERVICE() {\n    return this.taxService;\n  }\n\n  async getInfo() {\n    const {\n      addresses\n    } = this.config;\n    const [[jackPotDistribution], [matchFourDistribution], [matchThreeDistribution], [taxRate], [costPerTicket], [maxValidRange], [powerBallRange], [reservePoolRatio], [burnTitanRatio], [revervePoolBalance], [randomNumberGeneratorBalance]] = await this.multicall([{\n      contract: this.LOTTERY.contract,\n      method: 'prizeDistribution_',\n      params: [0]\n    }, {\n      contract: this.LOTTERY.contract,\n      method: 'prizeDistribution_',\n      params: [1]\n    }, {\n      contract: this.LOTTERY.contract,\n      method: 'prizeDistribution_',\n      params: [2]\n    }, {\n      contract: this.LOTTERY.contract,\n      method: 'taxRate_'\n    }, {\n      contract: this.LOTTERY.contract,\n      method: 'costPerTicket_'\n    }, {\n      contract: this.LOTTERY.contract,\n      method: 'maxValidRange_'\n    }, {\n      contract: this.LOTTERY.contract,\n      method: 'powerBallRange_'\n    }, {\n      contract: this.TAXSERVICE.contract,\n      method: 'reservePoolRatio_'\n    }, {\n      contract: this.TAXSERVICE.contract,\n      method: 'burnTitanPoolRatio_'\n    }, {\n      contract: this.BABYPONY.contract,\n      method: 'balanceOf',\n      params: [addresses.PrizeReservePool]\n    }, {\n      contract: this.LINK.contract,\n      method: 'balanceOf',\n      params: [addresses.RandomNumberGenerator]\n    }]);\n    return {\n      jackPotDistribution: jackPotDistribution.div(1e4).toNumber(),\n      matchFourDistribution: matchFourDistribution.div(1e4).toNumber(),\n      matchThreeDistribution: matchThreeDistribution.div(1e4).toNumber(),\n      taxRate: taxRate.div(1e4).toNumber(),\n      costPerTicket,\n      maxValidRange,\n      powerBallRange,\n      reservePoolRatio,\n      burnTitanRatio,\n      revervePoolBalance,\n      randomNumberGeneratorBalance\n    };\n  }\n\n  gasOptions(gas) {\n    const multiplied = Math.floor(gas.toNumber() * this.config.gasLimitMultiplier);\n    console.log(`⛽️ Gas multiplied: ${gas} -> ${multiplied}`);\n    return {\n      gasLimit: BigNumber.from(multiplied)\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/BabyPepe/src/diamondhand/DiamondHand.ts"],"names":["BigNumber","Lottery","BABYPONY","Ticket","MasterChef","multicall","LINK","Nft","TaxService","ERC20","DiamondHand","constructor","cfg","web3Provider","account","myAccount","defaultProvider","signer","config","lottery","babypony","collateralTokens","link","nft","ticket","masterchef","taxService","multicallAddress","provider","getSigner","abis","addresses","Multicall","BabyPony","Link","symbol","address","decimal","Object","entries","push","calls","getCollateralTokens","getTokenByAddress","find","t","unlockWallet","reconnect","lock","contracts","values","c","connect","isUnlocked","LOTTERY","NFT","TICKET","MASTERCHEF","TAXSERVICE","getInfo","jackPotDistribution","matchFourDistribution","matchThreeDistribution","taxRate","costPerTicket","maxValidRange","powerBallRange","reservePoolRatio","burnTitanRatio","revervePoolBalance","randomNumberGeneratorBalance","contract","method","params","PrizeReservePool","RandomNumberGenerator","div","toNumber","gasOptions","gas","multiplied","Math","floor","gasLimitMultiplier","console","log","gasLimit","from"],"mappings":"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","sourcesContent":["import { Configuration } from './config';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport { Overrides } from '@ethersproject/contracts';\nimport { JsonRpcProvider, Provider } from '@ethersproject/providers';\nimport { Lottery } from './Lottery';\nimport BABYPONY from './BABYPONY';\nimport { Ticket } from './Ticket';\nimport { MasterChef } from './MasterChef';\nimport { Call, multicall } from './multicall';\nimport LINK from './LINK';\nimport{ Nft } from './Nft';\nimport { TaxService } from './TaxService';\nimport { ConfigurationInfo } from './types';\nimport ERC20 from './ERC20';\n\n/**\n * An API module of Diamond Hand contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class DiamondHand {\n  myAccount: string;\n  private defaultProvider: JsonRpcProvider;\n  private signer?: Signer;\n  private config: Configuration;\n  private lottery: Lottery;\n  private babypony: BABYPONY;\n  private collateralTokens: ERC20[];\n  private link: LINK;\n  private nft: Nft;\n  private ticket: Ticket;\n  private masterchef: MasterChef;\n  private taxService: TaxService;\n  private multicallAddress: string;\n\n  constructor(cfg: Configuration, web3Provider: JsonRpcProvider, account?: string) {\n    const provider = account ? web3Provider.getSigner(account) : web3Provider;\n    this.defaultProvider = web3Provider;\n    this.myAccount = account;\n    const { abis, addresses, collateralTokens } = cfg;\n    this.lottery = new Lottery(abis.Lottery, addresses.Lottery, provider, this);\n    this.ticket = new Ticket(abis.Ticket, addresses.Ticket, provider);\n    this.masterchef = new MasterChef(abis.MasterChef, addresses.MasterChef, provider);\n    this.taxService = new TaxService(abis.TaxService, addresses.TaxService, provider);\n    this.nft = new Nft(abis.Nft, addresses.Nft, provider);\n    this.config = cfg;\n    this.multicallAddress = cfg.addresses.Multicall;\n    this.babypony = new BABYPONY(abis.BabyPony, addresses.BabyPony, provider, 'BABYPONY');\n    this.link = new LINK(abis.Link, addresses.Link, provider, 'LINK');\n    this.collateralTokens = [];\n    for (const [symbol, [address, decimal]] of Object.entries(collateralTokens)) {\n      this.collateralTokens.push(new ERC20(address, provider, symbol, decimal));\n    }\n  }\n\n  public multicall(calls: Call[]) {\n    return multicall(this.defaultProvider, this.multicallAddress, calls);\n  }\n\n  public get provider(): Signer | Provider {\n    return this.signer || this.defaultProvider;\n  }\n  public getCollateralTokens() {\n    return this.collateralTokens;\n  }\n\n  public getTokenByAddress(address: string) {\n    return this.collateralTokens.find((t) => t.address == address);\n  }\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: JsonRpcProvider, account: string) {\n    let signer: Signer | JsonRpcProvider;\n\n    if (account) {\n      signer = provider.getSigner(account);\n      this.signer = provider.getSigner(account);\n    } else {\n      signer = provider;\n      this.signer = null;\n    }\n\n    this.myAccount = account;\n    this.reconnect(signer);\n  }\n\n  lock(provider: any) {\n    this.signer = null;\n    this.myAccount = null;\n    this.reconnect(provider);\n  }\n\n  private reconnect(signer: any) {\n    const contracts = [\n      this.lottery,\n      this.ticket,\n      this.babypony,\n      ...Object.values(this.collateralTokens),\n    ];\n    for (const c of contracts) {\n      if (c) {\n        c.connect(signer);\n      }\n    }\n  }\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  }\n\n  get LOTTERY() {\n    return this.lottery;\n  }\n  \n  get NFT() {\n    return this.nft;\n  }\n\n  get TICKET() {\n    return this.ticket;\n  }\n\n  get BABYPONY() {\n    return this.babypony;\n  }\n\n  get LINK() {\n    return this.link;\n  }\n  get MASTERCHEF() {\n    return this.masterchef;\n  }\n\n  get TAXSERVICE() {\n    return this.taxService;\n  }\n\n  async getInfo() {\n    const { addresses } = this.config;\n    const [\n      [jackPotDistribution],\n      [matchFourDistribution],\n      [matchThreeDistribution],\n      [taxRate],\n      [costPerTicket],\n      [maxValidRange],\n      [powerBallRange],\n      [reservePoolRatio],\n      [burnTitanRatio],\n      [revervePoolBalance],\n      [randomNumberGeneratorBalance],\n    ] = await this.multicall([\n      {\n        contract: this.LOTTERY.contract,\n        method: 'prizeDistribution_',\n        params: [0],\n      },\n      {\n        contract: this.LOTTERY.contract,\n        method: 'prizeDistribution_',\n        params: [1],\n      },\n      {\n        contract: this.LOTTERY.contract,\n        method: 'prizeDistribution_',\n        params: [2],\n      },\n      {\n        contract: this.LOTTERY.contract,\n        method: 'taxRate_',\n      },\n      {\n        contract: this.LOTTERY.contract,\n        method: 'costPerTicket_',\n      },\n      {\n        contract: this.LOTTERY.contract,\n        method: 'maxValidRange_',\n      },\n      {\n        contract: this.LOTTERY.contract,\n        method: 'powerBallRange_',\n      },\n      {\n        contract: this.TAXSERVICE.contract,\n        method: 'reservePoolRatio_',\n      },\n      {\n        contract: this.TAXSERVICE.contract,\n        method: 'burnTitanPoolRatio_',\n      },\n      {\n        contract: this.BABYPONY.contract,\n        method: 'balanceOf',\n        params: [addresses.PrizeReservePool],\n      },\n      {\n        contract: this.LINK.contract,\n        method: 'balanceOf',\n        params: [addresses.RandomNumberGenerator],\n      },\n    ]);\n    return {\n      jackPotDistribution: jackPotDistribution.div(1e4).toNumber(),\n      matchFourDistribution: matchFourDistribution.div(1e4).toNumber(),\n      matchThreeDistribution: matchThreeDistribution.div(1e4).toNumber(),\n      taxRate: taxRate.div(1e4).toNumber(),\n      costPerTicket,\n      maxValidRange,\n      powerBallRange,\n      reservePoolRatio,\n      burnTitanRatio,\n      revervePoolBalance,\n      randomNumberGeneratorBalance,\n    } as ConfigurationInfo;\n  }\n\n  gasOptions(gas: BigNumber): Overrides {\n    const multiplied = Math.floor(gas.toNumber() * this.config.gasLimitMultiplier);\n    console.log(`⛽️ Gas multiplied: ${gas} -> ${multiplied}`);\n    return {\n      gasLimit: BigNumber.from(multiplied),\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}