{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { addTransaction, checkedTransaction, clearAllTransactions, finalizeTransaction } from './actions';\n\nconst now = () => new Date().getTime();\n\nexport const initialState = {};\nexport default createReducer(initialState, builder => builder.addCase(addTransaction, (transactions, {\n  payload: {\n    chainId,\n    hash,\n    from,\n    approval,\n    summary,\n    redemption\n  }\n}) => {\n  var _transactions$chainId, _transactions$chainId2;\n\n  if ((_transactions$chainId = transactions[chainId]) === null || _transactions$chainId === void 0 ? void 0 : _transactions$chainId[hash]) {\n    return;\n  }\n\n  const txs = (_transactions$chainId2 = transactions[chainId]) !== null && _transactions$chainId2 !== void 0 ? _transactions$chainId2 : {};\n  txs[hash] = {\n    hash,\n    from,\n    approval,\n    summary,\n    redemption,\n    addedTime: now()\n  };\n  transactions[chainId] = txs;\n}).addCase(clearAllTransactions, (transactions, {\n  payload: {\n    chainId\n  }\n}) => {\n  if (!transactions[chainId]) return;\n  transactions[chainId] = {};\n}).addCase(checkedTransaction, (transactions, {\n  payload: {\n    chainId,\n    hash,\n    blockNumber\n  }\n}) => {\n  var _transactions$chainId3;\n\n  const tx = (_transactions$chainId3 = transactions[chainId]) === null || _transactions$chainId3 === void 0 ? void 0 : _transactions$chainId3[hash];\n\n  if (!tx) {\n    return;\n  }\n\n  if (!tx.lastCheckedBlockNumber) {\n    tx.lastCheckedBlockNumber = blockNumber;\n  } else {\n    tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n  }\n}).addCase(finalizeTransaction, (transactions, {\n  payload: {\n    hash,\n    chainId,\n    receipt\n  }\n}) => {\n  var _transactions$chainId4;\n\n  const tx = (_transactions$chainId4 = transactions[chainId]) === null || _transactions$chainId4 === void 0 ? void 0 : _transactions$chainId4[hash];\n\n  if (!tx) {\n    return;\n  }\n\n  tx.receipt = receipt;\n  tx.confirmedTime = now();\n}));","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/BabyPepe/src/state/transactions/reducer.ts"],"names":["createReducer","addTransaction","checkedTransaction","clearAllTransactions","finalizeTransaction","now","Date","getTime","initialState","builder","addCase","transactions","payload","chainId","hash","from","approval","summary","redemption","txs","addedTime","blockNumber","tx","lastCheckedBlockNumber","Math","max","receipt","confirmedTime"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SACEC,cADF,EAEEC,kBAFF,EAGEC,oBAHF,EAIEC,mBAJF,QAMO,WANP;;AAQA,MAAMC,GAAG,GAAG,MAAM,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;;AAoBA,OAAO,MAAMC,YAA8B,GAAG,EAAvC;AAEP,eAAeR,aAAa,CAACQ,YAAD,EAAgBC,OAAD,IACzCA,OAAO,CACJC,OADH,CAEIT,cAFJ,EAGI,CAACU,YAAD,EAAe;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA,IAAjB;AAAuBC,IAAAA,QAAvB;AAAiCC,IAAAA,OAAjC;AAA0CC,IAAAA;AAA1C;AAAX,CAAf,KAAuF;AAAA;;AACrF,+BAAIP,YAAY,CAACE,OAAD,CAAhB,0DAAI,sBAAwBC,IAAxB,CAAJ,EAAmC;AACjC;AACD;;AACD,QAAMK,GAAG,6BAAGR,YAAY,CAACE,OAAD,CAAf,2EAA4B,EAArC;AACAM,EAAAA,GAAG,CAACL,IAAD,CAAH,GAAY;AAAEA,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,QAAd;AAAwBC,IAAAA,OAAxB;AAAiCC,IAAAA,UAAjC;AAA6CE,IAAAA,SAAS,EAAEf,GAAG;AAA3D,GAAZ;AACAM,EAAAA,YAAY,CAACE,OAAD,CAAZ,GAAwBM,GAAxB;AACD,CAVL,EAYGT,OAZH,CAYWP,oBAZX,EAYiC,CAACQ,YAAD,EAAe;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF;AAAX,CAAf,KAA4C;AACzE,MAAI,CAACF,YAAY,CAACE,OAAD,CAAjB,EAA4B;AAC5BF,EAAAA,YAAY,CAACE,OAAD,CAAZ,GAAwB,EAAxB;AACD,CAfH,EAgBGH,OAhBH,CAiBIR,kBAjBJ,EAkBI,CAACS,YAAD,EAAe;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBO,IAAAA;AAAjB;AAAX,CAAf,KAA+D;AAAA;;AAC7D,QAAMC,EAAE,6BAAGX,YAAY,CAACE,OAAD,CAAf,2DAAG,uBAAwBC,IAAxB,CAAX;;AACA,MAAI,CAACQ,EAAL,EAAS;AACP;AACD;;AACD,MAAI,CAACA,EAAE,CAACC,sBAAR,EAAgC;AAC9BD,IAAAA,EAAE,CAACC,sBAAH,GAA4BF,WAA5B;AACD,GAFD,MAEO;AACLC,IAAAA,EAAE,CAACC,sBAAH,GAA4BC,IAAI,CAACC,GAAL,CAASJ,WAAT,EAAsBC,EAAE,CAACC,sBAAzB,CAA5B;AACD;AACF,CA5BL,EA8BGb,OA9BH,CA8BWN,mBA9BX,EA8BgC,CAACO,YAAD,EAAe;AAAEC,EAAAA,OAAO,EAAE;AAAEE,IAAAA,IAAF;AAAQD,IAAAA,OAAR;AAAiBa,IAAAA;AAAjB;AAAX,CAAf,KAA2D;AAAA;;AACvF,QAAMJ,EAAE,6BAAGX,YAAY,CAACE,OAAD,CAAf,2DAAG,uBAAwBC,IAAxB,CAAX;;AACA,MAAI,CAACQ,EAAL,EAAS;AACP;AACD;;AACDA,EAAAA,EAAE,CAACI,OAAH,GAAaA,OAAb;AACAJ,EAAAA,EAAE,CAACK,aAAH,GAAmBtB,GAAG,EAAtB;AACD,CArCH,CAD0B,CAA5B","sourcesContent":["import { createReducer } from '@reduxjs/toolkit';\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  SerializableTransactionReceipt,\n} from './actions';\n\nconst now = () => new Date().getTime();\n\nexport interface TransactionDetails {\n  hash: string;\n  approval?: { tokenAddress: string; spender: string };\n  redemption?: { poolAddress: string };\n  from: string;\n  summary?: string;\n  receipt?: SerializableTransactionReceipt;\n  lastCheckedBlockNumber?: number;\n  addedTime: number;\n  confirmedTime?: number;\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails;\n  };\n}\n\nexport const initialState: TransactionState = {};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(\n      addTransaction,\n      (transactions, { payload: { chainId, hash, from, approval, summary, redemption } }) => {\n        if (transactions[chainId]?.[hash]) {\n          return;\n        }\n        const txs = transactions[chainId] ?? {};\n        txs[hash] = { hash, from, approval, summary, redemption, addedTime: now() };\n        transactions[chainId] = txs;\n      },\n    )\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\n      if (!transactions[chainId]) return;\n      transactions[chainId] = {};\n    })\n    .addCase(\n      checkedTransaction,\n      (transactions, { payload: { chainId, hash, blockNumber } }) => {\n        const tx = transactions[chainId]?.[hash];\n        if (!tx) {\n          return;\n        }\n        if (!tx.lastCheckedBlockNumber) {\n          tx.lastCheckedBlockNumber = blockNumber;\n        } else {\n          tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n        }\n      },\n    )\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      tx.receipt = receipt;\n      tx.confirmedTime = now();\n    }),\n);\n"]},"metadata":{},"sourceType":"module"}