{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport useDiamondHand from './useDiamondHand';\n\nconst useMyTicket = battleId => {\n  _s();\n\n  const dh = useDiamondHand();\n  const [usercharacter, setMyChar] = useState();\n  const [player1, setPlayer1] = useState();\n  const [player2, setPlayer2] = useState();\n  const [vitalPoints1, setvitalPoints1] = useState();\n  const [vitalPoints2, setvitalPoints2] = useState();\n  const [atackForce1, setAtackForce1] = useState();\n  const [atackForce2, setAtackForce2] = useState();\n  const [battlestarted, setBattlestarted] = useState();\n  const [battlefinished, setBattlefinished] = useState();\n  const {\n    account\n  } = useWeb3React();\n  useEffect(() => {\n    let mounted = true;\n\n    if (!dh || !account || !battleId) {\n      return;\n    }\n\n    setMyChar(0);\n    dh.NFT.UserCharacter(account).then(usercharacter => {\n      if (!mounted) {\n        return;\n      }\n\n      setMyChar(usercharacter);\n    });\n    dh.NFT.getPlayer1(battleId).then(player1 => {\n      if (!mounted) {\n        return;\n      }\n\n      setPlayer1(player1);\n    });\n    dh.NFT.getPlayer2(battleId).then(player2 => {\n      if (!mounted) {\n        return;\n      }\n\n      setPlayer2(player2);\n    });\n    dh.NFT.BattleStarted(battleId).then(battlestarted => {\n      if (!mounted) {\n        return;\n      }\n\n      setBattlestarted(battlestarted);\n    });\n    dh.NFT.BattleEnded(battleId).then(battlefinished => {\n      if (!mounted) {\n        return;\n      }\n\n      setBattlefinished(battlefinished);\n    });\n    return () => {\n      mounted = false;\n    };\n  }, [dh, battleId, player1, account]);\n  const data = {\n    usercharacter: usercharacter,\n    player1: player1,\n    player2: player2,\n    battlestarted: battlestarted,\n    battlefinished: battlefinished\n  };\n  return data;\n};\n\n_s(useMyTicket, \"2H0Ji/lA+dXk08A6YRpCWxCEvoM=\", false, function () {\n  return [useDiamondHand, useWeb3React];\n});\n\nexport default useMyTicket;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/Peepoquest/src/hooks/useTest.ts"],"names":["useEffect","useState","useWeb3React","useDiamondHand","useMyTicket","battleId","dh","usercharacter","setMyChar","player1","setPlayer1","player2","setPlayer2","vitalPoints1","setvitalPoints1","vitalPoints2","setvitalPoints2","atackForce1","setAtackForce1","atackForce2","setAtackForce2","battlestarted","setBattlestarted","battlefinished","setBattlefinished","account","mounted","NFT","UserCharacter","then","getPlayer1","getPlayer2","BattleStarted","BattleEnded","data"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { useWeb3React } from '@web3-react/core';\nimport useDiamondHand from './useDiamondHand';\n\nconst useMyTicket = (battleId: BigNumber) => {\n  const dh = useDiamondHand();\n  const [usercharacter, setMyChar] = useState<number>();\n  const [player1, setPlayer1] = useState<string>();\n  const [player2, setPlayer2] = useState<string>();\n  const [vitalPoints1, setvitalPoints1] = useState<BigNumber>();\n  const [vitalPoints2, setvitalPoints2] = useState<BigNumber>();\n  const [atackForce1, setAtackForce1] = useState<BigNumber>();\n  const [atackForce2, setAtackForce2] = useState<BigNumber>();\n  const [battlestarted, setBattlestarted] = useState<boolean>();\n  const [battlefinished, setBattlefinished] = useState<boolean>();\n  const { account } = useWeb3React();\n\n  useEffect(() => {\n    let mounted = true;\n    if (!dh || !account || !battleId) {\n      return;\n    }\n    setMyChar(0);\n    dh.NFT.UserCharacter(account).then((usercharacter) => {\n      if (!mounted) {\n        return;\n      }\n      setMyChar(usercharacter);\n    });\n\n    dh.NFT.getPlayer1(battleId).then((player1) => {\n      if (!mounted) {\n        return;\n      }\n      setPlayer1(player1);\n    });\n    dh.NFT.getPlayer2(battleId).then((player2) => {\n      if (!mounted) {\n        return;\n      }\n      setPlayer2(player2);\n    });\n    dh.NFT.BattleStarted(battleId).then((battlestarted) => {\n      if (!mounted) {\n        return;\n      }\n      setBattlestarted(battlestarted);\n    });\n    dh.NFT.BattleEnded(battleId).then((battlefinished) => {\n      if (!mounted) {\n        return;\n      }\n      setBattlefinished(battlefinished);\n    });\n\n    return () => {\n      mounted = false;\n    };\n  }, [dh, battleId, player1, account]);\n  const data = {\n    usercharacter: usercharacter,\n    player1: player1,\n    player2: player2,\n    battlestarted: battlestarted,\n    battlefinished: battlefinished,\n  };\n  return data;\n};\n\nexport default useMyTicket;\n"]},"metadata":{},"sourceType":"module"}