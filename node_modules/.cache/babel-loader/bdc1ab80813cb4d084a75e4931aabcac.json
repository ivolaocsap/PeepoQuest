{"ast":null,"code":"import format from'date-fns/format';import fromUnixTime from'date-fns/fromUnixTime';export var pad=function pad(num){return('0'+num).slice(-2);};export var hhmmss=function hhmmss(secs){var minutes=Math.floor(secs/60);secs=secs%60;var hours=Math.floor(minutes/60);minutes=minutes%60;return\"\".concat(pad(hours),\":\").concat(pad(minutes),\":\").concat(pad(secs));};export var formatSecs=function formatSecs(secs,formatter){if(!secs){return;}return format(fromUnixTime(secs),formatter?formatter:'dd/MM/yyyy HH:mm:ss');};","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/cuffies/src/utils/formatTime.ts"],"names":["format","fromUnixTime","pad","num","slice","hhmmss","secs","minutes","Math","floor","hours","formatSecs","formatter"],"mappings":"AAAA,MAAOA,CAAAA,MAAP,KAAmB,iBAAnB,CACA,MAAOC,CAAAA,YAAP,KAAyB,uBAAzB,CAEA,MAAO,IAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,CAACC,GAAD,CAAiB,CAClC,MAAO,CAAC,IAAMA,GAAP,EAAYC,KAAZ,CAAkB,CAAC,CAAnB,CAAP,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,IAAD,CAAkB,CACtC,GAAIC,CAAAA,OAAO,CAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAAG,EAAlB,CAAd,CACAA,IAAI,CAAGA,IAAI,CAAG,EAAd,CACA,GAAMI,CAAAA,KAAK,CAAGF,IAAI,CAACC,KAAL,CAAWF,OAAO,CAAG,EAArB,CAAd,CACAA,OAAO,CAAGA,OAAO,CAAG,EAApB,CACA,gBAAUL,GAAG,CAACQ,KAAD,CAAb,aAAwBR,GAAG,CAACK,OAAD,CAA3B,aAAwCL,GAAG,CAACI,IAAD,CAA3C,EACD,CANM,CAQP,MAAO,IAAMK,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACL,IAAD,CAAeM,SAAf,CAAsC,CAC9D,GAAI,CAACN,IAAL,CAAW,CACT,OACD,CACD,MAAON,CAAAA,MAAM,CAACC,YAAY,CAACK,IAAD,CAAb,CAAqBM,SAAS,CAAGA,SAAH,CAAe,qBAA7C,CAAb,CACD,CALM","sourcesContent":["import format from 'date-fns/format';\nimport fromUnixTime from 'date-fns/fromUnixTime';\n\nexport const pad = (num: number) => {\n  return ('0' + num).slice(-2);\n};\n\nexport const hhmmss = (secs: number) => {\n  let minutes = Math.floor(secs / 60);\n  secs = secs % 60;\n  const hours = Math.floor(minutes / 60);\n  minutes = minutes % 60;\n  return `${pad(hours)}:${pad(minutes)}:${pad(secs)}`;\n};\n\nexport const formatSecs = (secs: number, formatter?: string) => {\n  if (!secs) {\n    return;\n  }\n  return format(fromUnixTime(secs), formatter ? formatter : 'dd/MM/yyyy HH:mm:ss');\n};\n"]},"metadata":{},"sourceType":"module"}