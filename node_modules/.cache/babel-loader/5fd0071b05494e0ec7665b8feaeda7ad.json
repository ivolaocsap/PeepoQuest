{"ast":null,"code":"import { ContractWrapper } from './ContractWrapper';\nexport class Nft extends ContractWrapper {\n  constructor(abi, address, signer) {\n    super(abi, address, signer);\n  }\n\n  async mint(user, Id, _value) {\n    return await this.contract.mint(user, Id, _value);\n  }\n\n  async player1join(Id) {\n    return await this.contract.player1join(Id);\n  }\n\n  async player2join(Id) {\n    return await this.contract.player2join(Id);\n  }\n\n  async startbattle(Id) {\n    return await this.contract.startbattle(Id);\n  }\n\n  async player1atack(Id) {\n    return await this.contract.player1atack(Id);\n  }\n\n  async player2atack(Id) {\n    return await this.contract.player2atack(Id);\n  }\n\n  async UserCharacter(user) {\n    return await this.contract.UserCharacter(user);\n  }\n\n  async getBattleid() {\n    return await this.contract.currBattle_id();\n  }\n\n  async BattleStarted(id) {\n    return await this.contract.btl_HasStarted(id);\n  }\n\n  async BattleEnded(id) {\n    return await this.contract.btl_HasFinished(id);\n  }\n\n  async getPlayer1(id) {\n    return await this.contract.player1(id);\n  }\n\n  async getPlayer2(id) {\n    return await this.contract.player2(id);\n  }\n\n  async playerVital(id, player) {\n    return await this.contract.playerVital(id, player);\n  }\n\n  async playerAtack(id, atacker, defenser) {\n    return await this.contract.atackCalculator(id, atacker, defenser);\n  }\n\n}","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/Peepoquest/src/diamondhand/Nft.ts"],"names":["ContractWrapper","Nft","constructor","abi","address","signer","mint","user","Id","_value","contract","player1join","player2join","startbattle","player1atack","player2atack","UserCharacter","getBattleid","currBattle_id","BattleStarted","id","btl_HasStarted","BattleEnded","btl_HasFinished","getPlayer1","player1","getPlayer2","player2","playerVital","player","playerAtack","atacker","defenser","atackCalculator"],"mappings":"AAGA,SAASA,eAAT,QAAgC,mBAAhC;AAEA,OAAO,MAAMC,GAAN,SAAkBD,eAAlB,CAAkC;AACvCE,EAAAA,WAAW,CAACC,GAAD,EAAaC,OAAb,EAA8BC,MAA9B,EAAyD;AAClE,UAAMF,GAAN,EAAWC,OAAX,EAAoBC,MAApB;AACD;;AAES,QAAJC,IAAI,CAACC,IAAD,EAAeC,EAAf,EAA2BC,MAA3B,EAA8C;AACtD,WAAO,MAAM,KAAKC,QAAL,CAAcJ,IAAd,CAAmBC,IAAnB,EAAyBC,EAAzB,EAA6BC,MAA7B,CAAb;AACD;;AACgB,QAAXE,WAAW,CAACH,EAAD,EAAgB;AAC/B,WAAO,MAAM,KAAKE,QAAL,CAAcC,WAAd,CAA0BH,EAA1B,CAAb;AACD;;AACgB,QAAXI,WAAW,CAACJ,EAAD,EAAgB;AAC/B,WAAO,MAAM,KAAKE,QAAL,CAAcE,WAAd,CAA0BJ,EAA1B,CAAb;AACD;;AACgB,QAAXK,WAAW,CAACL,EAAD,EAAgB;AAC/B,WAAO,MAAM,KAAKE,QAAL,CAAcG,WAAd,CAA0BL,EAA1B,CAAb;AACD;;AACiB,QAAZM,YAAY,CAACN,EAAD,EAAgB;AAChC,WAAO,MAAM,KAAKE,QAAL,CAAcI,YAAd,CAA2BN,EAA3B,CAAb;AACD;;AACiB,QAAZO,YAAY,CAACP,EAAD,EAAgB;AAChC,WAAO,MAAM,KAAKE,QAAL,CAAcK,YAAd,CAA2BP,EAA3B,CAAb;AACD;;AAEkB,QAAbQ,aAAa,CAACT,IAAD,EAAgC;AACjD,WAAO,MAAM,KAAKG,QAAL,CAAcM,aAAd,CAA4BT,IAA5B,CAAb;AACD;;AACgB,QAAXU,WAAW,GAAuB;AACtC,WAAO,MAAM,KAAKP,QAAL,CAAcQ,aAAd,EAAb;AACD;;AACkB,QAAbC,aAAa,CAACC,EAAD,EAAkC;AACnD,WAAO,MAAM,KAAKV,QAAL,CAAcW,cAAd,CAA6BD,EAA7B,CAAb;AACD;;AACgB,QAAXE,WAAW,CAACF,EAAD,EAAkC;AACjD,WAAO,MAAM,KAAKV,QAAL,CAAca,eAAd,CAA8BH,EAA9B,CAAb;AACD;;AACe,QAAVI,UAAU,CAACJ,EAAD,EAAiC;AAC/C,WAAO,MAAM,KAAKV,QAAL,CAAce,OAAd,CAAsBL,EAAtB,CAAb;AACD;;AACe,QAAVM,UAAU,CAACN,EAAD,EAAiC;AAC/C,WAAO,MAAM,KAAKV,QAAL,CAAciB,OAAd,CAAsBP,EAAtB,CAAb;AACD;;AACgB,QAAXQ,WAAW,CAACR,EAAD,EAAgBS,MAAhB,EAAoD;AACnE,WAAO,MAAM,KAAKnB,QAAL,CAAckB,WAAd,CAA0BR,EAA1B,EAA8BS,MAA9B,CAAb;AACD;;AACgB,QAAXC,WAAW,CAACV,EAAD,EAAgBW,OAAhB,EAAiCC,QAAjC,EAAuE;AACtF,WAAO,MAAM,KAAKtB,QAAL,CAAcuB,eAAd,CAA8Bb,EAA9B,EAAkCW,OAAlC,EAA2CC,QAA3C,CAAb;AACD;;AA/CsC","sourcesContent":["import { Provider } from '@ethersproject/abstract-provider';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { ContractWrapper } from './ContractWrapper';\n\nexport class Nft extends ContractWrapper {\n  constructor(abi: any[], address: string, signer: Signer | Provider) {\n    super(abi, address, signer);\n  }\n\n  async mint(user: string, Id: number, _value: BigNumber) {\n    return await this.contract.mint(user, Id, _value);\n  }\n  async player1join(Id: BigNumber) {\n    return await this.contract.player1join(Id);\n  }\n  async player2join(Id: BigNumber) {\n    return await this.contract.player2join(Id);\n  }\n  async startbattle(Id: BigNumber) {\n    return await this.contract.startbattle(Id);\n  }\n  async player1atack(Id: BigNumber) {\n    return await this.contract.player1atack(Id);\n  }\n  async player2atack(Id: BigNumber) {\n    return await this.contract.player2atack(Id);\n  }\n\n  async UserCharacter(user: string): Promise<number> {\n    return await this.contract.UserCharacter(user);\n  }\n  async getBattleid(): Promise<BigNumber> {\n    return await this.contract.currBattle_id();\n  }\n  async BattleStarted(id: BigNumber): Promise<boolean> {\n    return await this.contract.btl_HasStarted(id);\n  }\n  async BattleEnded(id: BigNumber): Promise<boolean> {\n    return await this.contract.btl_HasFinished(id);\n  }\n  async getPlayer1(id: BigNumber): Promise<string> {\n    return await this.contract.player1(id);\n  }\n  async getPlayer2(id: BigNumber): Promise<string> {\n    return await this.contract.player2(id);\n  }\n  async playerVital(id: BigNumber, player: string): Promise<BigNumber> {\n    return await this.contract.playerVital(id, player);\n  }\n  async playerAtack(id: BigNumber, atacker: string, defenser: string): Promise<BigNumber> {\n    return await this.contract.atackCalculator(id, atacker, defenser);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}