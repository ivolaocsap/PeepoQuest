{"ast":null,"code":"\"use strict\";\n/* Sourced from 0x.js */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"@0xproject/utils\");\n\nvar BN = require(\"bn.js\");\n\nvar ethABI = require(\"ethereumjs-abi\");\n\nvar ethUtil = require(\"ethereumjs-util\");\n\nvar _ = require(\"lodash\");\n\nvar types_1 = require(\"../types\");\n\nexports.utils = {\n  /**\n   * Converts BigNumber instance to BN\n   * The only reason we convert to BN is to remain compatible with `ethABI. soliditySHA3` that\n   * expects values of Solidity type `uint` to be passed as type `BN`.\n   * We do not use BN anywhere else in the codebase.\n   */\n  bigNumberToBN: function (value) {\n    return new BN(value.toString(), 10);\n  },\n  consoleLog: function (message) {\n    // tslint:disable-next-line: no-console\n    console.log(message);\n  },\n  isParityNode: function (nodeVersion) {\n    return _.includes(nodeVersion, 'Parity');\n  },\n  isTestRpc: function (nodeVersion) {\n    return _.includes(nodeVersion, 'TestRPC');\n  },\n  spawnSwitchErr: function (name, value) {\n    return new Error(\"Unexpected switch value: \" + value + \" encountered for \" + name);\n  },\n  getAssetHashHex: function (assetHash, schema) {\n    var concat = schema + ':' + assetHash;\n    var hashBuf = ethABI.soliditySHA3(['string'], [concat]);\n    return ethUtil.bufferToHex(hashBuf);\n  },\n  getOrderHashHex: function (order) {\n    var orderParts = [{\n      value: order.exchange,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: order.maker,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: order.taker,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: exports.utils.bigNumberToBN(order.makerRelayerFee),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.takerRelayerFee),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.makerProtocolFee),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.takerProtocolFee),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: order.feeRecipient,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: order.feeMethod,\n      type: types_1.SolidityTypes.Uint8\n    }, {\n      value: order.side,\n      type: types_1.SolidityTypes.Uint8\n    }, {\n      value: order.saleKind,\n      type: types_1.SolidityTypes.Uint8\n    }, {\n      value: order.target,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: order.howToCall,\n      type: types_1.SolidityTypes.Uint8\n    }, {\n      value: new Buffer(order.calldata.slice(2), 'hex'),\n      type: types_1.SolidityTypes.Bytes\n    }, {\n      value: new Buffer(order.replacementPattern.slice(2), 'hex'),\n      type: types_1.SolidityTypes.Bytes\n    }, {\n      value: order.staticTarget,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: new Buffer(order.staticExtradata.slice(2), 'hex'),\n      type: types_1.SolidityTypes.Bytes\n    }, {\n      value: order.paymentToken,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: exports.utils.bigNumberToBN(order.basePrice),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.extra),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.listingTime),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.expirationTime),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.salt),\n      type: types_1.SolidityTypes.Uint256\n    }];\n\n    var types = _.map(orderParts, function (o) {\n      return o.type;\n    });\n\n    var values = _.map(orderParts, function (o) {\n      return o.value;\n    });\n\n    var hash = ethABI.soliditySHA3(types, values);\n    return ethUtil.bufferToHex(hash);\n  },\n  getCurrentUnixTimestampSec: function () {\n    return new utils_1.BigNumber(Date.now() / 1000).round();\n  },\n  getCurrentUnixTimestampMs: function () {\n    return new utils_1.BigNumber(Date.now());\n  }\n};","map":{"version":3,"sources":["../../src/utils/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/* Sourced from 0x.js */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"@0xproject/utils\");\nvar BN = require(\"bn.js\");\nvar ethABI = require(\"ethereumjs-abi\");\nvar ethUtil = require(\"ethereumjs-util\");\nvar _ = require(\"lodash\");\nvar types_1 = require(\"../types\");\nexports.utils = {\n    /**\n     * Converts BigNumber instance to BN\n     * The only reason we convert to BN is to remain compatible with `ethABI. soliditySHA3` that\n     * expects values of Solidity type `uint` to be passed as type `BN`.\n     * We do not use BN anywhere else in the codebase.\n     */\n    bigNumberToBN: function (value) {\n        return new BN(value.toString(), 10);\n    },\n    consoleLog: function (message) {\n        // tslint:disable-next-line: no-console\n        console.log(message);\n    },\n    isParityNode: function (nodeVersion) {\n        return _.includes(nodeVersion, 'Parity');\n    },\n    isTestRpc: function (nodeVersion) {\n        return _.includes(nodeVersion, 'TestRPC');\n    },\n    spawnSwitchErr: function (name, value) {\n        return new Error(\"Unexpected switch value: \" + value + \" encountered for \" + name);\n    },\n    getAssetHashHex: function (assetHash, schema) {\n        var concat = schema + ':' + assetHash;\n        var hashBuf = ethABI.soliditySHA3(['string'], [concat]);\n        return ethUtil.bufferToHex(hashBuf);\n    },\n    getOrderHashHex: function (order) {\n        var orderParts = [\n            { value: order.exchange, type: types_1.SolidityTypes.Address },\n            { value: order.maker, type: types_1.SolidityTypes.Address },\n            { value: order.taker, type: types_1.SolidityTypes.Address },\n            { value: exports.utils.bigNumberToBN(order.makerRelayerFee), type: types_1.SolidityTypes.Uint256 },\n            { value: exports.utils.bigNumberToBN(order.takerRelayerFee), type: types_1.SolidityTypes.Uint256 },\n            { value: exports.utils.bigNumberToBN(order.makerProtocolFee), type: types_1.SolidityTypes.Uint256 },\n            { value: exports.utils.bigNumberToBN(order.takerProtocolFee), type: types_1.SolidityTypes.Uint256 },\n            { value: order.feeRecipient, type: types_1.SolidityTypes.Address },\n            { value: order.feeMethod, type: types_1.SolidityTypes.Uint8 },\n            { value: order.side, type: types_1.SolidityTypes.Uint8 },\n            { value: order.saleKind, type: types_1.SolidityTypes.Uint8 },\n            { value: order.target, type: types_1.SolidityTypes.Address },\n            { value: order.howToCall, type: types_1.SolidityTypes.Uint8 },\n            { value: new Buffer(order.calldata.slice(2), 'hex'), type: types_1.SolidityTypes.Bytes },\n            { value: new Buffer(order.replacementPattern.slice(2), 'hex'), type: types_1.SolidityTypes.Bytes },\n            { value: order.staticTarget, type: types_1.SolidityTypes.Address },\n            { value: new Buffer(order.staticExtradata.slice(2), 'hex'), type: types_1.SolidityTypes.Bytes },\n            { value: order.paymentToken, type: types_1.SolidityTypes.Address },\n            { value: exports.utils.bigNumberToBN(order.basePrice), type: types_1.SolidityTypes.Uint256 },\n            { value: exports.utils.bigNumberToBN(order.extra), type: types_1.SolidityTypes.Uint256 },\n            { value: exports.utils.bigNumberToBN(order.listingTime), type: types_1.SolidityTypes.Uint256 },\n            { value: exports.utils.bigNumberToBN(order.expirationTime), type: types_1.SolidityTypes.Uint256 },\n            { value: exports.utils.bigNumberToBN(order.salt), type: types_1.SolidityTypes.Uint256 },\n        ];\n        var types = _.map(orderParts, function (o) { return o.type; });\n        var values = _.map(orderParts, function (o) { return o.value; });\n        var hash = ethABI.soliditySHA3(types, values);\n        return ethUtil.bufferToHex(hash);\n    },\n    getCurrentUnixTimestampSec: function () {\n        return new utils_1.BigNumber(Date.now() / 1000).round();\n    },\n    getCurrentUnixTimestampMs: function () {\n        return new utils_1.BigNumber(Date.now());\n    },\n};\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}