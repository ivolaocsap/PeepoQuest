{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@0xproject/utils\");\n\nconst ethABI = require(\"ethereumjs-abi\");\n\nconst wyvern_js_1 = require(\"wyvern-js\");\n\nconst types_1 = require(\"./types\");\n\nconst failWith = msg => {\n  throw new Error(msg);\n};\n\nexports.encodeReplacementPattern = wyvern_js_1.WyvernProtocol.encodeReplacementPattern;\n\nexports.encodeCall = (abi, parameters) => {\n  const inputTypes = abi.inputs.map(i => i.type);\n  return '0x' + Buffer.concat([ethABI.methodID(abi.name, inputTypes), ethABI.rawEncode(inputTypes, parameters)]).toString('hex');\n};\n\nexports.encodeSell = (schema, asset, address) => {\n  const transfer = schema.functions.transfer(asset);\n  return {\n    target: transfer.target,\n    calldata: exports.encodeDefaultCall(transfer, address),\n    replacementPattern: exports.encodeReplacementPattern(transfer)\n  };\n};\n\nexports.encodeAtomicizedSell = (schema, assets, address, atomicizer) => {\n  const transactions = assets.map(asset => {\n    const {\n      target,\n      calldata\n    } = exports.encodeSell(schema, asset, address);\n    return {\n      calldata,\n      abi: schema.functions.transfer(asset),\n      address: target,\n      value: new utils_1.BigNumber(0)\n    };\n  });\n  const atomicizedCalldata = atomicizer.atomicize.getABIEncodedTransactionData(transactions.map(t => t.address), transactions.map(t => t.value), transactions.map(t => new utils_1.BigNumber((t.calldata.length - 2) / 2)), // subtract 2 for '0x', divide by 2 for hex\n  transactions.map(t => t.calldata).reduce((x, y) => x + y.slice(2)));\n  const atomicizedReplacementPattern = wyvern_js_1.WyvernProtocol.encodeAtomicizedReplacementPattern(transactions.map(t => t.abi));\n  return {\n    calldata: atomicizedCalldata,\n    replacementPattern: atomicizedReplacementPattern\n  };\n};\n\nexports.encodeAtomicizedBuy = (schema, assets, address, atomicizer) => {\n  const transactions = assets.map(asset => {\n    const {\n      target,\n      calldata\n    } = exports.encodeBuy(schema, asset, address);\n    return {\n      calldata,\n      abi: schema.functions.transfer(asset),\n      address: target,\n      value: new utils_1.BigNumber(0)\n    };\n  });\n  const atomicizedCalldata = atomicizer.atomicize.getABIEncodedTransactionData(transactions.map(t => t.address), transactions.map(t => t.value), transactions.map(t => new utils_1.BigNumber((t.calldata.length - 2) / 2)), // subtract 2 for '0x', divide by 2 for hex\n  transactions.map(t => t.calldata).reduce((x, y) => x + y.slice(2)));\n  const atomicizedReplacementPattern = wyvern_js_1.WyvernProtocol.encodeAtomicizedReplacementPattern(transactions.map(t => t.abi), types_1.FunctionInputKind.Owner);\n  return {\n    calldata: atomicizedCalldata,\n    replacementPattern: atomicizedReplacementPattern\n  };\n};\n\nexports.encodeBuy = (schema, asset, address) => {\n  const transfer = schema.functions.transfer(asset);\n  const replaceables = transfer.inputs.filter(i => i.kind === types_1.FunctionInputKind.Replaceable);\n  const ownerInputs = transfer.inputs.filter(i => i.kind === types_1.FunctionInputKind.Owner); // Validate\n\n  if (replaceables.length !== 1) {\n    failWith('Only 1 input can match transfer destination, but instead ' + replaceables.length + ' did');\n  } // Compute calldata\n\n\n  const parameters = transfer.inputs.map(input => {\n    switch (input.kind) {\n      case types_1.FunctionInputKind.Replaceable:\n        return address;\n\n      case types_1.FunctionInputKind.Owner:\n        return wyvern_js_1.WyvernProtocol.generateDefaultValue(input.type);\n\n      default:\n        return input.value.toString();\n    }\n  });\n  const calldata = exports.encodeCall(transfer, parameters); // Compute replacement pattern\n\n  let replacementPattern = '0x';\n\n  if (ownerInputs.length > 0) {\n    replacementPattern = exports.encodeReplacementPattern(transfer, types_1.FunctionInputKind.Owner);\n  }\n\n  return {\n    target: transfer.target,\n    calldata,\n    replacementPattern\n  };\n};\n\nexports.encodeDefaultCall = (abi, address) => {\n  const parameters = abi.inputs.map(input => {\n    switch (input.kind) {\n      case types_1.FunctionInputKind.Replaceable:\n        return wyvern_js_1.WyvernProtocol.generateDefaultValue(input.type);\n\n      case types_1.FunctionInputKind.Owner:\n        return address;\n\n      case types_1.FunctionInputKind.Asset:\n      default:\n        return input.value;\n    }\n  });\n  return exports.encodeCall(abi, parameters);\n};","map":{"version":3,"sources":["../src/schemaFunctions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@0xproject/utils\");\nconst ethABI = require(\"ethereumjs-abi\");\nconst wyvern_js_1 = require(\"wyvern-js\");\nconst types_1 = require(\"./types\");\nconst failWith = (msg) => {\n    throw new Error(msg);\n};\nexports.encodeReplacementPattern = wyvern_js_1.WyvernProtocol.encodeReplacementPattern;\nexports.encodeCall = (abi, parameters) => {\n    const inputTypes = abi.inputs.map(i => i.type);\n    return '0x' + Buffer.concat([\n        ethABI.methodID(abi.name, inputTypes),\n        ethABI.rawEncode(inputTypes, parameters),\n    ]).toString('hex');\n};\nexports.encodeSell = (schema, asset, address) => {\n    const transfer = schema.functions.transfer(asset);\n    return {\n        target: transfer.target,\n        calldata: exports.encodeDefaultCall(transfer, address),\n        replacementPattern: exports.encodeReplacementPattern(transfer),\n    };\n};\nexports.encodeAtomicizedSell = (schema, assets, address, atomicizer) => {\n    const transactions = assets.map(asset => {\n        const { target, calldata } = exports.encodeSell(schema, asset, address);\n        return {\n            calldata,\n            abi: schema.functions.transfer(asset),\n            address: target,\n            value: new utils_1.BigNumber(0),\n        };\n    });\n    const atomicizedCalldata = atomicizer.atomicize.getABIEncodedTransactionData(transactions.map(t => t.address), transactions.map(t => t.value), transactions.map(t => new utils_1.BigNumber((t.calldata.length - 2) / 2)), // subtract 2 for '0x', divide by 2 for hex\n    transactions.map(t => t.calldata).reduce((x, y) => x + y.slice(2)));\n    const atomicizedReplacementPattern = wyvern_js_1.WyvernProtocol.encodeAtomicizedReplacementPattern(transactions.map(t => t.abi));\n    return {\n        calldata: atomicizedCalldata,\n        replacementPattern: atomicizedReplacementPattern,\n    };\n};\nexports.encodeAtomicizedBuy = (schema, assets, address, atomicizer) => {\n    const transactions = assets.map(asset => {\n        const { target, calldata } = exports.encodeBuy(schema, asset, address);\n        return {\n            calldata,\n            abi: schema.functions.transfer(asset),\n            address: target,\n            value: new utils_1.BigNumber(0),\n        };\n    });\n    const atomicizedCalldata = atomicizer.atomicize.getABIEncodedTransactionData(transactions.map(t => t.address), transactions.map(t => t.value), transactions.map(t => new utils_1.BigNumber((t.calldata.length - 2) / 2)), // subtract 2 for '0x', divide by 2 for hex\n    transactions.map(t => t.calldata).reduce((x, y) => x + y.slice(2)));\n    const atomicizedReplacementPattern = wyvern_js_1.WyvernProtocol.encodeAtomicizedReplacementPattern(transactions.map(t => t.abi), types_1.FunctionInputKind.Owner);\n    return {\n        calldata: atomicizedCalldata,\n        replacementPattern: atomicizedReplacementPattern,\n    };\n};\nexports.encodeBuy = (schema, asset, address) => {\n    const transfer = schema.functions.transfer(asset);\n    const replaceables = transfer.inputs.filter((i) => i.kind === types_1.FunctionInputKind.Replaceable);\n    const ownerInputs = transfer.inputs.filter((i) => i.kind === types_1.FunctionInputKind.Owner);\n    // Validate\n    if (replaceables.length !== 1) {\n        failWith('Only 1 input can match transfer destination, but instead ' + replaceables.length + ' did');\n    }\n    // Compute calldata\n    const parameters = transfer.inputs.map((input) => {\n        switch (input.kind) {\n            case types_1.FunctionInputKind.Replaceable:\n                return address;\n            case types_1.FunctionInputKind.Owner:\n                return wyvern_js_1.WyvernProtocol.generateDefaultValue(input.type);\n            default:\n                return input.value.toString();\n        }\n    });\n    const calldata = exports.encodeCall(transfer, parameters);\n    // Compute replacement pattern\n    let replacementPattern = '0x';\n    if (ownerInputs.length > 0) {\n        replacementPattern = exports.encodeReplacementPattern(transfer, types_1.FunctionInputKind.Owner);\n    }\n    return {\n        target: transfer.target,\n        calldata,\n        replacementPattern,\n    };\n};\nexports.encodeDefaultCall = (abi, address) => {\n    const parameters = abi.inputs.map(input => {\n        switch (input.kind) {\n            case types_1.FunctionInputKind.Replaceable:\n                return wyvern_js_1.WyvernProtocol.generateDefaultValue(input.type);\n            case types_1.FunctionInputKind.Owner:\n                return address;\n            case types_1.FunctionInputKind.Asset:\n            default:\n                return input.value;\n        }\n    });\n    return exports.encodeCall(abi, parameters);\n};\n//# sourceMappingURL=schemaFunctions.js.map"]},"metadata":{},"sourceType":"script"}