{"ast":null,"code":"import _slicedToArray from\"/Users/ivopascoal/Desktop/cuffies/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useCallback,useEffect,useState}from'react';import useDiamondHand from'src/hooks/useDiamondHand';var useTicketClaim=function useTicketClaim(ticketIds){var dh=useDiamondHand();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isCanClaimReward=_useState2[0],setIsCanClaimReward=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),claimStatuses=_useState4[0],setClaimStatuses=_useState4[1];var getTicketClaimStatus=useCallback(function(){var _dh$TICKET;if(!dh||!ticketIds)return;dh===null||dh===void 0?void 0:(_dh$TICKET=dh.TICKET)===null||_dh$TICKET===void 0?void 0:_dh$TICKET.getTicketClaimStatuses(ticketIds).then(function(ticketStatuses){var _ticketStatuses$map;var statuses=ticketIds===null||ticketIds===void 0?void 0:ticketIds.map(function(t,index){var _ticketStatuses$index;return{id:t,claimed:(_ticketStatuses$index=ticketStatuses[index])===null||_ticketStatuses$index===void 0?void 0:_ticketStatuses$index.claimed};});setClaimStatuses(statuses);setIsCanClaimReward(ticketStatuses===null||ticketStatuses===void 0?void 0:(_ticketStatuses$map=ticketStatuses.map(function(s){return s===null||s===void 0?void 0:s.claimed;}))===null||_ticketStatuses$map===void 0?void 0:_ticketStatuses$map.includes(false));});},[dh,ticketIds]);useEffect(function(){getTicketClaimStatus();},[getTicketClaimStatus]);return{isCanClaimReward:isCanClaimReward,claimStatuses:claimStatuses,getTicketClaimStatus:getTicketClaimStatus};};export default useTicketClaim;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/cuffies/src/views/TicketDetail/hooks/useTicketClaim.ts"],"names":["useCallback","useEffect","useState","useDiamondHand","useTicketClaim","ticketIds","dh","isCanClaimReward","setIsCanClaimReward","claimStatuses","setClaimStatuses","getTicketClaimStatus","TICKET","getTicketClaimStatuses","then","ticketStatuses","statuses","map","t","index","id","claimed","s","includes"],"mappings":"wJACA,OAASA,WAAT,CAAsBC,SAAtB,CAAiCC,QAAjC,KAAiD,OAAjD,CACA,MAAOC,CAAAA,cAAP,KAA2B,0BAA3B,CAMA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,SAAD,CAA4B,CACjD,GAAMC,CAAAA,EAAE,CAAGH,cAAc,EAAzB,CACA,cAAgDD,QAAQ,CAAU,KAAV,CAAxD,wCAAOK,gBAAP,eAAyBC,mBAAzB,eACA,eAA0CN,QAAQ,CAAsB,EAAtB,CAAlD,yCAAOO,aAAP,eAAsBC,gBAAtB,eAEA,GAAMC,CAAAA,oBAAoB,CAAGX,WAAW,CAAC,UAAM,gBAC7C,GAAI,CAACM,EAAD,EAAO,CAACD,SAAZ,CAAuB,OACvBC,EAAE,OAAF,EAAAA,EAAE,SAAF,oBAAAA,EAAE,CAAEM,MAAJ,gDAAYC,sBAAZ,CAAmCR,SAAnC,EAA8CS,IAA9C,CAAmD,SAACC,cAAD,CAA2B,yBAC5E,GAAMC,CAAAA,QAAQ,CAAGX,SAAH,SAAGA,SAAH,iBAAGA,SAAS,CAAEY,GAAX,CAAe,SAACC,CAAD,CAAIC,KAAJ,CAAc,2BAC5C,MAAO,CACLC,EAAE,CAAEF,CADC,CAELG,OAAO,wBAAEN,cAAc,CAACI,KAAD,CAAhB,gDAAE,sBAAuBE,OAF3B,CAAP,CAID,CALgB,CAAjB,CAMAX,gBAAgB,CAACM,QAAD,CAAhB,CACAR,mBAAmB,CAACO,cAAD,SAACA,cAAD,sCAACA,cAAc,CAAEE,GAAhB,CAAoB,SAACK,CAAD,QAAOA,CAAAA,CAAP,SAAOA,CAAP,iBAAOA,CAAC,CAAED,OAAV,EAApB,CAAD,8CAAC,oBAAwCE,QAAxC,CAAiD,KAAjD,CAAD,CAAnB,CACD,CATD,EAUD,CAZuC,CAYrC,CAACjB,EAAD,CAAKD,SAAL,CAZqC,CAAxC,CAcAJ,SAAS,CAAC,UAAM,CACdU,oBAAoB,GACrB,CAFQ,CAEN,CAACA,oBAAD,CAFM,CAAT,CAIA,MAAO,CAAEJ,gBAAgB,CAAhBA,gBAAF,CAAoBE,aAAa,CAAbA,aAApB,CAAmCE,oBAAoB,CAApBA,oBAAnC,CAAP,CACD,CAxBD,CA0BA,cAAeP,CAAAA,cAAf","sourcesContent":["import { BigNumber } from 'ethers';\nimport { useCallback, useEffect, useState } from 'react';\nimport useDiamondHand from 'src/hooks/useDiamondHand';\n\ntype TicketClaimStatus = {\n  id: BigNumber;\n  claimed: boolean;\n};\nconst useTicketClaim = (ticketIds: BigNumber[]) => {\n  const dh = useDiamondHand();\n  const [isCanClaimReward, setIsCanClaimReward] = useState<boolean>(false);\n  const [claimStatuses, setClaimStatuses] = useState<TicketClaimStatus[]>([]);\n\n  const getTicketClaimStatus = useCallback(() => {\n    if (!dh || !ticketIds) return;\n    dh?.TICKET?.getTicketClaimStatuses(ticketIds).then((ticketStatuses: any[]) => {\n      const statuses = ticketIds?.map((t, index) => {\n        return {\n          id: t,\n          claimed: ticketStatuses[index]?.claimed,\n        };\n      });\n      setClaimStatuses(statuses);\n      setIsCanClaimReward(ticketStatuses?.map((s) => s?.claimed)?.includes(false));\n    });\n  }, [dh, ticketIds]);\n\n  useEffect(() => {\n    getTicketClaimStatus();\n  }, [getTicketClaimStatus]);\n\n  return { isCanClaimReward, claimStatuses, getTicketClaimStatus };\n};\n\nexport default useTicketClaim;\n"]},"metadata":{},"sourceType":"module"}