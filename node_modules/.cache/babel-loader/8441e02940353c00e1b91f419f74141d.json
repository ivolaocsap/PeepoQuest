{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ivopascoal/Desktop/cuffies/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ivopascoal/Desktop/cuffies/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/ivopascoal/Desktop/cuffies/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/ivopascoal/Desktop/cuffies/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/ivopascoal/Desktop/cuffies/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/ivopascoal/Desktop/cuffies/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import{ContractWrapper}from'./ContractWrapper';export var Nft=/*#__PURE__*/function(_ContractWrapper){_inherits(Nft,_ContractWrapper);var _super=_createSuper(Nft);function Nft(abi,address,signer){_classCallCheck(this,Nft);return _super.call(this,abi,address,signer);}_createClass(Nft,[{key:\"getNftInfo\",value:function(){var _getNftInfo=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(NftId){var nftinfo;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return this.contract.getNftData(NftId);case 2:nftinfo=_context.sent;if(nftinfo){_context.next=5;break;}return _context.abrupt(\"return\",{});case 5:return _context.abrupt(\"return\",{info:{uri:nftinfo[0],description:nftinfo[1],mintable:nftinfo[2],purchaseTokenID:nftinfo[3].toNumber(),purchaseTokenAmount:nftinfo[4],mintCap:nftinfo[5].toNumber(),numberMinted:nftinfo[6].toNumber(),admin:nftinfo[7]}});case 6:case\"end\":return _context.stop();}}},_callee,this);}));function getNftInfo(_x){return _getNftInfo.apply(this,arguments);}return getNftInfo;}()},{key:\"buynft\",value:function(){var _buynft=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(Id){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return this.contract.purchaseNft(Id);case 2:return _context2.abrupt(\"return\",_context2.sent);case 3:case\"end\":return _context2.stop();}}},_callee2,this);}));function buynft(_x2){return _buynft.apply(this,arguments);}return buynft;}()}]);return Nft;}(ContractWrapper);","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/cuffies/src/diamondhand/Nft.ts"],"names":["ContractWrapper","Nft","abi","address","signer","NftId","contract","getNftData","nftinfo","info","uri","description","mintable","purchaseTokenID","toNumber","purchaseTokenAmount","mintCap","numberMinted","admin","Id","purchaseNft"],"mappings":"63BAKA,OAASA,eAAT,KAAgC,mBAAhC,CAeA,UAAaC,CAAAA,GAAb,sGACE,aACEC,GADF,CAEEC,OAFF,CAGEC,MAHF,CAIE,mDACMF,GADN,CACWC,OADX,CACoBC,MADpB,EAED,CAPH,6HASE,iBAAiBC,KAAjB,oJACwB,MAAKC,QAAL,CAAcC,UAAd,CAAyBF,KAAzB,CADxB,QACQG,OADR,kBAIOA,OAJP,yDAKW,EALX,yCAUS,CACLC,IAAI,CAAE,CACJC,GAAG,CAAEF,OAAO,CAAC,CAAD,CADR,CAEJG,WAAW,CAAEH,OAAO,CAAC,CAAD,CAFhB,CAGJI,QAAQ,CAAEJ,OAAO,CAAC,CAAD,CAHb,CAIJK,eAAe,CAAEL,OAAO,CAAC,CAAD,CAAP,CAAWM,QAAX,EAJb,CAKJC,mBAAmB,CAAEP,OAAO,CAAC,CAAD,CALxB,CAMJQ,OAAO,CAAER,OAAO,CAAC,CAAD,CAAP,CAAWM,QAAX,EANL,CAOJG,YAAY,CAAET,OAAO,CAAC,CAAD,CAAP,CAAWM,QAAX,EAPV,CAQJI,KAAK,CAAEV,OAAO,CAAC,CAAD,CARV,CADD,CAVT,6DATF,+LAqCE,kBAAaW,EAAb,6IACe,MAAKb,QAAL,CAAcc,WAAd,CAA0BD,EAA1B,CADf,sHArCF,gGAAyBnB,eAAzB","sourcesContent":["import { Provider } from '@ethersproject/abstract-provider';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Address } from 'cluster';\nimport fromUnixTime from 'date-fns/fromUnixTime';\nimport { ContractWrapper } from './ContractWrapper';\nimport { DiamondHand } from './DiamondHand';\n\nexport type NftInfo = {\n  info: {\n    uri: string;\n    description: string;\n    mintable: boolean;\n    purchaseTokenID: number;\n    purchaseTokenAmount: BigNumber;\n    mintCap: number;\n    numberMinted: number;\n    admin: Address;\n  };\n};\nexport class Nft extends ContractWrapper {\n  constructor(\n    abi: any[],\n    address: string,\n    signer: Signer | Provider,\n  ) {\n    super(abi, address, signer);\n  }\n\n  async getNftInfo(NftId: number) {\n    const nftinfo = await this.contract.getNftData(NftId);\n      \n\n    if (!nftinfo) {\n      return {} as NftInfo;\n    }\n\n    \n\n    return {\n      info: {\n        uri: nftinfo[0],\n        description: nftinfo[1],\n        mintable: nftinfo[2],\n        purchaseTokenID: nftinfo[3].toNumber(),\n        purchaseTokenAmount: nftinfo[4],\n        mintCap: nftinfo[5].toNumber(),\n        numberMinted: nftinfo[6].toNumber(),\n        admin: nftinfo[7]\n        \n      }\n    } as NftInfo;\n  }\n\n\n\n  \n  async buynft(Id: number) {\n    return await this.contract.purchaseNft(Id);\n  }\n\n\n\n  \n}\n\nexport type NFTinfo = {\n  \n    uri: string;\n    description:string;\n    mintable: boolean;\n    purchaseTokenID: BigNumber;\n    purchaseTokenAmount: BigNumber;\n    mintCap: BigNumber;\n    numberMinted: BigNumber;\n    admin: Address;\n  \n};\n\n\n"]},"metadata":{},"sourceType":"module"}