{"ast":null,"code":"import { formatUnits, parseUnits } from '@ethersproject/units';\nimport { BigNumber } from '@ethersproject/bignumber';\nexport const numberWithCommas = x => {\n  const parts = x.split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  return parts.join('.');\n};\nexport const getDisplayNumber = (value, decimals = 18, fractionDigits = 0, percentage = false, keepTrailingZeros = false, roundDown = false, keepCommas = true) => {\n  if (!value) {\n    return;\n  }\n\n  const a = formatUnits(value.toString(), decimals);\n  let b = percentage ? +a * 100 : +a;\n\n  if (roundDown) {\n    b = b - 5 / 10 ** (fractionDigits + 1);\n  }\n\n  let c = b.toFixed(fractionDigits);\n  c = keepCommas ? numberWithCommas(c) : c;\n  return keepTrailingZeros ? c : c.replace(/([0-9]+(\\.[0-9]+[1-9])?)(\\.?0+$)/, '$1');\n};\nexport const getDisplayAmount = (value, decimals = 18, fractionDigits = 0, keepTrailingZeros = true) => {\n  if (!value) {\n    return;\n  }\n\n  const a = formatUnits(value.toString(), decimals);\n  const c = (+a).toFixed(fractionDigits);\n  const converted = +(keepTrailingZeros ? c : c.replace(/([0-9]+(\\.[0-9]+[1-9])?)(\\.?0+$)/, '$1'));\n  let displayValue = '';\n  let displayUnit = '';\n\n  if (!isNaN(converted)) {\n    displayValue = converted.toFixed(fractionDigits);\n\n    if (converted >= 1e9) {\n      displayValue = `${(converted / 1e9).toFixed(fractionDigits)}`;\n      displayUnit = 'B';\n    } else if (converted >= 1e6) {\n      displayValue = `${(converted / 1e6).toFixed(fractionDigits)}`;\n      displayUnit = 'M';\n    } else if (converted >= 1e3) {\n      displayValue = `${(converted / 1e3).toFixed(fractionDigits)}`;\n      displayUnit = 'K';\n    }\n  }\n\n  return {\n    value: displayValue,\n    unit: displayUnit\n  };\n};\nexport const getFullDisplayNumber = (value, decimals = 18) => {\n  return getDisplayNumber(value, decimals);\n};\nexport function getNumber(value, decimals = 18) {\n  return value.div(BigNumber.from(10).pow(decimals)).toNumber();\n}\nexport const parseNumber = (value, decimals = 18, fractionDigits = 0) => {\n  if (value == null) {\n    return;\n  }\n\n  const convert = +(+value).toFixed(fractionDigits);\n  const numberVal = convert * 10 ** fractionDigits;\n  return parseUnits(numberVal.toString(), decimals - fractionDigits);\n};","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/BabyPepe/src/utils/formatBN.ts"],"names":["formatUnits","parseUnits","BigNumber","numberWithCommas","x","parts","split","replace","join","getDisplayNumber","value","decimals","fractionDigits","percentage","keepTrailingZeros","roundDown","keepCommas","a","toString","b","c","toFixed","getDisplayAmount","converted","displayValue","displayUnit","isNaN","unit","getFullDisplayNumber","getNumber","div","from","pow","toNumber","parseNumber","convert","numberVal"],"mappings":"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","sourcesContent":["import { formatUnits, parseUnits } from '@ethersproject/units';\nimport { BigNumber } from '@ethersproject/bignumber';\n\nexport const numberWithCommas = (x: string) => {\n  const parts = x.split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  return parts.join('.');\n};\n\nexport const getDisplayNumber = (\n  value: BigNumber,\n  decimals = 18,\n  fractionDigits = 0,\n  percentage = false,\n  keepTrailingZeros = false,\n  roundDown = false,\n  keepCommas = true,\n) => {\n  if (!value) {\n    return;\n  }\n  const a = formatUnits(value.toString(), decimals);\n  let b = percentage ? +a * 100 : +a;\n  if (roundDown) {\n    b = b - 5 / 10 ** (fractionDigits + 1);\n  }\n  let c = b.toFixed(fractionDigits);\n  c = keepCommas ? numberWithCommas(c) : c;\n  return keepTrailingZeros ? c : c.replace(/([0-9]+(\\.[0-9]+[1-9])?)(\\.?0+$)/, '$1');\n};\n\nexport const getDisplayAmount = (\n  value: BigNumber,\n  decimals = 18,\n  fractionDigits = 0,\n  keepTrailingZeros = true,\n) => {\n  if (!value) {\n    return;\n  }\n  const a = formatUnits(value.toString(), decimals);\n  const c = (+a).toFixed(fractionDigits);\n  const converted = +(keepTrailingZeros\n    ? c\n    : c.replace(/([0-9]+(\\.[0-9]+[1-9])?)(\\.?0+$)/, '$1'));\n  let displayValue = '';\n  let displayUnit = '';\n  if (!isNaN(converted)) {\n    displayValue = converted.toFixed(fractionDigits);\n    if (converted >= 1e9) {\n      displayValue = `${(converted / 1e9).toFixed(fractionDigits)}`;\n      displayUnit = 'B';\n    } else if (converted >= 1e6) {\n      displayValue = `${(converted / 1e6).toFixed(fractionDigits)}`;\n      displayUnit = 'M';\n    } else if (converted >= 1e3) {\n      displayValue = `${(converted / 1e3).toFixed(fractionDigits)}`;\n      displayUnit = 'K';\n    }\n  }\n  return { value: displayValue, unit: displayUnit };\n};\n\nexport const getFullDisplayNumber = (value: BigNumber, decimals = 18) => {\n  return getDisplayNumber(value, decimals);\n};\n\nexport function getNumber(value: BigNumber, decimals = 18): number {\n  return value.div(BigNumber.from(10).pow(decimals)).toNumber();\n}\n\nexport const parseNumber = (value: number | string, decimals = 18, fractionDigits = 0) => {\n  if (value == null) {\n    return;\n  }\n  const convert = +(+value).toFixed(fractionDigits);\n  const numberVal = convert * 10 ** fractionDigits;\n  return parseUnits(numberVal.toString(), decimals - fractionDigits);\n};\n"]},"metadata":{},"sourceType":"module"}