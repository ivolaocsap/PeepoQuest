{"ast":null,"code":"var _jsxFileName = \"/Users/ivopascoal/Desktop/BabyPepe/src/hooks/usePreload.tsx\";\nimport { useEffect, useState } from 'react';\nimport iconDragon from \"../assets/img/icon-dragon.svg\";\nimport iconDragonHome from \"../assets/img/ic-dragon-home.svg\";\nimport iconMiner from \"../assets/img/icon-miner.svg\";\nimport iconMinerHome from \"../assets/img/ic-miner-home.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst images = [iconDragon, iconMiner, iconDragonHome, iconMinerHome];\n\nconst load = url => {\n  return new Promise(resolve => {\n    const img = new Image();\n\n    img.onload = () => resolve();\n\n    img.onerror = () => resolve();\n\n    img.src = url;\n  });\n};\n\nconst loadAll = urls => Promise.all(urls.map(load));\n\nconst timeout = ms => new Promise(resolve => {\n  setTimeout(resolve, ms);\n});\n\nexport const withPreload = (Component, time) => {\n  var _s = $RefreshSig$();\n\n  return _s(() => {\n    _s();\n\n    const [loaded, setLoaded] = useState(false);\n    useEffect(() => {\n      Promise.race([loadAll(images), timeout(time)]).then(() => {\n        setLoaded(true);\n      });\n    }, []);\n\n    if (!loaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"initial-loading\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/burning.gif\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }, this);\n  }, \"I8RUn14npbk54TheiKdNt4wCpsU=\");\n};","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/BabyPepe/src/hooks/usePreload.tsx"],"names":["useEffect","useState","images","iconDragon","iconMiner","iconDragonHome","iconMinerHome","load","url","Promise","resolve","img","Image","onload","onerror","src","loadAll","urls","all","map","timeout","ms","setTimeout","withPreload","Component","time","loaded","setLoaded","race","then"],"mappings":";AAAA,SAAuBA,SAAvB,EAAkCC,QAAlC,QAAkD,OAAlD;;;;;;AAMA,MAAMC,MAAM,GAAG,CAACC,UAAD,EAAaC,SAAb,EAAwBC,cAAxB,EAAwCC,aAAxC,CAAf;;AAEA,MAAMC,IAAI,GAAIC,GAAD,IAAgC;AAC3C,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9B,UAAMC,GAAG,GAAG,IAAIC,KAAJ,EAAZ;;AACAD,IAAAA,GAAG,CAACE,MAAJ,GAAa,MAAMH,OAAO,EAA1B;;AACAC,IAAAA,GAAG,CAACG,OAAJ,GAAc,MAAMJ,OAAO,EAA3B;;AACAC,IAAAA,GAAG,CAACI,GAAJ,GAAUP,GAAV;AACD,GALM,CAAP;AAMD,CAPD;;AASA,MAAMQ,OAAO,GAAIC,IAAD,IAAoBR,OAAO,CAACS,GAAR,CAAYD,IAAI,CAACE,GAAL,CAASZ,IAAT,CAAZ,CAApC;;AAEA,MAAMa,OAAO,GAAIC,EAAD,IACd,IAAIZ,OAAJ,CAAaC,OAAD,IAAa;AACvBY,EAAAA,UAAU,CAACZ,OAAD,EAAUW,EAAV,CAAV;AACD,CAFD,CADF;;AAKA,OAAO,MAAME,WAAW,GAAG,CAACC,SAAD,EAAsBC,IAAtB,KAAiD;AAAA;;AAC1E,YAAO,MAAoB;AAAA;;AACzB,UAAM,CAACC,MAAD,EAASC,SAAT,IAAsB1B,QAAQ,CAAC,KAAD,CAApC;AACAD,IAAAA,SAAS,CAAC,MAAM;AACdS,MAAAA,OAAO,CAACmB,IAAR,CAAa,CAACZ,OAAO,CAACd,MAAD,CAAR,EAAkBkB,OAAO,CAACK,IAAD,CAAzB,CAAb,EAA+CI,IAA/C,CAAoD,MAAM;AACxDF,QAAAA,SAAS,CAAC,IAAD,CAAT;AACD,OAFD;AAGD,KAJQ,EAIN,EAJM,CAAT;;AAMA,QAAI,CAACD,MAAL,EAAa;AACX,0BACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,+BACE;AAAK,UAAA,GAAG,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAKD;;AAED,wBAAO,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAjBD;AAkBD,CAnBM","sourcesContent":["import { ReactElement, useEffect, useState } from 'react';\nimport iconDragon from '../assets/img/icon-dragon.svg';\nimport iconDragonHome from '../assets/img/ic-dragon-home.svg';\nimport iconMiner from '../assets/img/icon-miner.svg';\nimport iconMinerHome from '../assets/img/ic-miner-home.svg';\n\nconst images = [iconDragon, iconMiner, iconDragonHome, iconMinerHome];\n\nconst load = (url: string): Promise<void> => {\n  return new Promise((resolve) => {\n    const img = new Image();\n    img.onload = () => resolve();\n    img.onerror = () => resolve();\n    img.src = url;\n  });\n};\n\nconst loadAll = (urls: string[]) => Promise.all(urls.map(load));\n\nconst timeout = (ms: number) =>\n  new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n\nexport const withPreload = (Component: React.FC, time: number): React.FC => {\n  return (): ReactElement => {\n    const [loaded, setLoaded] = useState(false);\n    useEffect(() => {\n      Promise.race([loadAll(images), timeout(time)]).then(() => {\n        setLoaded(true);\n      });\n    }, []);\n\n    if (!loaded) {\n      return (\n        <div className=\"initial-loading\">\n          <img src=\"/burning.gif\" />\n        </div>\n      );\n    }\n\n    return <Component />;\n  };\n};\n"]},"metadata":{},"sourceType":"module"}