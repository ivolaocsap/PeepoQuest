{"ast":null,"code":"/* eslint-disable @typescript-eslint/ban-types */import{useWeb3React}from'@web3-react/core';import{useEffect,useMemo}from'react';import{useDispatch,useSelector}from'react-redux';import{useAddPopup,useBlockNumber}from'../application/hooks';import{checkedTransaction,finalizeTransaction}from'./actions';export function shouldCheck(lastBlockNumber,tx){if(tx.receipt)return false;if(!tx.lastCheckedBlockNumber)return true;var blocksSinceCheck=lastBlockNumber-tx.lastCheckedBlockNumber;if(blocksSinceCheck<1)return false;var minutesPending=(new Date().getTime()-tx.addedTime)/1000/60;if(minutesPending>60){// every 10 blocks if pending for longer than an hour\nreturn blocksSinceCheck>9;}else if(minutesPending>5){// every 3 blocks if pending more than 5 minutes\nreturn blocksSinceCheck>2;}else{// otherwise every block\nreturn true;}}export default function Updater(){var lastBlockNumber=useBlockNumber();var dispatch=useDispatch();var state=useSelector(function(state){return state.transactions;});var _useWeb3React=useWeb3React(),provider=_useWeb3React.library,chainId=_useWeb3React.chainId;var transactions=useMemo(function(){var _state$chainId;return chainId?(_state$chainId=state[chainId])!==null&&_state$chainId!==void 0?_state$chainId:{}:{};},[chainId,state]);// show popup on confirm\nvar addPopup=useAddPopup();useEffect(function(){if(!chainId||!lastBlockNumber){return;}Object.keys(transactions).filter(function(hash){return shouldCheck(lastBlockNumber,transactions[hash]);}).forEach(function(hash){provider.getTransactionReceipt(hash).then(function(receipt){if(receipt){var _transactions$hash;dispatch(finalizeTransaction({chainId:chainId,hash:hash,receipt:{blockHash:receipt.blockHash,blockNumber:receipt.blockNumber,contractAddress:receipt.contractAddress,from:receipt.from,status:receipt.status,to:receipt.to,transactionHash:receipt.transactionHash,transactionIndex:receipt.transactionIndex}}));addPopup({txn:{hash:hash,success:receipt.status==1,summary:(_transactions$hash=transactions[hash])===null||_transactions$hash===void 0?void 0:_transactions$hash.summary}},hash);}else{dispatch(checkedTransaction({chainId:chainId,hash:hash,blockNumber:lastBlockNumber}));}}).catch(function(error){console.error(\"failed to check transaction hash: \".concat(hash),error);});});},[chainId,transactions,lastBlockNumber,dispatch,addPopup,provider]);return null;}","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/cuffies/src/state/transactions/updater.tsx"],"names":["useWeb3React","useEffect","useMemo","useDispatch","useSelector","useAddPopup","useBlockNumber","checkedTransaction","finalizeTransaction","shouldCheck","lastBlockNumber","tx","receipt","lastCheckedBlockNumber","blocksSinceCheck","minutesPending","Date","getTime","addedTime","Updater","dispatch","state","transactions","provider","library","chainId","addPopup","Object","keys","filter","hash","forEach","getTransactionReceipt","then","blockHash","blockNumber","contractAddress","from","status","to","transactionHash","transactionIndex","txn","success","summary","catch","error","console"],"mappings":"AAAA,iDAEA,OAASA,YAAT,KAA6B,kBAA7B,CACA,OAASC,SAAT,CAAoBC,OAApB,KAAmC,OAAnC,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,WAAT,CAAsBC,cAAtB,KAA4C,sBAA5C,CAEA,OAASC,kBAAT,CAA6BC,mBAA7B,KAAwD,WAAxD,CAEA,MAAO,SAASC,CAAAA,WAAT,CACLC,eADK,CAELC,EAFK,CAGI,CACT,GAAIA,EAAE,CAACC,OAAP,CAAgB,MAAO,MAAP,CAChB,GAAI,CAACD,EAAE,CAACE,sBAAR,CAAgC,MAAO,KAAP,CAChC,GAAMC,CAAAA,gBAAgB,CAAGJ,eAAe,CAAGC,EAAE,CAACE,sBAA9C,CACA,GAAIC,gBAAgB,CAAG,CAAvB,CAA0B,MAAO,MAAP,CAC1B,GAAMC,CAAAA,cAAc,CAAG,CAAC,GAAIC,CAAAA,IAAJ,GAAWC,OAAX,GAAuBN,EAAE,CAACO,SAA3B,EAAwC,IAAxC,CAA+C,EAAtE,CACA,GAAIH,cAAc,CAAG,EAArB,CAAyB,CACvB;AACA,MAAOD,CAAAA,gBAAgB,CAAG,CAA1B,CACD,CAHD,IAGO,IAAIC,cAAc,CAAG,CAArB,CAAwB,CAC7B;AACA,MAAOD,CAAAA,gBAAgB,CAAG,CAA1B,CACD,CAHM,IAGA,CACL;AACA,MAAO,KAAP,CACD,CACF,CAED,cAAe,SAASK,CAAAA,OAAT,EAAyB,CACtC,GAAMT,CAAAA,eAAe,CAAGJ,cAAc,EAAtC,CACA,GAAMc,CAAAA,QAAQ,CAAGjB,WAAW,EAA5B,CACA,GAAMkB,CAAAA,KAAK,CAAGjB,WAAW,CAAqC,SAACiB,KAAD,QAAWA,CAAAA,KAAK,CAACC,YAAjB,EAArC,CAAzB,CACA,kBAAuCtB,YAAY,EAAnD,CAAiBuB,QAAjB,eAAQC,OAAR,CAA2BC,OAA3B,eAA2BA,OAA3B,CACA,GAAMH,CAAAA,YAAY,CAAGpB,OAAO,CAAC,UAAM,oBACjC,MAAOuB,CAAAA,OAAO,iBAAGJ,KAAK,CAACI,OAAD,CAAR,iDAAqB,EAArB,CAA0B,EAAxC,CACD,CAF2B,CAEzB,CAACA,OAAD,CAAUJ,KAAV,CAFyB,CAA5B,CAIA;AACA,GAAMK,CAAAA,QAAQ,CAAGrB,WAAW,EAA5B,CAEAJ,SAAS,CAAC,UAAM,CACd,GAAI,CAACwB,OAAD,EAAY,CAACf,eAAjB,CAAkC,CAChC,OACD,CAEDiB,MAAM,CAACC,IAAP,CAAYN,YAAZ,EACGO,MADH,CACU,SAACC,IAAD,QAAUrB,CAAAA,WAAW,CAACC,eAAD,CAAkBY,YAAY,CAACQ,IAAD,CAA9B,CAArB,EADV,EAEGC,OAFH,CAEW,SAACD,IAAD,CAAU,CACjBP,QAAQ,CACLS,qBADH,CACyBF,IADzB,EAEGG,IAFH,CAEQ,SAACrB,OAAD,CAAa,CACjB,GAAIA,OAAJ,CAAa,wBACXQ,QAAQ,CACNZ,mBAAmB,CAAC,CAClBiB,OAAO,CAAPA,OADkB,CAElBK,IAAI,CAAJA,IAFkB,CAGlBlB,OAAO,CAAE,CACPsB,SAAS,CAAEtB,OAAO,CAACsB,SADZ,CAEPC,WAAW,CAAEvB,OAAO,CAACuB,WAFd,CAGPC,eAAe,CAAExB,OAAO,CAACwB,eAHlB,CAIPC,IAAI,CAAEzB,OAAO,CAACyB,IAJP,CAKPC,MAAM,CAAE1B,OAAO,CAAC0B,MALT,CAMPC,EAAE,CAAE3B,OAAO,CAAC2B,EANL,CAOPC,eAAe,CAAE5B,OAAO,CAAC4B,eAPlB,CAQPC,gBAAgB,CAAE7B,OAAO,CAAC6B,gBARnB,CAHS,CAAD,CADb,CAAR,CAgBAf,QAAQ,CACN,CACEgB,GAAG,CAAE,CACHZ,IAAI,CAAJA,IADG,CAEHa,OAAO,CAAE/B,OAAO,CAAC0B,MAAR,EAAkB,CAFxB,CAGHM,OAAO,qBAAEtB,YAAY,CAACQ,IAAD,CAAd,6CAAE,mBAAoBc,OAH1B,CADP,CADM,CAQNd,IARM,CAAR,CAUD,CA3BD,IA2BO,CACLV,QAAQ,CAACb,kBAAkB,CAAC,CAAEkB,OAAO,CAAPA,OAAF,CAAWK,IAAI,CAAJA,IAAX,CAAiBK,WAAW,CAAEzB,eAA9B,CAAD,CAAnB,CAAR,CACD,CACF,CAjCH,EAkCGmC,KAlCH,CAkCS,SAACC,KAAD,CAAW,CAChBC,OAAO,CAACD,KAAR,6CAAmDhB,IAAnD,EAA2DgB,KAA3D,EACD,CApCH,EAqCD,CAxCH,EAyCD,CA9CQ,CA8CN,CAACrB,OAAD,CAAUH,YAAV,CAAwBZ,eAAxB,CAAyCU,QAAzC,CAAmDM,QAAnD,CAA6DH,QAA7D,CA9CM,CAAT,CAgDA,MAAO,KAAP,CACD","sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useAddPopup, useBlockNumber } from '../application/hooks';\nimport { AppDispatch, AppState } from '../index';\nimport { checkedTransaction, finalizeTransaction } from './actions';\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: { addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number },\n): boolean {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\n\nexport default function Updater(): null {\n  const lastBlockNumber = useBlockNumber();\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n  const { library: provider, chainId } = useWeb3React<JsonRpcProvider>();\n  const transactions = useMemo(() => {\n    return chainId ? state[chainId] ?? {} : {};\n  }, [chainId, state]);\n\n  // show popup on confirm\n  const addPopup = useAddPopup();\n\n  useEffect(() => {\n    if (!chainId || !lastBlockNumber) {\n      return;\n    }\n\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\n      .forEach((hash) => {\n        provider\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                }),\n              );\n              addPopup(\n                {\n                  txn: {\n                    hash,\n                    success: receipt.status == 1,\n                    summary: transactions[hash]?.summary,\n                  },\n                },\n                hash,\n              );\n            } else {\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }));\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error);\n          });\n      });\n  }, [chainId, transactions, lastBlockNumber, dispatch, addPopup, provider]);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}