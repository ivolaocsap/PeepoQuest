{"ast":null,"code":"/*\nLicense gpl-3.0 http://www.gnu.org/licenses/gpl-3.0-standalone.html\n*/\n\n/*jslint\n    evil: true,\n    node: true\n*/\n'use strict';\n/**\n * Clones non native JavaScript functions, or references native functions.\n * @author <a href=\"mailto:matthewkastor@gmail.com\">Matthew Kastor</a>\n * @param {Function} func The function to clone.\n * @returns {Function} Returns a clone of the non native function, or a\n *  reference to the native function.\n */\n\nfunction cloneFunction(func) {\n  var out, str;\n\n  try {\n    str = func.toString();\n\n    if (/\\[native code\\]/.test(str)) {\n      out = func;\n    } else {\n      out = eval('(function(){return ' + str + '}());');\n    }\n  } catch (e) {\n    throw new Error(e.message + '\\r\\n\\r\\n' + str);\n  }\n\n  return out;\n}\n\nmodule.exports = cloneFunction;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/PeepoAvax/node_modules/clone-function/src/clone-function.js"],"names":["cloneFunction","func","out","str","toString","test","eval","e","Error","message","module","exports"],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,MAAIC,GAAJ,EAASC,GAAT;;AACA,MAAI;AACAA,IAAAA,GAAG,GAAGF,IAAI,CAACG,QAAL,EAAN;;AACA,QAAI,kBAAkBC,IAAlB,CAAuBF,GAAvB,CAAJ,EAAiC;AAC7BD,MAAAA,GAAG,GAAGD,IAAN;AACH,KAFD,MAEO;AACHC,MAAAA,GAAG,GAAGI,IAAI,CAAC,wBAAwBH,GAAxB,GAA8B,OAA/B,CAAV;AACH;AACJ,GAPD,CAOE,OAAOI,CAAP,EAAU;AACR,UAAM,IAAIC,KAAJ,CAAUD,CAAC,CAACE,OAAF,GAAY,UAAZ,GAAyBN,GAAnC,CAAN;AACH;;AACD,SAAOD,GAAP;AACH;;AACDQ,MAAM,CAACC,OAAP,GAAiBX,aAAjB","sourcesContent":["/*\nLicense gpl-3.0 http://www.gnu.org/licenses/gpl-3.0-standalone.html\n*/\n/*jslint\n    evil: true,\n    node: true\n*/\n'use strict';\n/**\n * Clones non native JavaScript functions, or references native functions.\n * @author <a href=\"mailto:matthewkastor@gmail.com\">Matthew Kastor</a>\n * @param {Function} func The function to clone.\n * @returns {Function} Returns a clone of the non native function, or a\n *  reference to the native function.\n */\nfunction cloneFunction(func) {\n    var out, str;\n    try {\n        str = func.toString();\n        if (/\\[native code\\]/.test(str)) {\n            out = func;\n        } else {\n            out = eval('(function(){return ' + str + '}());');\n        }\n    } catch (e) {\n        throw new Error(e.message + '\\r\\n\\r\\n' + str);\n    }\n    return out;\n}\nmodule.exports = cloneFunction;"]},"metadata":{},"sourceType":"script"}