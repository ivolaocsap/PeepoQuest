{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Web3 = require(\"web3\");\n\nconst types_1 = require(\"../../../types\");\n\nconst ERC1155_1 = require(\"../../ERC1155\");\n\nexports.EnjinItemSchema = Object.assign({}, ERC1155_1.ERC1155Schema, {\n  version: 1,\n  deploymentBlock: 0,\n  name: 'Enjin',\n  description: 'Items conforming to the Enjin implementation of the ERC1155 spec.',\n  website: 'https://enjincoin.io/',\n  functions: Object.assign({}, ERC1155_1.ERC1155Schema.functions, {\n    ownerOf: asset => ({\n      type: Web3.AbiType.Function,\n      name: 'ownerOf',\n      payable: false,\n      constant: true,\n      stateMutability: types_1.StateMutability.View,\n      target: asset.address,\n      inputs: [{\n        kind: types_1.FunctionInputKind.Asset,\n        name: '_id',\n        type: 'uint256',\n        value: asset.id\n      }],\n      outputs: [{\n        kind: types_1.FunctionOutputKind.Owner,\n        name: 'owner',\n        type: 'address'\n      }]\n    }),\n    // Parameters are flipped from 1155\n    countOf: asset => ({\n      type: Web3.AbiType.Function,\n      name: 'balanceOf',\n      payable: false,\n      constant: true,\n      stateMutability: types_1.StateMutability.View,\n      target: asset.address,\n      inputs: [{\n        kind: types_1.FunctionInputKind.Asset,\n        name: '_id',\n        type: 'uint256',\n        value: asset.id\n      }, {\n        kind: types_1.FunctionInputKind.Owner,\n        name: '_owner',\n        type: 'address'\n      }],\n      outputs: [{\n        kind: types_1.FunctionOutputKind.Count,\n        name: 'balance',\n        type: 'uint'\n      }],\n      assetFromOutputs: outputs => outputs.balance\n    }),\n    assetsOfOwnerByIndex: []\n  })\n});","map":{"version":3,"sources":["../../../../src/schemas/main/EnjinItem/index.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAMA,MAAA,SAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEa,OAAA,CAAA,eAAA,GAAe,MAAA,CAAA,MAAA,CAAA,EAAA,EACvB,SAAA,CAAA,aADuB,EACV;AAChB,EAAA,OAAO,EAAE,CADO;AAEhB,EAAA,eAAe,EAAE,CAFD;AAGhB,EAAA,IAAI,EAAE,OAHU;AAIhB,EAAA,WAAW,EAAE,mEAJG;AAKhB,EAAA,OAAO,EAAE,uBALO;AAMhB,EAAA,SAAS,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACJ,SAAA,CAAA,aAAA,CAAc,SADV,EACmB;AAC1B,IAAA,OAAO,EAAE,KAAK,KAAK;AACjB,MAAA,IAAI,EAAE,IAAI,CAAC,OAAL,CAAa,QADF;AAEjB,MAAA,IAAI,EAAE,SAFW;AAGjB,MAAA,OAAO,EAAE,KAHQ;AAIjB,MAAA,QAAQ,EAAE,IAJO;AAKjB,MAAA,eAAe,EAAE,OAAA,CAAA,eAAA,CAAgB,IALhB;AAMjB,MAAA,MAAM,EAAE,KAAK,CAAC,OANG;AAOjB,MAAA,MAAM,EAAE,CACN;AAAC,QAAA,IAAI,EAAE,OAAA,CAAA,iBAAA,CAAkB,KAAzB;AAAgC,QAAA,IAAI,EAAE,KAAtC;AAA6C,QAAA,IAAI,EAAE,SAAnD;AAA8D,QAAA,KAAK,EAAE,KAAK,CAAC;AAA3E,OADM,CAPS;AAUjB,MAAA,OAAO,EAAE,CACP;AAAC,QAAA,IAAI,EAAE,OAAA,CAAA,kBAAA,CAAmB,KAA1B;AAAiC,QAAA,IAAI,EAAE,OAAvC;AAAgD,QAAA,IAAI,EAAE;AAAtD,OADO;AAVQ,KAAL,CADY;AAe1B;AACA,IAAA,OAAO,EAAE,KAAK,KAAK;AACjB,MAAA,IAAI,EAAE,IAAI,CAAC,OAAL,CAAa,QADF;AAEjB,MAAA,IAAI,EAAE,WAFW;AAGjB,MAAA,OAAO,EAAE,KAHQ;AAIjB,MAAA,QAAQ,EAAE,IAJO;AAKjB,MAAA,eAAe,EAAE,OAAA,CAAA,eAAA,CAAgB,IALhB;AAMjB,MAAA,MAAM,EAAE,KAAK,CAAC,OANG;AAOjB,MAAA,MAAM,EAAE,CACN;AAAC,QAAA,IAAI,EAAE,OAAA,CAAA,iBAAA,CAAkB,KAAzB;AAAgC,QAAA,IAAI,EAAE,KAAtC;AAA6C,QAAA,IAAI,EAAE,SAAnD;AAA8D,QAAA,KAAK,EAAE,KAAK,CAAC;AAA3E,OADM,EAEN;AAAC,QAAA,IAAI,EAAE,OAAA,CAAA,iBAAA,CAAkB,KAAzB;AAAgC,QAAA,IAAI,EAAE,QAAtC;AAAgD,QAAA,IAAI,EAAE;AAAtD,OAFM,CAPS;AAWjB,MAAA,OAAO,EAAE,CACP;AAAC,QAAA,IAAI,EAAE,OAAA,CAAA,kBAAA,CAAmB,KAA1B;AAAiC,QAAA,IAAI,EAAE,SAAvC;AAAkD,QAAA,IAAI,EAAE;AAAxD,OADO,CAXQ;AAcjB,MAAA,gBAAgB,EAAG,OAAD,IAAkB,OAAO,CAAC;AAd3B,KAAL,CAhBY;AAgC1B,IAAA,oBAAoB,EAAE;AAhCI,GADnB;AANO,CADU,CAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Web3 = require(\"web3\");\nconst types_1 = require(\"../../../types\");\nconst ERC1155_1 = require(\"../../ERC1155\");\nexports.EnjinItemSchema = Object.assign({}, ERC1155_1.ERC1155Schema, { version: 1, deploymentBlock: 0, name: 'Enjin', description: 'Items conforming to the Enjin implementation of the ERC1155 spec.', website: 'https://enjincoin.io/', functions: Object.assign({}, ERC1155_1.ERC1155Schema.functions, { ownerOf: asset => ({\n            type: Web3.AbiType.Function,\n            name: 'ownerOf',\n            payable: false,\n            constant: true,\n            stateMutability: types_1.StateMutability.View,\n            target: asset.address,\n            inputs: [\n                { kind: types_1.FunctionInputKind.Asset, name: '_id', type: 'uint256', value: asset.id },\n            ],\n            outputs: [\n                { kind: types_1.FunctionOutputKind.Owner, name: 'owner', type: 'address' },\n            ],\n        }), \n        // Parameters are flipped from 1155\n        countOf: asset => ({\n            type: Web3.AbiType.Function,\n            name: 'balanceOf',\n            payable: false,\n            constant: true,\n            stateMutability: types_1.StateMutability.View,\n            target: asset.address,\n            inputs: [\n                { kind: types_1.FunctionInputKind.Asset, name: '_id', type: 'uint256', value: asset.id },\n                { kind: types_1.FunctionInputKind.Owner, name: '_owner', type: 'address' },\n            ],\n            outputs: [\n                { kind: types_1.FunctionOutputKind.Count, name: 'balance', type: 'uint' },\n            ],\n            assetFromOutputs: (outputs) => outputs.balance,\n        }), assetsOfOwnerByIndex: [] }) });\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}