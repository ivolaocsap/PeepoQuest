{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst axios_1 = require(\"axios\");\n\nconst typed_promisify_1 = require(\"typed-promisify\");\n\nconst Web3 = require(\"web3\");\n\nconst types_1 = require(\"../../../types\");\n\nvar Kind;\n\n(function (Kind) {\n  Kind[\"Angel\"] = \"Angel\";\n  Kind[\"Pet\"] = \"Pet\";\n  Kind[\"Accessory\"] = \"Accessory\";\n})(Kind = exports.Kind || (exports.Kind = {}));\n\nconst targets = {\n  [Kind.Angel]: '0x0c47E8028D5452fcc1aD577B3212C1E63DE72b50',\n  [Kind.Pet]: '0x5ee9bc8a2b2baa393706ba3f3268135663a626a1',\n  [Kind.Accessory]: '0x11b4591dc55d0fb44ce2ab7abe5536ab6e19cf78'\n};\nconst dataTargets = {\n  [Kind.Angel]: '0x6d2e76213615925c5fc436565b5ee788ee0e86dc',\n  [Kind.Pet]: '0xB340686da996b8B3d486b4D27E38E38500A9E926',\n  [Kind.Accessory]: '0x466c44812835f57b736ef9f63582b8a6693a14d0'\n};\nconst transferNames = {\n  [Kind.Angel]: 'ownerAngelTransfer',\n  [Kind.Pet]: 'transfer',\n  [Kind.Accessory]: 'ownerAccessoryTransfer'\n};\nconst assetNames = {\n  [Kind.Angel]: '_angelId',\n  [Kind.Pet]: '_petId',\n  [Kind.Accessory]: '__accessoryId'\n};\nconst assetTypes = {\n  [Kind.Angel]: 'uint64',\n  [Kind.Pet]: 'uint256',\n  [Kind.Accessory]: 'uint64'\n}; // @ts-ignore\n\nexports.AngelBattlesSchema = {\n  version: 6,\n  deploymentBlock: 0,\n  name: 'AngelBattles',\n  description: 'Collect angel, pet, and accessory cards',\n  thumbnail: 'https://www.angelbattles.com/images/Site/Logo.png',\n  website: 'https://www.angelbattles.com/',\n  fields: [{\n    name: 'Kind',\n    type: 'enum',\n    values: ['Angel', 'Pet', 'Accessory'],\n    description: 'Kind of AngelBattles asset.'\n  }, {\n    name: 'ID',\n    type: 'uint',\n    description: 'Angel ID.'\n  }],\n  assetFromFields: fields => ({\n    id: fields.ID,\n    kind: fields.Kind\n  }),\n  assetToFields: asset => ({\n    ID: asset.id,\n    Kind: asset.kind\n  }),\n  formatter: (asset, web3) => __awaiter(this, void 0, void 0, function* () {\n    const imageResponse = yield axios_1.default.get('https://www.angelbattles.com/api/imagesSvg');\n    const imagesSvg = imageResponse.data;\n\n    switch (asset.kind) {\n      case Kind.Angel:\n        const getAngelABI = {\n          'constant': true,\n          'inputs': [{\n            'name': '_angelId',\n            'type': 'uint64'\n          }],\n          'name': 'getAngel',\n          'outputs': [{\n            'name': 'angelId',\n            'type': 'uint64'\n          }, {\n            'name': 'angelCardSeriesId',\n            'type': 'uint8'\n          }, {\n            'name': 'battlePower',\n            'type': 'uint16'\n          }, {\n            'name': 'aura',\n            'type': 'uint8'\n          }, {\n            'name': 'experience',\n            'type': 'uint16'\n          }, {\n            'name': 'price',\n            'type': 'uint256'\n          }, {\n            'name': 'owner',\n            'type': 'address'\n          }],\n          'payable': false,\n          'stateMutability': 'view',\n          'type': 'function'\n        };\n        const contract = web3.eth.contract([getAngelABI]).at(targets[Kind.Angel]);\n        const res = yield typed_promisify_1.promisify(contract.getAngel.call)(asset.id);\n        const angelId = res[0];\n        const angelCardSeriesId = res[1].toString();\n        const battlePower = res[2];\n        const aura = res[3];\n        const experience = res[4];\n        const price = res[5];\n        const owner = res[6];\n        let angelThumbnail = 'https://www.angelbattles.com/images/Site/Logo.png';\n        let angelName = angelCardSeriesId;\n        const angelMatching = imagesSvg.filter(x => x.cardSeriesType === 'Angel' && x.cardSeriesId === angelCardSeriesId)[0];\n\n        if (angelMatching) {\n          angelThumbnail = 'https://' + angelMatching.imageUri;\n          angelName = angelMatching.cardName;\n        }\n\n        return {\n          thumbnail: angelThumbnail,\n          title: 'Angel #' + angelId + ' - ' + angelName,\n          description: 'Battle power: ' + battlePower + ', aura: ' + aura + ', experience: ' + experience,\n          url: 'https://www.angelbattles.com/getcard?type=angel&seriesid=' + angelCardSeriesId,\n          properties: []\n        };\n\n      case Kind.Pet:\n        const getPetABI = {\n          'constant': true,\n          'inputs': [{\n            'name': '_petId',\n            'type': 'uint256'\n          }],\n          'name': 'getPet',\n          'outputs': [{\n            'name': 'petId',\n            'type': 'uint256'\n          }, {\n            'name': 'petCardSeriesId',\n            'type': 'uint8'\n          }, {\n            'name': 'luck',\n            'type': 'uint8'\n          }, {\n            'name': 'auraRed',\n            'type': 'uint16'\n          }, {\n            'name': 'auraBlue',\n            'type': 'uint16'\n          }, {\n            'name': 'auraYellow',\n            'type': 'uint16'\n          }, {\n            'name': 'owner',\n            'type': 'address'\n          }],\n          'payable': false,\n          'stateMutability': 'view',\n          'type': 'function'\n        };\n        const petContract = web3.eth.contract([getPetABI]).at(targets[Kind.Pet]);\n        const petRes = yield typed_promisify_1.promisify(petContract.getPet.call)(asset.id);\n        const petId = petRes[0];\n        const petCardSeriesId = petRes[1].toString();\n        const luck = petRes[2];\n        const auraRed = petRes[3];\n        const auraBlue = petRes[4];\n        const auraYellow = petRes[5];\n        const petOwner = petRes[6];\n        let petThumbnail = 'https://www.angelbattles.com/images/Site/Logo.png';\n        let petName = petCardSeriesId;\n        const petMatching = imagesSvg.filter(x => x.cardSeriesType === 'Pet' && x.cardSeriesId === petCardSeriesId)[0];\n\n        if (petMatching) {\n          petThumbnail = 'https://' + petMatching.imageUri;\n          petName = petMatching.cardName;\n        }\n\n        return {\n          thumbnail: petThumbnail,\n          title: 'Pet #' + petId + ' - ' + petName,\n          description: 'Luck: ' + luck + ', aura red: ' + auraRed + ', aura blue: ' + auraBlue + ', aura yellow: ' + auraYellow,\n          url: 'https://www.angelbattles.com/getcard?type=pet&seriesid=' + petCardSeriesId,\n          properties: []\n        };\n\n      case Kind.Accessory:\n        const getAccessoryABI = {\n          'constant': true,\n          'inputs': [{\n            'name': '_accessoryId',\n            'type': 'uint256'\n          }],\n          'name': 'getAccessory',\n          'outputs': [{\n            'name': 'accessoryID',\n            'type': 'uint256'\n          }, {\n            'name': 'AccessorySeriesID',\n            'type': 'uint8'\n          }, {\n            'name': 'owner',\n            'type': 'address'\n          }],\n          'payable': false,\n          'stateMutability': 'view',\n          'type': 'function'\n        };\n        const accessoryContract = web3.eth.contract([getAccessoryABI]).at(targets[Kind.Accessory]);\n        const accessoryRes = yield typed_promisify_1.promisify(accessoryContract.getAccessory.call)(asset.id);\n        const accessoryId = accessoryRes[0];\n        const accessorySeriesId = accessoryRes[1].toString();\n        const accessoryOwner = accessoryRes[2];\n        let accessoryThumbnail = 'https://www.angelbattles.com/images/Site/Logo.png';\n        let accessoryName = accessorySeriesId;\n        const accessoryMatching = imagesSvg.filter(x => x.cardSeriesType === 'Accessory' && x.cardSeriesId === accessorySeriesId)[0];\n\n        if (accessoryMatching) {\n          accessoryThumbnail = 'https://' + accessoryMatching.imageUri;\n          accessoryName = accessoryMatching.cardName;\n        }\n\n        return {\n          thumbnail: accessoryThumbnail,\n          title: 'Accessory #' + accessoryId + ' - ' + accessoryName,\n          description: '',\n          url: 'https://www.angelbattles.com/getcard?type=acc&seriesid=' + accessorySeriesId,\n          properties: []\n        };\n    }\n  }),\n  allAssets: web3 => __awaiter(this, void 0, void 0, function* () {\n    const getTotalAngelsABI = {\n      'constant': true,\n      'inputs': [],\n      'name': 'getTotalAngels',\n      'outputs': [{\n        'name': '',\n        'type': 'uint64'\n      }],\n      'payable': false,\n      'stateMutability': 'view',\n      'type': 'function'\n    };\n    const getTotalAngelsContract = web3.eth.contract([getTotalAngelsABI]).at(dataTargets[Kind.Angel]);\n    const getTotalPetsABI = {\n      'constant': true,\n      'inputs': [],\n      'name': 'getTotalPets',\n      'outputs': [{\n        'name': '',\n        'type': 'uint64'\n      }],\n      'payable': false,\n      'stateMutability': 'view',\n      'type': 'function'\n    };\n    const getTotalPetsContract = web3.eth.contract([getTotalPetsABI]).at(dataTargets[Kind.Pet]);\n    const getTotalAccessoriesABI = {\n      'constant': true,\n      'inputs': [],\n      'name': 'getTotalAccessories',\n      'outputs': [{\n        'name': '',\n        'type': 'uint64'\n      }],\n      'payable': false,\n      'stateMutability': 'view',\n      'type': 'function'\n    };\n    const getTotalAccessoriesContract = web3.eth.contract([getTotalAccessoriesABI]).at(dataTargets[Kind.Accessory]);\n    const totalAngels = yield typed_promisify_1.promisify(getTotalAngelsContract.getTotalAngels.call)();\n    const totalPets = yield typed_promisify_1.promisify(getTotalPetsContract.getTotalPets.call)();\n    const totalAccessories = yield typed_promisify_1.promisify(getTotalAccessoriesContract.getTotalAccessories.call)();\n    const res = [];\n\n    for (let i = 0; i < totalAngels; i++) {\n      res.push({\n        kind: Kind.Angel,\n        id: i.toString()\n      });\n    }\n\n    for (let i = 0; i < totalPets; i++) {\n      res.push({\n        kind: Kind.Pet,\n        id: i.toString()\n      });\n    }\n\n    for (let i = 0; i < totalAccessories; i++) {\n      res.push({\n        kind: Kind.Accessory,\n        id: i.toString()\n      });\n    }\n\n    return res;\n  }),\n  functions: {\n    transfer: asset => ({\n      type: Web3.AbiType.Function,\n      name: transferNames[asset.kind],\n      payable: false,\n      constant: false,\n      stateMutability: types_1.StateMutability.Nonpayable,\n      target: asset.kind === Kind.Pet ? targets[asset.kind] : dataTargets[asset.kind],\n      inputs: [{\n        kind: types_1.FunctionInputKind.Replaceable,\n        name: '_to',\n        type: 'address'\n      }, {\n        kind: types_1.FunctionInputKind.Asset,\n        name: assetNames[asset.kind],\n        type: assetTypes[asset.kind],\n        value: asset.id\n      }],\n      outputs: []\n    }),\n    ownerOf: asset => ({\n      type: Web3.AbiType.Function,\n      name: 'ownerOf',\n      payable: false,\n      constant: true,\n      stateMutability: types_1.StateMutability.View,\n      target: targets[asset.kind],\n      inputs: [{\n        kind: types_1.FunctionInputKind.Asset,\n        name: '_tokenId',\n        type: 'uint256',\n        value: asset.id\n      }],\n      outputs: [{\n        kind: types_1.FunctionOutputKind.Owner,\n        name: '_owner',\n        type: 'address'\n      }]\n    }),\n    assetsOfOwnerByIndex: [Kind.Angel, Kind.Pet, Kind.Accessory].map(kind => ({\n      type: Web3.AbiType.Function,\n      name: 'getTokenByIndex',\n      payable: false,\n      constant: true,\n      stateMutability: types_1.StateMutability.View,\n      target: targets[kind],\n      inputs: [{\n        kind: types_1.FunctionInputKind.Owner,\n        name: '_owner',\n        type: 'address'\n      }, {\n        kind: types_1.FunctionInputKind.Index,\n        name: 'index',\n        type: 'uint256'\n      }],\n      outputs: [{\n        kind: types_1.FunctionOutputKind.Asset,\n        name: '',\n        type: 'uint64'\n      }],\n      assetFromOutputs: output => {\n        const str = output.toString();\n\n        if (str === '0') {\n          return null;\n        } else {\n          return {\n            kind,\n            id: str\n          };\n        }\n      }\n    }))\n  },\n  events: {\n    transfer: []\n  },\n  hash: a => a.kind + ':' + a.id\n};","map":{"version":3,"sources":["../../../../src/schemas/main/AngelBattles/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst axios_1 = require(\"axios\");\nconst typed_promisify_1 = require(\"typed-promisify\");\nconst Web3 = require(\"web3\");\nconst types_1 = require(\"../../../types\");\nvar Kind;\n(function (Kind) {\n    Kind[\"Angel\"] = \"Angel\";\n    Kind[\"Pet\"] = \"Pet\";\n    Kind[\"Accessory\"] = \"Accessory\";\n})(Kind = exports.Kind || (exports.Kind = {}));\nconst targets = {\n    [Kind.Angel]: '0x0c47E8028D5452fcc1aD577B3212C1E63DE72b50',\n    [Kind.Pet]: '0x5ee9bc8a2b2baa393706ba3f3268135663a626a1',\n    [Kind.Accessory]: '0x11b4591dc55d0fb44ce2ab7abe5536ab6e19cf78',\n};\nconst dataTargets = {\n    [Kind.Angel]: '0x6d2e76213615925c5fc436565b5ee788ee0e86dc',\n    [Kind.Pet]: '0xB340686da996b8B3d486b4D27E38E38500A9E926',\n    [Kind.Accessory]: '0x466c44812835f57b736ef9f63582b8a6693a14d0',\n};\nconst transferNames = {\n    [Kind.Angel]: 'ownerAngelTransfer',\n    [Kind.Pet]: 'transfer',\n    [Kind.Accessory]: 'ownerAccessoryTransfer',\n};\nconst assetNames = {\n    [Kind.Angel]: '_angelId',\n    [Kind.Pet]: '_petId',\n    [Kind.Accessory]: '__accessoryId',\n};\nconst assetTypes = {\n    [Kind.Angel]: 'uint64',\n    [Kind.Pet]: 'uint256',\n    [Kind.Accessory]: 'uint64',\n};\n// @ts-ignore\nexports.AngelBattlesSchema = {\n    version: 6,\n    deploymentBlock: 0,\n    name: 'AngelBattles',\n    description: 'Collect angel, pet, and accessory cards',\n    thumbnail: 'https://www.angelbattles.com/images/Site/Logo.png',\n    website: 'https://www.angelbattles.com/',\n    fields: [\n        { name: 'Kind', type: 'enum', values: ['Angel', 'Pet', 'Accessory'], description: 'Kind of AngelBattles asset.' },\n        { name: 'ID', type: 'uint', description: 'Angel ID.' },\n    ],\n    assetFromFields: (fields) => ({ id: fields.ID, kind: fields.Kind }),\n    assetToFields: asset => ({ ID: asset.id, Kind: asset.kind }),\n    formatter: (asset, web3) => __awaiter(this, void 0, void 0, function* () {\n        const imageResponse = yield axios_1.default.get('https://www.angelbattles.com/api/imagesSvg');\n        const imagesSvg = imageResponse.data;\n        switch (asset.kind) {\n            case Kind.Angel:\n                const getAngelABI = { 'constant': true, 'inputs': [{ 'name': '_angelId', 'type': 'uint64' }], 'name': 'getAngel', 'outputs': [{ 'name': 'angelId', 'type': 'uint64' }, { 'name': 'angelCardSeriesId', 'type': 'uint8' }, { 'name': 'battlePower', 'type': 'uint16' }, { 'name': 'aura', 'type': 'uint8' }, { 'name': 'experience', 'type': 'uint16' }, { 'name': 'price', 'type': 'uint256' }, { 'name': 'owner', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' };\n                const contract = web3.eth.contract([getAngelABI]).at(targets[Kind.Angel]);\n                const res = yield typed_promisify_1.promisify(contract.getAngel.call)(asset.id);\n                const angelId = res[0];\n                const angelCardSeriesId = res[1].toString();\n                const battlePower = res[2];\n                const aura = res[3];\n                const experience = res[4];\n                const price = res[5];\n                const owner = res[6];\n                let angelThumbnail = 'https://www.angelbattles.com/images/Site/Logo.png';\n                let angelName = angelCardSeriesId;\n                const angelMatching = imagesSvg.filter((x) => x.cardSeriesType === 'Angel' && x.cardSeriesId === angelCardSeriesId)[0];\n                if (angelMatching) {\n                    angelThumbnail = 'https://' + angelMatching.imageUri;\n                    angelName = angelMatching.cardName;\n                }\n                return {\n                    thumbnail: angelThumbnail,\n                    title: 'Angel #' + angelId + ' - ' + angelName,\n                    description: 'Battle power: ' + battlePower + ', aura: ' + aura + ', experience: ' + experience,\n                    url: 'https://www.angelbattles.com/getcard?type=angel&seriesid=' + angelCardSeriesId,\n                    properties: [],\n                };\n            case Kind.Pet:\n                const getPetABI = { 'constant': true, 'inputs': [{ 'name': '_petId', 'type': 'uint256' }], 'name': 'getPet', 'outputs': [{ 'name': 'petId', 'type': 'uint256' }, { 'name': 'petCardSeriesId', 'type': 'uint8' }, { 'name': 'luck', 'type': 'uint8' }, { 'name': 'auraRed', 'type': 'uint16' }, { 'name': 'auraBlue', 'type': 'uint16' }, { 'name': 'auraYellow', 'type': 'uint16' }, { 'name': 'owner', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' };\n                const petContract = web3.eth.contract([getPetABI]).at(targets[Kind.Pet]);\n                const petRes = yield typed_promisify_1.promisify(petContract.getPet.call)(asset.id);\n                const petId = petRes[0];\n                const petCardSeriesId = petRes[1].toString();\n                const luck = petRes[2];\n                const auraRed = petRes[3];\n                const auraBlue = petRes[4];\n                const auraYellow = petRes[5];\n                const petOwner = petRes[6];\n                let petThumbnail = 'https://www.angelbattles.com/images/Site/Logo.png';\n                let petName = petCardSeriesId;\n                const petMatching = imagesSvg.filter((x) => x.cardSeriesType === 'Pet' && x.cardSeriesId === petCardSeriesId)[0];\n                if (petMatching) {\n                    petThumbnail = 'https://' + petMatching.imageUri;\n                    petName = petMatching.cardName;\n                }\n                return {\n                    thumbnail: petThumbnail,\n                    title: 'Pet #' + petId + ' - ' + petName,\n                    description: 'Luck: ' + luck + ', aura red: ' + auraRed + ', aura blue: ' + auraBlue + ', aura yellow: ' + auraYellow,\n                    url: 'https://www.angelbattles.com/getcard?type=pet&seriesid=' + petCardSeriesId,\n                    properties: [],\n                };\n            case Kind.Accessory:\n                const getAccessoryABI = { 'constant': true, 'inputs': [{ 'name': '_accessoryId', 'type': 'uint256' }], 'name': 'getAccessory', 'outputs': [{ 'name': 'accessoryID', 'type': 'uint256' }, { 'name': 'AccessorySeriesID', 'type': 'uint8' }, { 'name': 'owner', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' };\n                const accessoryContract = web3.eth.contract([getAccessoryABI]).at(targets[Kind.Accessory]);\n                const accessoryRes = yield typed_promisify_1.promisify(accessoryContract.getAccessory.call)(asset.id);\n                const accessoryId = accessoryRes[0];\n                const accessorySeriesId = accessoryRes[1].toString();\n                const accessoryOwner = accessoryRes[2];\n                let accessoryThumbnail = 'https://www.angelbattles.com/images/Site/Logo.png';\n                let accessoryName = accessorySeriesId;\n                const accessoryMatching = imagesSvg.filter((x) => x.cardSeriesType === 'Accessory' && x.cardSeriesId === accessorySeriesId)[0];\n                if (accessoryMatching) {\n                    accessoryThumbnail = 'https://' + accessoryMatching.imageUri;\n                    accessoryName = accessoryMatching.cardName;\n                }\n                return {\n                    thumbnail: accessoryThumbnail,\n                    title: 'Accessory #' + accessoryId + ' - ' + accessoryName,\n                    description: '',\n                    url: 'https://www.angelbattles.com/getcard?type=acc&seriesid=' + accessorySeriesId,\n                    properties: [],\n                };\n        }\n    }),\n    allAssets: (web3) => __awaiter(this, void 0, void 0, function* () {\n        const getTotalAngelsABI = { 'constant': true, 'inputs': [], 'name': 'getTotalAngels', 'outputs': [{ 'name': '', 'type': 'uint64' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' };\n        const getTotalAngelsContract = web3.eth.contract([getTotalAngelsABI]).at(dataTargets[Kind.Angel]);\n        const getTotalPetsABI = { 'constant': true, 'inputs': [], 'name': 'getTotalPets', 'outputs': [{ 'name': '', 'type': 'uint64' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' };\n        const getTotalPetsContract = web3.eth.contract([getTotalPetsABI]).at(dataTargets[Kind.Pet]);\n        const getTotalAccessoriesABI = { 'constant': true, 'inputs': [], 'name': 'getTotalAccessories', 'outputs': [{ 'name': '', 'type': 'uint64' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' };\n        const getTotalAccessoriesContract = web3.eth.contract([getTotalAccessoriesABI]).at(dataTargets[Kind.Accessory]);\n        const totalAngels = yield typed_promisify_1.promisify(getTotalAngelsContract.getTotalAngels.call)();\n        const totalPets = yield typed_promisify_1.promisify(getTotalPetsContract.getTotalPets.call)();\n        const totalAccessories = yield typed_promisify_1.promisify(getTotalAccessoriesContract.getTotalAccessories.call)();\n        const res = [];\n        for (let i = 0; i < totalAngels; i++) {\n            res.push({ kind: Kind.Angel, id: i.toString() });\n        }\n        for (let i = 0; i < totalPets; i++) {\n            res.push({ kind: Kind.Pet, id: i.toString() });\n        }\n        for (let i = 0; i < totalAccessories; i++) {\n            res.push({ kind: Kind.Accessory, id: i.toString() });\n        }\n        return res;\n    }),\n    functions: {\n        transfer: asset => ({\n            type: Web3.AbiType.Function,\n            name: transferNames[asset.kind],\n            payable: false,\n            constant: false,\n            stateMutability: types_1.StateMutability.Nonpayable,\n            target: asset.kind === Kind.Pet ? targets[asset.kind] : dataTargets[asset.kind],\n            inputs: [\n                { kind: types_1.FunctionInputKind.Replaceable, name: '_to', type: 'address' },\n                { kind: types_1.FunctionInputKind.Asset, name: assetNames[asset.kind], type: assetTypes[asset.kind], value: asset.id },\n            ],\n            outputs: [],\n        }),\n        ownerOf: asset => ({\n            type: Web3.AbiType.Function,\n            name: 'ownerOf',\n            payable: false,\n            constant: true,\n            stateMutability: types_1.StateMutability.View,\n            target: targets[asset.kind],\n            inputs: [\n                { kind: types_1.FunctionInputKind.Asset, name: '_tokenId', type: 'uint256', value: asset.id },\n            ],\n            outputs: [\n                { kind: types_1.FunctionOutputKind.Owner, name: '_owner', type: 'address' },\n            ],\n        }),\n        assetsOfOwnerByIndex: ([Kind.Angel, Kind.Pet, Kind.Accessory].map(kind => ({\n            type: Web3.AbiType.Function,\n            name: 'getTokenByIndex',\n            payable: false,\n            constant: true,\n            stateMutability: types_1.StateMutability.View,\n            target: targets[kind],\n            inputs: [\n                { kind: types_1.FunctionInputKind.Owner, name: '_owner', type: 'address' },\n                { kind: types_1.FunctionInputKind.Index, name: 'index', type: 'uint256' },\n            ],\n            outputs: [\n                { kind: types_1.FunctionOutputKind.Asset, name: '', type: 'uint64' },\n            ],\n            assetFromOutputs: (output) => {\n                const str = output.toString();\n                if (str === '0') {\n                    return null;\n                }\n                else {\n                    return { kind, id: str };\n                }\n            },\n        }))),\n    },\n    events: {\n        transfer: [],\n    },\n    hash: a => a.kind + ':' + a.id,\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}