{"ast":null,"code":"var _jsxFileName = \"/Users/ivopascoal/Desktop/cuffies/src/components/SelectWalletModal/SelectWalletModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport Modal, { ModalBody, ModalCloseButton, ModalHeader, ModalTitle } from '../Modal';\nimport MetamaskLogo from '../../assets/img/metamask.png';\nimport TrustWalletLogo from \"../../assets/img/TrustWallet.svg\";\nimport MathWalletLogo from \"../../assets/img/MathWallet.svg\";\nimport safeWalletLogo from \"../../assets/img/SafeWallet.svg\";\nimport binanceLogo from \"../../assets/img/BinanceChain.svg\";\nimport TokenPocketLogo from \"../../assets/img/TokenPocker.svg\";\nimport WalletConnectLogo from '../../assets/img/wallet_connect.png';\nimport { UnsupportedChainIdError, useWeb3React } from '@web3-react/core';\nimport { useAddPopup, useSetConnectedAccount } from 'src/state/application/hooks';\nimport useWalletConnectors from '../../hooks/useWalletConnectors';\nimport { ConnectorNames } from 'src/state/application/reducer';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { useConfiguration } from 'src/contexts/ConfigProvider/ConfigProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectWalletModal = ({\n  onDismiss\n}) => {\n  _s();\n\n  const {\n    activate,\n    connector,\n    account\n  } = useWeb3React();\n  const connectors = useWalletConnectors();\n  const saveAccount = useSetConnectedAccount();\n  const addPopup = useAddPopup();\n  const {\n    defaultProvider,\n    etherscanUrl,\n    chainId\n  } = useConfiguration();\n  const wallets = [{\n    connector: ConnectorNames.Injected,\n    name: 'MetaMask',\n    image: MetamaskLogo\n  }, {\n    connector: ConnectorNames.WalletConnect,\n    name: 'Wallet Connect',\n    image: WalletConnectLogo\n  }, {\n    connector: ConnectorNames.BSC,\n    name: 'Binance Chain Wallet',\n    image: binanceLogo\n  }, {\n    connector: ConnectorNames.Injected,\n    name: 'TrustWallet',\n    image: TrustWalletLogo\n  }, {\n    connector: ConnectorNames.Injected,\n    name: 'MathWallet',\n    image: MathWalletLogo\n  }, {\n    connector: ConnectorNames.Injected,\n    name: 'TokenPocket',\n    image: TokenPocketLogo\n  }, {\n    connector: ConnectorNames.Injected,\n    name: 'SafePal Wallet',\n    image: safeWalletLogo\n  }];\n  const onConnectPress = useCallback(connectionId => {\n    activate(connectors[connectionId], error => {\n      if (error instanceof UnsupportedChainIdError && connectors[connectionId] instanceof InjectedConnector) {\n        window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: '0x' + chainId.toString(16),\n            // A 0x-prefixed hexadecimal string\n            chainName: 'Binance Smart Chain',\n            nativeCurrency: {\n              name: 'Binance Coin',\n              symbol: 'BNB',\n              decimals: 18\n            },\n            rpcUrls: Array.isArray(defaultProvider) ? defaultProvider : [defaultProvider],\n            blockExplorerUrls: [etherscanUrl]\n          }]\n        });\n      } else {\n        addPopup({\n          error: {\n            title: 'Connect wallet error',\n            message: error === null || error === void 0 ? void 0 : error.message\n          }\n        });\n      }\n\n      return;\n    });\n    saveAccount(account, connectionId);\n    onDismiss();\n  }, [account, activate, addPopup, chainId, connectors, defaultProvider, etherscanUrl, onDismiss, saveAccount]);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    size: \"sm\",\n    padding: \"0\",\n    children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n      children: [/*#__PURE__*/_jsxDEV(ModalTitle, {\n        children: \"Connect to a Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {\n        onClick: onDismiss,\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faTimes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: wallets.map(wallet => /*#__PURE__*/_jsxDEV(Item, {\n          onClick: () => {\n            if (connector !== connectors[wallet.connector]) {\n              onConnectPress(wallet.connector);\n            }\n          },\n          children: [/*#__PURE__*/_jsxDEV(WalletName, {\n            children: wallet.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(WalletLogo, {\n            src: wallet.image,\n            alt: `${wallet.name} Logo`,\n            width: 32,\n            height: 32\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this)]\n        }, wallet.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SelectWalletModal, \"UFsI+LicSybyhgzfJR1ANoTzLzQ=\", false, function () {\n  return [useWeb3React, useWalletConnectors, useSetConnectedAccount, useAddPopup, useConfiguration];\n});\n\n_c = SelectWalletModal;\nconst List = styled.ul`\n  overflow: hidden;\n  list-style-type: none;\n  padding: 0px;\n  margin: 0px;\n`;\n_c2 = List;\nconst Item = styled.li`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  margin: 10px 0px;\n  padding: 10px 15px;\n  border: solid 1px #c2c2c266;\n  border-radius: 10px;\n  &:hover {\n    background-color: #a3212a;\n    border-color: #a3212a;\n  }\n`;\n_c3 = Item;\nconst WalletName = styled.span`\n  font-size: 1.1rem;\n  font-weight: 500;\n`;\n_c4 = WalletName;\nconst WalletLogo = styled.img`\n  margin-left: auto;\n  border-radius: 24px;\n`;\n_c5 = WalletLogo;\nexport default SelectWalletModal;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"SelectWalletModal\");\n$RefreshReg$(_c2, \"List\");\n$RefreshReg$(_c3, \"Item\");\n$RefreshReg$(_c4, \"WalletName\");\n$RefreshReg$(_c5, \"WalletLogo\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/cuffies/src/components/SelectWalletModal/SelectWalletModal.tsx"],"names":["React","useCallback","styled","Modal","ModalBody","ModalCloseButton","ModalHeader","ModalTitle","MetamaskLogo","WalletConnectLogo","UnsupportedChainIdError","useWeb3React","useAddPopup","useSetConnectedAccount","useWalletConnectors","ConnectorNames","FontAwesomeIcon","faTimes","InjectedConnector","useConfiguration","SelectWalletModal","onDismiss","activate","connector","account","connectors","saveAccount","addPopup","defaultProvider","etherscanUrl","chainId","wallets","Injected","name","image","WalletConnect","BSC","binanceLogo","TrustWalletLogo","MathWalletLogo","TokenPocketLogo","safeWalletLogo","onConnectPress","connectionId","error","window","ethereum","request","method","params","toString","chainName","nativeCurrency","symbol","decimals","rpcUrls","Array","isArray","blockExplorerUrls","title","message","map","wallet","List","ul","Item","li","WalletName","span","WalletLogo","img"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport Modal, { ModalBody, ModalCloseButton, ModalHeader, ModalTitle } from '../Modal';\nimport MetamaskLogo from '../../assets/img/metamask.png';\nimport TrustWalletLogo from '../../assets/img/TrustWallet.svg';\nimport MathWalletLogo from '../../assets/img/MathWallet.svg';\nimport safeWalletLogo from '../../assets/img/SafeWallet.svg';\nimport binanceLogo from '../../assets/img/BinanceChain.svg';\nimport TokenPocketLogo from '../../assets/img/TokenPocker.svg';\nimport WalletConnectLogo from '../../assets/img/wallet_connect.png';\nimport { UnsupportedChainIdError, useWeb3React } from '@web3-react/core';\nimport { useAddPopup, useSetConnectedAccount } from 'src/state/application/hooks';\nimport useWalletConnectors from '../../hooks/useWalletConnectors';\nimport { ConnectorNames } from 'src/state/application/reducer';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { useConfiguration } from 'src/contexts/ConfigProvider/ConfigProvider';\n\nexport interface SelectWalletModalProps {\n  onDismiss?: () => void;\n}\n\ninterface Wallet {\n  connector: ConnectorNames;\n  name: string;\n  image: string;\n}\n\nconst SelectWalletModal: React.FC<SelectWalletModalProps> = ({ onDismiss }) => {\n  const { activate, connector, account } = useWeb3React();\n  const connectors = useWalletConnectors();\n  const saveAccount = useSetConnectedAccount();\n  const addPopup = useAddPopup();\n  const { defaultProvider, etherscanUrl, chainId } = useConfiguration();\n  const wallets = [\n    {\n      connector: ConnectorNames.Injected,\n      name: 'MetaMask',\n      image: MetamaskLogo,\n    },\n    {\n      connector: ConnectorNames.WalletConnect,\n      name: 'Wallet Connect',\n      image: WalletConnectLogo,\n    },\n    {\n      connector: ConnectorNames.BSC,\n      name: 'Binance Chain Wallet',\n      image: binanceLogo,\n    },\n    {\n      connector: ConnectorNames.Injected,\n      name: 'TrustWallet',\n      image: TrustWalletLogo,\n    },\n    {\n      connector: ConnectorNames.Injected,\n      name: 'MathWallet',\n      image: MathWalletLogo,\n    },\n    {\n      connector: ConnectorNames.Injected,\n      name: 'TokenPocket',\n      image: TokenPocketLogo,\n    },\n    {\n      connector: ConnectorNames.Injected,\n      name: 'SafePal Wallet',\n      image: safeWalletLogo,\n    },\n  ] as Wallet[];\n  const onConnectPress = useCallback(\n    (connectionId: ConnectorNames) => {\n      activate(connectors[connectionId], (error) => {\n        if (\n          error instanceof UnsupportedChainIdError &&\n          connectors[connectionId] instanceof InjectedConnector\n        ) {\n          window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [\n              {\n                chainId: '0x' + chainId.toString(16), // A 0x-prefixed hexadecimal string\n                chainName: 'Binance Smart Chain',\n                nativeCurrency: {\n                  name: 'Binance Coin',\n                  symbol: 'BNB',\n                  decimals: 18,\n                },\n                rpcUrls: Array.isArray(defaultProvider) ? defaultProvider : [defaultProvider],\n                blockExplorerUrls: [etherscanUrl],\n              },\n            ],\n          });\n        } else {\n          addPopup({\n            error: {\n              title: 'Connect wallet error',\n              message: error?.message,\n            },\n          });\n        }\n        return;\n      });\n      saveAccount(account, connectionId);\n      onDismiss();\n    },\n    [\n      account,\n      activate,\n      addPopup,\n      chainId,\n      connectors,\n      defaultProvider,\n      etherscanUrl,\n      onDismiss,\n      saveAccount,\n    ],\n  );\n  return (\n    <Modal size=\"sm\" padding=\"0\">\n      <ModalHeader>\n        <ModalTitle>Connect to a Wallet</ModalTitle>\n        <ModalCloseButton onClick={onDismiss}>\n          <FontAwesomeIcon icon={faTimes} />\n        </ModalCloseButton>\n      </ModalHeader>\n      <ModalBody>\n        <List>\n          {wallets.map((wallet) => (\n            <Item\n              key={wallet.name}\n              onClick={() => {\n                if (connector !== connectors[wallet.connector]) {\n                  onConnectPress(wallet.connector);\n                }\n              }}\n            >\n              <WalletName>{wallet.name}</WalletName>\n              <WalletLogo\n                src={wallet.image}\n                alt={`${wallet.name} Logo`}\n                width={32}\n                height={32}\n              />\n            </Item>\n          ))}\n        </List>\n      </ModalBody>\n    </Modal>\n  );\n};\n\nconst List = styled.ul`\n  overflow: hidden;\n  list-style-type: none;\n  padding: 0px;\n  margin: 0px;\n`;\n\nconst Item = styled.li<{ isActive?: boolean }>`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  margin: 10px 0px;\n  padding: 10px 15px;\n  border: solid 1px #c2c2c266;\n  border-radius: 10px;\n  &:hover {\n    background-color: #a3212a;\n    border-color: #a3212a;\n  }\n`;\n\nconst WalletName = styled.span`\n  font-size: 1.1rem;\n  font-weight: 500;\n`;\n\nconst WalletLogo = styled.img`\n  margin-left: auto;\n  border-radius: 24px;\n`;\n\nexport default SelectWalletModal;\n"]},"metadata":{},"sourceType":"module"}