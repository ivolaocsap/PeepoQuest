{"ast":null,"code":"var _jsxFileName = \"/Users/ivopascoal/Desktop/PhysicalNFTs/src/contexts/AccountBalanceProvider/AccountBalanceProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport ERC20 from '../../diamondhand/ERC20';\nimport { useBlockNumber } from '../../state/application/hooks';\nimport { useConfiguration } from '../ConfigProvider/ConfigProvider';\nimport { useWeb3React } from '@web3-react/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetBalanceContext = /*#__PURE__*/createContext(null);\nconst SetListeningTokenContext = /*#__PURE__*/createContext(null);\nexport const AccountBalanceProvider = ({\n  children\n}) => {\n  _s();\n\n  var _CuffiesBank2;\n\n  const [balance, setBalance] = useState({});\n  const [listeningToken, _setListeningToken] = useState([]);\n  const {\n    addresses\n  } = useConfiguration();\n  const isWindowVisible = useIsWindowVisible();\n  const blockNumber = useBlockNumber();\n  const lastCheckedBlockNumber = useRef();\n  const {\n    library: provider\n  } = useWeb3React();\n  const {\n    account\n  } = useWeb3React();\n  const getBalance = useCallback(async () => {\n    if (!account || !(addresses === null || addresses === void 0 ? void 0 : addresses.Multicall)) {\n      return {};\n    }\n\n    return await ERC20.multicallTokenBalance(provider, addresses.Multicall, listeningToken.map(t => t.address), account);\n  }, [account, addresses === null || addresses === void 0 ? void 0 : addresses.Multicall, listeningToken, provider]);\n  useEffect(() => {\n    var _CuffiesBank;\n\n    let mounted = true;\n\n    if (!((_CuffiesBank = CuffiesBank) === null || _CuffiesBank === void 0 ? void 0 : _CuffiesBank.isUnlocked)) {\n      setBalance({});\n    } else if (isWindowVisible) {\n      if (lastCheckedBlockNumber.current === blockNumber) {\n        return;\n      }\n\n      getBalance().then(res => {\n        if (mounted) {\n          setBalance(res);\n        }\n      });\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [blockNumber, CuffiesBank, (_CuffiesBank2 = CuffiesBank) === null || _CuffiesBank2 === void 0 ? void 0 : _CuffiesBank2.isUnlocked, listeningToken, isWindowVisible, getBalance]);\n  const setListeningToken = useCallback(token => {\n    if (!token) {\n      return;\n    }\n\n    _setListeningToken(x => {\n      if (x.some(t => t.symbol === token.symbol)) {\n        return x;\n      }\n\n      return [...x, token];\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GetBalanceContext.Provider, {\n    value: balance,\n    children: /*#__PURE__*/_jsxDEV(SetListeningTokenContext.Provider, {\n      value: setListeningToken,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AccountBalanceProvider, \"4I9MDN2tBqHgxBjISBWMeWdh9Bw=\", false, function () {\n  return [useConfiguration, useIsWindowVisible, useBlockNumber, useWeb3React, useWeb3React];\n});\n\n_c = AccountBalanceProvider;\nexport const useTokenBalance = token => {\n  _s2();\n\n  const setListeningToken = useContext(SetListeningTokenContext);\n  useEffect(() => {\n    if (token) {\n      setListeningToken(token);\n    }\n  }, [setListeningToken, token]);\n  const context = useContext(GetBalanceContext);\n\n  if (context == null || setListeningToken == null) {\n    throw new Error('BalanceContextProvider not found');\n  }\n\n  return token ? context[token.address] : null;\n};\n\n_s2(useTokenBalance, \"lWWDJhF7ehL1hRyVC7ziEw1JoSM=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountBalanceProvider\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/PhysicalNFTs/src/contexts/AccountBalanceProvider/AccountBalanceProvider.tsx"],"names":["createContext","useCallback","useContext","useEffect","useRef","useState","useIsWindowVisible","ERC20","useBlockNumber","useConfiguration","useWeb3React","GetBalanceContext","SetListeningTokenContext","AccountBalanceProvider","children","balance","setBalance","listeningToken","_setListeningToken","addresses","isWindowVisible","blockNumber","lastCheckedBlockNumber","library","provider","account","getBalance","Multicall","multicallTokenBalance","map","t","address","mounted","CuffiesBank","isUnlocked","current","then","res","setListeningToken","token","x","some","symbol","useTokenBalance","context","Error"],"mappings":";;;;AACA,SACEA,aADF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,SALF,EAMEC,MANF,EAOEC,QAPF,QAQO,OARP;AAUA,OAAOC,kBAAP,MAA+B,gCAA/B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,gBAAT,QAAiC,kCAAjC;AACA,SAASC,YAAT,QAA6B,kBAA7B;;AAGA,MAAMC,iBAAiB,gBAAGX,aAAa,CAAe,IAAf,CAAvC;AACA,MAAMY,wBAAwB,gBAAGZ,aAAa,CAAyB,IAAzB,CAA9C;AAEA,OAAO,MAAMa,sBAAyD,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAAA;;AACzF,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAe,EAAf,CAAtC;AACA,QAAM,CAACY,cAAD,EAAiBC,kBAAjB,IAAuCb,QAAQ,CAAU,EAAV,CAArD;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAgBV,gBAAgB,EAAtC;AACA,QAAMW,eAAe,GAAGd,kBAAkB,EAA1C;AACA,QAAMe,WAAW,GAAGb,cAAc,EAAlC;AAEA,QAAMc,sBAAsB,GAAGlB,MAAM,EAArC;AACA,QAAM;AAAEmB,IAAAA,OAAO,EAAEC;AAAX,MAAwBd,YAAY,EAA1C;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAcf,YAAY,EAAhC;AAEA,QAAMgB,UAAU,GAAGzB,WAAW,CAAC,YAAY;AACzC,QAAI,CAACwB,OAAD,IAAY,EAACN,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEQ,SAAZ,CAAhB,EAAuC;AACrC,aAAO,EAAP;AACD;;AACD,WAAO,MAAMpB,KAAK,CAACqB,qBAAN,CACXJ,QADW,EAEXL,SAAS,CAACQ,SAFC,EAGXV,cAAc,CAACY,GAAf,CAAoBC,CAAD,IAAOA,CAAC,CAACC,OAA5B,CAHW,EAIXN,OAJW,CAAb;AAMD,GAV6B,EAU3B,CAACA,OAAD,EAAUN,SAAV,aAAUA,SAAV,uBAAUA,SAAS,CAAEQ,SAArB,EAAgCV,cAAhC,EAAgDO,QAAhD,CAV2B,CAA9B;AAYArB,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,QAAI6B,OAAO,GAAG,IAAd;;AACA,QAAI,kBAACC,WAAD,iDAAC,aAAaC,UAAd,CAAJ,EAA8B;AAC5BlB,MAAAA,UAAU,CAAC,EAAD,CAAV;AACD,KAFD,MAEO,IAAII,eAAJ,EAAqB;AAC1B,UAAIE,sBAAsB,CAACa,OAAvB,KAAmCd,WAAvC,EAAoD;AAClD;AACD;;AAEDK,MAAAA,UAAU,GAAGU,IAAb,CAAmBC,GAAD,IAAS;AACzB,YAAIL,OAAJ,EAAa;AACXhB,UAAAA,UAAU,CAACqB,GAAD,CAAV;AACD;AACF,OAJD;AAKD;;AAED,WAAO,MAAM;AACXL,MAAAA,OAAO,GAAG,KAAV;AACD,KAFD;AAGD,GAnBQ,EAmBN,CACDX,WADC,EAEDY,WAFC,mBAGDA,WAHC,kDAGD,cAAaC,UAHZ,EAIDjB,cAJC,EAKDG,eALC,EAMDM,UANC,CAnBM,CAAT;AA4BA,QAAMY,iBAAiB,GAAGrC,WAAW,CAAEsC,KAAD,IAAkB;AACtD,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AACDrB,IAAAA,kBAAkB,CAAEsB,CAAD,IAAO;AACxB,UAAIA,CAAC,CAACC,IAAF,CAAQX,CAAD,IAAOA,CAAC,CAACY,MAAF,KAAaH,KAAK,CAACG,MAAjC,CAAJ,EAA8C;AAC5C,eAAOF,CAAP;AACD;;AAED,aAAO,CAAC,GAAGA,CAAJ,EAAOD,KAAP,CAAP;AACD,KANiB,CAAlB;AAOD,GAXoC,EAWlC,EAXkC,CAArC;AAaA,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAExB,OAAnC;AAAA,2BACE,QAAC,wBAAD,CAA0B,QAA1B;AAAmC,MAAA,KAAK,EAAEuB,iBAA1C;AAAA,gBACGxB;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAvEM;;GAAMD,sB;UAGWJ,gB,EACEH,kB,EACJE,c,EAGUE,Y,EACVA,Y;;;KATTG,sB;AAyEb,OAAO,MAAM8B,eAAe,GAAIJ,KAAD,IAA6B;AAAA;;AAC1D,QAAMD,iBAAiB,GAAGpC,UAAU,CAACU,wBAAD,CAApC;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoC,KAAJ,EAAW;AACTD,MAAAA,iBAAiB,CAACC,KAAD,CAAjB;AACD;AACF,GAJQ,EAIN,CAACD,iBAAD,EAAoBC,KAApB,CAJM,CAAT;AAMA,QAAMK,OAAO,GAAG1C,UAAU,CAACS,iBAAD,CAA1B;;AAEA,MAAIiC,OAAO,IAAI,IAAX,IAAmBN,iBAAiB,IAAI,IAA5C,EAAkD;AAChD,UAAM,IAAIO,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAED,SAAON,KAAK,GAAGK,OAAO,CAACL,KAAK,CAACR,OAAP,CAAV,GAA4B,IAAxC;AACD,CAfM;;IAAMY,e","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport {\n  createContext,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport useDiamondHand from '../../hooks/useDiamondHand';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport ERC20 from '../../diamondhand/ERC20';\nimport { useBlockNumber } from '../../state/application/hooks';\nimport { useConfiguration } from '../ConfigProvider/ConfigProvider';\nimport { useWeb3React } from '@web3-react/core';\n\ntype BalanceState = Record<string, BigNumber>;\nconst GetBalanceContext = createContext<BalanceState>(null);\nconst SetListeningTokenContext = createContext<(token: ERC20) => void>(null);\n\nexport const AccountBalanceProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [balance, setBalance] = useState<BalanceState>({});\n  const [listeningToken, _setListeningToken] = useState<ERC20[]>([]);\n  const { addresses } = useConfiguration();\n  const isWindowVisible = useIsWindowVisible();\n  const blockNumber = useBlockNumber();\n\n  const lastCheckedBlockNumber = useRef<number>();\n  const { library: provider } = useWeb3React();\n  const { account } = useWeb3React();\n\n  const getBalance = useCallback(async () => {\n    if (!account || !addresses?.Multicall) {\n      return {};\n    }\n    return await ERC20.multicallTokenBalance(\n      provider,\n      addresses.Multicall,\n      listeningToken.map((t) => t.address),\n      account,\n    );\n  }, [account, addresses?.Multicall, listeningToken, provider]);\n\n  useEffect(() => {\n    let mounted = true;\n    if (!CuffiesBank?.isUnlocked) {\n      setBalance({});\n    } else if (isWindowVisible) {\n      if (lastCheckedBlockNumber.current === blockNumber) {\n        return;\n      }\n\n      getBalance().then((res) => {\n        if (mounted) {\n          setBalance(res);\n        }\n      });\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [\n    blockNumber,\n    CuffiesBank,\n    CuffiesBank?.isUnlocked,\n    listeningToken,\n    isWindowVisible,\n    getBalance,\n  ]);\n\n  const setListeningToken = useCallback((token: ERC20) => {\n    if (!token) {\n      return;\n    }\n    _setListeningToken((x) => {\n      if (x.some((t) => t.symbol === token.symbol)) {\n        return x;\n      }\n\n      return [...x, token];\n    });\n  }, []);\n\n  return (\n    <GetBalanceContext.Provider value={balance}>\n      <SetListeningTokenContext.Provider value={setListeningToken}>\n        {children}\n      </SetListeningTokenContext.Provider>\n    </GetBalanceContext.Provider>\n  );\n};\n\nexport const useTokenBalance = (token: ERC20): BigNumber => {\n  const setListeningToken = useContext(SetListeningTokenContext);\n  useEffect(() => {\n    if (token) {\n      setListeningToken(token);\n    }\n  }, [setListeningToken, token]);\n\n  const context = useContext(GetBalanceContext);\n\n  if (context == null || setListeningToken == null) {\n    throw new Error('BalanceContextProvider not found');\n  }\n\n  return token ? context[token.address] : null;\n};\n"]},"metadata":{},"sourceType":"module"}