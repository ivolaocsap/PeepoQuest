{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable @typescript-eslint/ban-types */\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useAddPopup, useBlockNumber } from '../application/hooks';\nimport { checkedTransaction, finalizeTransaction } from './actions';\nexport function shouldCheck(lastBlockNumber, tx) {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\nexport default function Updater() {\n  _s();\n\n  const lastBlockNumber = useBlockNumber();\n  const dispatch = useDispatch();\n  const state = useSelector(state => state.transactions);\n  const {\n    library: provider,\n    chainId\n  } = useWeb3React();\n  const transactions = useMemo(() => {\n    var _state$chainId;\n\n    return chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {};\n  }, [chainId, state]); // show popup on confirm\n\n  const addPopup = useAddPopup();\n  useEffect(() => {\n    if (!chainId || !lastBlockNumber) {\n      return;\n    }\n\n    Object.keys(transactions).filter(hash => shouldCheck(lastBlockNumber, transactions[hash])).forEach(hash => {\n      provider.getTransactionReceipt(hash).then(receipt => {\n        if (receipt) {\n          var _transactions$hash;\n\n          dispatch(finalizeTransaction({\n            chainId,\n            hash,\n            receipt: {\n              blockHash: receipt.blockHash,\n              blockNumber: receipt.blockNumber,\n              contractAddress: receipt.contractAddress,\n              from: receipt.from,\n              status: receipt.status,\n              to: receipt.to,\n              transactionHash: receipt.transactionHash,\n              transactionIndex: receipt.transactionIndex\n            }\n          }));\n          addPopup({\n            txn: {\n              hash,\n              success: receipt.status == 1,\n              summary: (_transactions$hash = transactions[hash]) === null || _transactions$hash === void 0 ? void 0 : _transactions$hash.summary\n            }\n          }, hash);\n        } else {\n          dispatch(checkedTransaction({\n            chainId,\n            hash,\n            blockNumber: lastBlockNumber\n          }));\n        }\n      }).catch(error => {\n        console.error(`failed to check transaction hash: ${hash}`, error);\n      });\n    });\n  }, [chainId, transactions, lastBlockNumber, dispatch, addPopup, provider]);\n  return null;\n}\n\n_s(Updater, \"/Fcm4HdbtlJSdZnCBvgtIt1DDgY=\", false, function () {\n  return [useBlockNumber, useDispatch, useSelector, useWeb3React, useAddPopup];\n});\n\n_c = Updater;\n\nvar _c;\n\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/cuffies/src/state/transactions/updater.tsx"],"names":["useWeb3React","useEffect","useMemo","useDispatch","useSelector","useAddPopup","useBlockNumber","checkedTransaction","finalizeTransaction","shouldCheck","lastBlockNumber","tx","receipt","lastCheckedBlockNumber","blocksSinceCheck","minutesPending","Date","getTime","addedTime","Updater","dispatch","state","transactions","library","provider","chainId","addPopup","Object","keys","filter","hash","forEach","getTransactionReceipt","then","blockHash","blockNumber","contractAddress","from","status","to","transactionHash","transactionIndex","txn","success","summary","catch","error","console"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useAddPopup, useBlockNumber } from '../application/hooks';\nimport { AppDispatch, AppState } from '../index';\nimport { checkedTransaction, finalizeTransaction } from './actions';\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: { addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number },\n): boolean {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\n\nexport default function Updater(): null {\n  const lastBlockNumber = useBlockNumber();\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n  const { library: provider, chainId } = useWeb3React<JsonRpcProvider>();\n  const transactions = useMemo(() => {\n    return chainId ? state[chainId] ?? {} : {};\n  }, [chainId, state]);\n\n  // show popup on confirm\n  const addPopup = useAddPopup();\n\n  useEffect(() => {\n    if (!chainId || !lastBlockNumber) {\n      return;\n    }\n\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\n      .forEach((hash) => {\n        provider\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                }),\n              );\n              addPopup(\n                {\n                  txn: {\n                    hash,\n                    success: receipt.status == 1,\n                    summary: transactions[hash]?.summary,\n                  },\n                },\n                hash,\n              );\n            } else {\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }));\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error);\n          });\n      });\n  }, [chainId, transactions, lastBlockNumber, dispatch, addPopup, provider]);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}