{"ast":null,"code":"import { BinanceContract } from './BinanceContract';\nexport class ContractWrapper {\n  constructor(abi, _address, signerOrProvider) {\n    this.abi = abi;\n    this._address = _address;\n    this.signerOrProvider = signerOrProvider;\n    this._contract = void 0;\n    this._contract = new BinanceContract(_address, abi, signerOrProvider);\n  }\n\n  connect(signer) {\n    if (this.contract) {\n      this._contract = this.contract.connect(signer);\n    } else {\n      this._contract = new BinanceContract(this._address, this.abi, signer);\n    }\n  }\n\n  get address() {\n    return this._address;\n  }\n\n  get contract() {\n    return this._contract;\n  }\n\n}","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/cuffies/src/diamondhand/ContractWrapper.ts"],"names":["BinanceContract","ContractWrapper","constructor","abi","_address","signerOrProvider","_contract","connect","signer","contract","address"],"mappings":"AAEA,SAASA,eAAT,QAAgC,mBAAhC;AAIA,OAAO,MAAeC,eAAf,CAA+B;AAGpCC,EAAAA,WAAW,CACCC,GADD,EAEDC,QAFC,EAGCC,gBAHD,EAIT;AAAA,SAHUF,GAGV,GAHUA,GAGV;AAAA,SAFQC,QAER,GAFQA,QAER;AAAA,SADUC,gBACV,GADUA,gBACV;AAAA,SANQC,SAMR;AACA,SAAKA,SAAL,GAAiB,IAAIN,eAAJ,CAAoBI,QAApB,EAA8BD,GAA9B,EAAmCE,gBAAnC,CAAjB;AACD;;AAEDE,EAAAA,OAAO,CAACC,MAAD,EAA4B;AACjC,QAAI,KAAKC,QAAT,EAAmB;AACjB,WAAKH,SAAL,GAAiB,KAAKG,QAAL,CAAcF,OAAd,CAAsBC,MAAtB,CAAjB;AACD,KAFD,MAEO;AACL,WAAKF,SAAL,GAAiB,IAAIN,eAAJ,CAAoB,KAAKI,QAAzB,EAAmC,KAAKD,GAAxC,EAA6CK,MAA7C,CAAjB;AACD;AACF;;AAEU,MAAPE,OAAO,GAAG;AACZ,WAAO,KAAKN,QAAZ;AACD;;AAEW,MAARK,QAAQ,GAAG;AACb,WAAO,KAAKH,SAAZ;AACD;;AAzBmC","sourcesContent":["import { Provider } from '@ethersproject/abstract-provider';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport { BinanceContract } from './BinanceContract';\n\ntype Abi = any[];\n\nexport abstract class ContractWrapper {\n  protected _contract: BinanceContract;\n\n  constructor(\n    protected abi: Abi,\n    private _address: string,\n    protected signerOrProvider: Signer | Provider,\n  ) {\n    this._contract = new BinanceContract(_address, abi, signerOrProvider);\n  }\n\n  connect(signer: Signer | Provider) {\n    if (this.contract) {\n      this._contract = this.contract.connect(signer) as BinanceContract;\n    } else {\n      this._contract = new BinanceContract(this._address, this.abi, signer);\n    }\n  }\n\n  get address() {\n    return this._address;\n  }\n\n  get contract() {\n    return this._contract;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}