{"ast":null,"code":"var _jsxFileName = \"/Users/ivopascoal/Desktop/PhysicalNFTs/src/views/Farms/Field.tsx\";\nimport * as React from 'react';\n/* The available editors for the field */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Field = ({\n  id,\n  label,\n  editor,\n  options,\n  value\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-group\",\n    children: [label && /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this), editor.toLowerCase() === 'textbox' && /*#__PURE__*/_jsxDEV(\"input\", {\n      id: id,\n      type: \"text\",\n      value: value,\n      onChange: e => console.log(e)\n      /* TODO: push change to form values */\n      ,\n      onBlur: e => console.log(e)\n      /* TODO: validate field value */\n      ,\n      className: \"form-control\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this), editor.toLowerCase() === 'multilinetextbox' && /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: id,\n      value: value,\n      onChange: e => console.log(e)\n      /* TODO: push change to form values */\n      ,\n      onBlur: e => console.log(e)\n      /* TODO: validate field value */\n      ,\n      className: \"form-control\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), editor.toLowerCase() === 'dropdown' && /*#__PURE__*/_jsxDEV(\"select\", {\n      id: id,\n      name: id,\n      value: value,\n      onChange: e => console.log(e)\n      /* TODO: push change to form values */\n      ,\n      onBlur: e => console.log(e)\n      /* TODO: validate field value */\n      ,\n      className: \"form-control\",\n      children: options && options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option,\n        children: option\n      }, option, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_c = Field;\nField.defaultProps = {\n  editor: 'textbox'\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Field\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/PhysicalNFTs/src/views/Farms/Field.tsx"],"names":["React","Field","id","label","editor","options","value","toLowerCase","e","console","log","map","option","defaultProps"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA;;;AAoBA,OAAO,MAAMC,KAA6B,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,KAAN;AAAaC,EAAAA,MAAb;AAAqBC,EAAAA,OAArB;AAA8BC,EAAAA;AAA9B,CAAD,KAA2C;AACtF,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,eACGH,KAAK,iBAAI;AAAO,MAAA,OAAO,EAAED,EAAhB;AAAA,gBAAqBC;AAArB;AAAA;AAAA;AAAA;AAAA,YADZ,EAGGC,MAAM,CAAEG,WAAR,OAA0B,SAA1B,iBACC;AACE,MAAA,EAAE,EAAEL,EADN;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,KAAK,EAAEI,KAHT;AAIE,MAAA,QAAQ,EACLE,CAAD,IACEC,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAe;AANrB;AAQE,MAAA,MAAM,EACHA,CAAD,IACEC,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAe;AAVrB;AAYE,MAAA,SAAS,EAAC;AAZZ;AAAA;AAAA;AAAA;AAAA,YAJJ,EAoBGJ,MAAM,CAAEG,WAAR,OAA0B,kBAA1B,iBACC;AACE,MAAA,EAAE,EAAEL,EADN;AAEE,MAAA,KAAK,EAAEI,KAFT;AAGE,MAAA,QAAQ,EACLE,CAAD,IACEC,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAe;AALrB;AAOE,MAAA,MAAM,EACHA,CAAD,IACEC,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAe;AATrB;AAWE,MAAA,SAAS,EAAC;AAXZ;AAAA;AAAA;AAAA;AAAA,YArBJ,EAoCGJ,MAAM,CAAEG,WAAR,OAA0B,UAA1B,iBACC;AACE,MAAA,EAAE,EAAEL,EADN;AAEE,MAAA,IAAI,EAAEA,EAFR;AAGE,MAAA,KAAK,EAAEI,KAHT;AAIE,MAAA,QAAQ,EACLE,CAAD,IACEC,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAe;AANrB;AAQE,MAAA,MAAM,EACHA,CAAD,IACEC,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAe;AAVrB;AAYE,MAAA,SAAS,EAAC,cAZZ;AAAA,gBAcGH,OAAO,IACNA,OAAO,CAACM,GAAR,CAAaC,MAAD,iBACV;AAAqB,QAAA,KAAK,EAAEA,MAA5B;AAAA,kBACGA;AADH,SAAaA,MAAb;AAAA;AAAA;AAAA;AAAA,cADF;AAfJ;AAAA;AAAA;AAAA;AAAA,YArCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgED,CAjEM;KAAMX,K;AAkEbA,KAAK,CAACY,YAAN,GAAqB;AACnBT,EAAAA,MAAM,EAAE;AADW,CAArB","sourcesContent":["import * as React from 'react';\n\n/* The available editors for the field */\ntype Editor = 'textbox' | 'multilinetextbox' | 'dropdown';\n\nexport interface IFieldProps {\n  /* The unique field name */\n  id: string;\n\n  /* The label text for the field */\n  label?: string;\n\n  /* The editor for the field */\n  editor?: Editor;\n\n  /* The drop down items for the field */\n  options?: string[];\n\n  /* The field value */\n  value?: any;\n}\n\nexport const Field: React.SFC<IFieldProps> = ({ id, label, editor, options, value }) => {\n  return (\n    <div className=\"form-group\">\n      {label && <label htmlFor={id}>{label}</label>}\n\n      {editor!.toLowerCase() === 'textbox' && (\n        <input\n          id={id}\n          type=\"text\"\n          value={value}\n          onChange={\n            (e: React.FormEvent<HTMLInputElement>) =>\n              console.log(e) /* TODO: push change to form values */\n          }\n          onBlur={\n            (e: React.FormEvent<HTMLInputElement>) =>\n              console.log(e) /* TODO: validate field value */\n          }\n          className=\"form-control\"\n        />\n      )}\n\n      {editor!.toLowerCase() === 'multilinetextbox' && (\n        <textarea\n          id={id}\n          value={value}\n          onChange={\n            (e: React.FormEvent<HTMLTextAreaElement>) =>\n              console.log(e) /* TODO: push change to form values */\n          }\n          onBlur={\n            (e: React.FormEvent<HTMLTextAreaElement>) =>\n              console.log(e) /* TODO: validate field value */\n          }\n          className=\"form-control\"\n        />\n      )}\n\n      {editor!.toLowerCase() === 'dropdown' && (\n        <select\n          id={id}\n          name={id}\n          value={value}\n          onChange={\n            (e: React.FormEvent<HTMLSelectElement>) =>\n              console.log(e) /* TODO: push change to form values */\n          }\n          onBlur={\n            (e: React.FormEvent<HTMLSelectElement>) =>\n              console.log(e) /* TODO: validate field value */\n          }\n          className=\"form-control\"\n        >\n          {options &&\n            options.map((option) => (\n              <option key={option} value={option}>\n                {option}\n              </option>\n            ))}\n        </select>\n      )}\n\n      {/* TODO - display validation error */}\n    </div>\n  );\n};\nField.defaultProps = {\n  editor: 'textbox',\n};\n"]},"metadata":{},"sourceType":"module"}