{"ast":null,"code":"import format from 'date-fns/format';\nimport fromUnixTime from 'date-fns/fromUnixTime';\nexport const pad = num => {\n  return ('0' + num).slice(-2);\n};\nexport const hhmmss = secs => {\n  let minutes = Math.floor(secs / 60);\n  secs = secs % 60;\n  const hours = Math.floor(minutes / 60);\n  minutes = minutes % 60;\n  return `${pad(hours)}:${pad(minutes)}:${pad(secs)}`;\n};\nexport const formatSecs = (secs, formatter) => {\n  if (!secs) {\n    return;\n  }\n\n  return format(fromUnixTime(secs), formatter ? formatter : 'dd/MM/yyyy HH:mm:ss');\n};","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/cuffies/src/utils/formatTime.ts"],"names":["format","fromUnixTime","pad","num","slice","hhmmss","secs","minutes","Math","floor","hours","formatSecs","formatter"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AAEA,OAAO,MAAMC,GAAG,GAAIC,GAAD,IAAiB;AAClC,SAAO,CAAC,MAAMA,GAAP,EAAYC,KAAZ,CAAkB,CAAC,CAAnB,CAAP;AACD,CAFM;AAIP,OAAO,MAAMC,MAAM,GAAIC,IAAD,IAAkB;AACtC,MAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAG,EAAlB,CAAd;AACAA,EAAAA,IAAI,GAAGA,IAAI,GAAG,EAAd;AACA,QAAMI,KAAK,GAAGF,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,EAArB,CAAd;AACAA,EAAAA,OAAO,GAAGA,OAAO,GAAG,EAApB;AACA,SAAQ,GAAEL,GAAG,CAACQ,KAAD,CAAQ,IAAGR,GAAG,CAACK,OAAD,CAAU,IAAGL,GAAG,CAACI,IAAD,CAAO,EAAlD;AACD,CANM;AAQP,OAAO,MAAMK,UAAU,GAAG,CAACL,IAAD,EAAeM,SAAf,KAAsC;AAC9D,MAAI,CAACN,IAAL,EAAW;AACT;AACD;;AACD,SAAON,MAAM,CAACC,YAAY,CAACK,IAAD,CAAb,EAAqBM,SAAS,GAAGA,SAAH,GAAe,qBAA7C,CAAb;AACD,CALM","sourcesContent":["import format from 'date-fns/format';\nimport fromUnixTime from 'date-fns/fromUnixTime';\n\nexport const pad = (num: number) => {\n  return ('0' + num).slice(-2);\n};\n\nexport const hhmmss = (secs: number) => {\n  let minutes = Math.floor(secs / 60);\n  secs = secs % 60;\n  const hours = Math.floor(minutes / 60);\n  minutes = minutes % 60;\n  return `${pad(hours)}:${pad(minutes)}:${pad(secs)}`;\n};\n\nexport const formatSecs = (secs: number, formatter?: string) => {\n  if (!secs) {\n    return;\n  }\n  return format(fromUnixTime(secs), formatter ? formatter : 'dd/MM/yyyy HH:mm:ss');\n};\n"]},"metadata":{},"sourceType":"module"}