{"ast":null,"code":"import{createReducer}from'@reduxjs/toolkit';import{addTransaction,checkedTransaction,clearAllTransactions,finalizeTransaction}from'./actions';var now=function now(){return new Date().getTime();};export var initialState={};export default createReducer(initialState,function(builder){return builder.addCase(addTransaction,function(transactions,_ref){var _transactions$chainId,_transactions$chainId2;var _ref$payload=_ref.payload,chainId=_ref$payload.chainId,hash=_ref$payload.hash,from=_ref$payload.from,approval=_ref$payload.approval,summary=_ref$payload.summary,redemption=_ref$payload.redemption;if((_transactions$chainId=transactions[chainId])===null||_transactions$chainId===void 0?void 0:_transactions$chainId[hash]){return;}var txs=(_transactions$chainId2=transactions[chainId])!==null&&_transactions$chainId2!==void 0?_transactions$chainId2:{};txs[hash]={hash:hash,from:from,approval:approval,summary:summary,redemption:redemption,addedTime:now()};transactions[chainId]=txs;}).addCase(clearAllTransactions,function(transactions,_ref2){var chainId=_ref2.payload.chainId;if(!transactions[chainId])return;transactions[chainId]={};}).addCase(checkedTransaction,function(transactions,_ref3){var _transactions$chainId3;var _ref3$payload=_ref3.payload,chainId=_ref3$payload.chainId,hash=_ref3$payload.hash,blockNumber=_ref3$payload.blockNumber;var tx=(_transactions$chainId3=transactions[chainId])===null||_transactions$chainId3===void 0?void 0:_transactions$chainId3[hash];if(!tx){return;}if(!tx.lastCheckedBlockNumber){tx.lastCheckedBlockNumber=blockNumber;}else{tx.lastCheckedBlockNumber=Math.max(blockNumber,tx.lastCheckedBlockNumber);}}).addCase(finalizeTransaction,function(transactions,_ref4){var _transactions$chainId4;var _ref4$payload=_ref4.payload,hash=_ref4$payload.hash,chainId=_ref4$payload.chainId,receipt=_ref4$payload.receipt;var tx=(_transactions$chainId4=transactions[chainId])===null||_transactions$chainId4===void 0?void 0:_transactions$chainId4[hash];if(!tx){return;}tx.receipt=receipt;tx.confirmedTime=now();});});","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/cuffies/src/state/transactions/reducer.ts"],"names":["createReducer","addTransaction","checkedTransaction","clearAllTransactions","finalizeTransaction","now","Date","getTime","initialState","builder","addCase","transactions","payload","chainId","hash","from","approval","summary","redemption","txs","addedTime","blockNumber","tx","lastCheckedBlockNumber","Math","max","receipt","confirmedTime"],"mappings":"AAAA,OAASA,aAAT,KAA8B,kBAA9B,CACA,OACEC,cADF,CAEEC,kBAFF,CAGEC,oBAHF,CAIEC,mBAJF,KAMO,WANP,CAQA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,SAAM,IAAIC,CAAAA,IAAJ,GAAWC,OAAX,EAAN,EAAZ,CAoBA,MAAO,IAAMC,CAAAA,YAA8B,CAAG,EAAvC,CAEP,cAAeR,CAAAA,aAAa,CAACQ,YAAD,CAAe,SAACC,OAAD,QACzCA,CAAAA,OAAO,CACJC,OADH,CAEIT,cAFJ,CAGI,SAACU,YAAD,MAAuF,wEAAtEC,OAAsE,CAA3DC,OAA2D,cAA3DA,OAA2D,CAAlDC,IAAkD,cAAlDA,IAAkD,CAA5CC,IAA4C,cAA5CA,IAA4C,CAAtCC,QAAsC,cAAtCA,QAAsC,CAA5BC,OAA4B,cAA5BA,OAA4B,CAAnBC,UAAmB,cAAnBA,UAAmB,CACrF,0BAAIP,YAAY,CAACE,OAAD,CAAhB,gDAAI,sBAAwBC,IAAxB,CAAJ,CAAmC,CACjC,OACD,CACD,GAAMK,CAAAA,GAAG,yBAAGR,YAAY,CAACE,OAAD,CAAf,iEAA4B,EAArC,CACAM,GAAG,CAACL,IAAD,CAAH,CAAY,CAAEA,IAAI,CAAJA,IAAF,CAAQC,IAAI,CAAJA,IAAR,CAAcC,QAAQ,CAARA,QAAd,CAAwBC,OAAO,CAAPA,OAAxB,CAAiCC,UAAU,CAAVA,UAAjC,CAA6CE,SAAS,CAAEf,GAAG,EAA3D,CAAZ,CACAM,YAAY,CAACE,OAAD,CAAZ,CAAwBM,GAAxB,CACD,CAVL,EAYGT,OAZH,CAYWP,oBAZX,CAYiC,SAACQ,YAAD,OAA4C,IAAhBE,CAAAA,OAAgB,OAA3BD,OAA2B,CAAhBC,OAAgB,CACzE,GAAI,CAACF,YAAY,CAACE,OAAD,CAAjB,CAA4B,OAC5BF,YAAY,CAACE,OAAD,CAAZ,CAAwB,EAAxB,CACD,CAfH,EAgBGH,OAhBH,CAiBIR,kBAjBJ,CAkBI,SAACS,YAAD,OAA+D,oDAA9CC,OAA8C,CAAnCC,OAAmC,eAAnCA,OAAmC,CAA1BC,IAA0B,eAA1BA,IAA0B,CAApBO,WAAoB,eAApBA,WAAoB,CAC7D,GAAMC,CAAAA,EAAE,yBAAGX,YAAY,CAACE,OAAD,CAAf,iDAAG,uBAAwBC,IAAxB,CAAX,CACA,GAAI,CAACQ,EAAL,CAAS,CACP,OACD,CACD,GAAI,CAACA,EAAE,CAACC,sBAAR,CAAgC,CAC9BD,EAAE,CAACC,sBAAH,CAA4BF,WAA5B,CACD,CAFD,IAEO,CACLC,EAAE,CAACC,sBAAH,CAA4BC,IAAI,CAACC,GAAL,CAASJ,WAAT,CAAsBC,EAAE,CAACC,sBAAzB,CAA5B,CACD,CACF,CA5BL,EA8BGb,OA9BH,CA8BWN,mBA9BX,CA8BgC,SAACO,YAAD,OAA2D,oDAA1CC,OAA0C,CAA/BE,IAA+B,eAA/BA,IAA+B,CAAzBD,OAAyB,eAAzBA,OAAyB,CAAhBa,OAAgB,eAAhBA,OAAgB,CACvF,GAAMJ,CAAAA,EAAE,yBAAGX,YAAY,CAACE,OAAD,CAAf,iDAAG,uBAAwBC,IAAxB,CAAX,CACA,GAAI,CAACQ,EAAL,CAAS,CACP,OACD,CACDA,EAAE,CAACI,OAAH,CAAaA,OAAb,CACAJ,EAAE,CAACK,aAAH,CAAmBtB,GAAG,EAAtB,CACD,CArCH,CADyC,EAAf,CAA5B","sourcesContent":["import { createReducer } from '@reduxjs/toolkit';\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  SerializableTransactionReceipt,\n} from './actions';\n\nconst now = () => new Date().getTime();\n\nexport interface TransactionDetails {\n  hash: string;\n  approval?: { tokenAddress: string; spender: string };\n  redemption?: { poolAddress: string };\n  from: string;\n  summary?: string;\n  receipt?: SerializableTransactionReceipt;\n  lastCheckedBlockNumber?: number;\n  addedTime: number;\n  confirmedTime?: number;\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails;\n  };\n}\n\nexport const initialState: TransactionState = {};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(\n      addTransaction,\n      (transactions, { payload: { chainId, hash, from, approval, summary, redemption } }) => {\n        if (transactions[chainId]?.[hash]) {\n          return;\n        }\n        const txs = transactions[chainId] ?? {};\n        txs[hash] = { hash, from, approval, summary, redemption, addedTime: now() };\n        transactions[chainId] = txs;\n      },\n    )\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\n      if (!transactions[chainId]) return;\n      transactions[chainId] = {};\n    })\n    .addCase(\n      checkedTransaction,\n      (transactions, { payload: { chainId, hash, blockNumber } }) => {\n        const tx = transactions[chainId]?.[hash];\n        if (!tx) {\n          return;\n        }\n        if (!tx.lastCheckedBlockNumber) {\n          tx.lastCheckedBlockNumber = blockNumber;\n        } else {\n          tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n        }\n      },\n    )\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      tx.receipt = receipt;\n      tx.confirmedTime = now();\n    }),\n);\n"]},"metadata":{},"sourceType":"module"}