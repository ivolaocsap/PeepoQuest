{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport useDiamondHand from './useDiamondHand';\n\nconst usePlayerData = (battleId, one, two) => {\n  _s();\n\n  const dh = useDiamondHand();\n  const [vitalPoints1, setvitalPoints1] = useState();\n  const [vitalPoints2, setvitalPoints2] = useState();\n  const [atackForce1, setAtackForce1] = useState();\n  const [atackForce2, setAtackForce2] = useState();\n  const [char1, setMyChar1] = useState();\n  const [char2, setMyChar2] = useState();\n  const {\n    account\n  } = useWeb3React();\n  useEffect(() => {\n    let mounted = true;\n\n    if (!dh || !account || !one || !two) {\n      console.log(two);\n      return;\n    }\n\n    dh.NFT.playerVital(battleId, one).then(vitalPoints1 => {\n      if (!mounted) {\n        return;\n      }\n\n      setvitalPoints1(vitalPoints1);\n    });\n    dh.NFT.playerVital(battleId, two).then(vitalPoints2 => {\n      if (!mounted) {\n        return;\n      }\n\n      setvitalPoints2(vitalPoints2);\n    });\n    dh.NFT.playerAtack(battleId, one, two).then(atackForce1 => {\n      if (!mounted) {\n        return;\n      }\n\n      setAtackForce1(atackForce1);\n    });\n    dh.NFT.playerAtack(battleId, two, one).then(atackForce2 => {\n      if (!mounted) {\n        return;\n      }\n\n      setAtackForce2(atackForce2);\n    });\n    dh.NFT.UserCharacter(one).then(usercharacter => {\n      if (!mounted) {\n        return;\n      }\n\n      setMyChar1(usercharacter);\n    });\n    dh.NFT.UserCharacter(two).then(usercharacter => {\n      if (!mounted) {\n        return;\n      }\n\n      setMyChar2(usercharacter);\n    });\n    return () => {\n      mounted = false;\n    };\n  }, [dh, battleId, one, account]);\n  const data = {\n    vitalPoints1: vitalPoints1,\n    vitalPoints2: vitalPoints2,\n    atackForce1: atackForce1,\n    atackForce2: atackForce2,\n    char1: char1,\n    char2: char2\n  };\n  return data;\n};\n\n_s(usePlayerData, \"CuLU3C2h/jUfQEqGYCGHWEehD9M=\", false, function () {\n  return [useDiamondHand, useWeb3React];\n});\n\nexport default usePlayerData;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/Peepoquest/src/hooks/usePlayerData.ts"],"names":["useEffect","useState","useWeb3React","useDiamondHand","usePlayerData","battleId","one","two","dh","vitalPoints1","setvitalPoints1","vitalPoints2","setvitalPoints2","atackForce1","setAtackForce1","atackForce2","setAtackForce2","char1","setMyChar1","char2","setMyChar2","account","mounted","console","log","NFT","playerVital","then","playerAtack","UserCharacter","usercharacter","data"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { useWeb3React } from '@web3-react/core';\nimport useDiamondHand from './useDiamondHand';\n\nconst usePlayerData = (battleId: BigNumber, one: string, two: string) => {\n  const dh = useDiamondHand();\n\n  const [vitalPoints1, setvitalPoints1] = useState<BigNumber>();\n  const [vitalPoints2, setvitalPoints2] = useState<BigNumber>();\n  const [atackForce1, setAtackForce1] = useState<BigNumber>();\n  const [atackForce2, setAtackForce2] = useState<BigNumber>();\n  const [char1, setMyChar1] = useState<number>();\n  const [char2, setMyChar2] = useState<number>();\n\n  const { account } = useWeb3React();\n\n  useEffect(() => {\n    let mounted = true;\n    if (!dh || !account || !one || !two) {\n      console.log(two);\n      return;\n    }\n    dh.NFT.playerVital(battleId, one).then((vitalPoints1) => {\n      if (!mounted) {\n        return;\n      }\n      setvitalPoints1(vitalPoints1);\n    });\n    dh.NFT.playerVital(battleId, two).then((vitalPoints2) => {\n      if (!mounted) {\n        return;\n      }\n      setvitalPoints2(vitalPoints2);\n    });\n\n    dh.NFT.playerAtack(battleId, one, two).then((atackForce1) => {\n      if (!mounted) {\n        return;\n      }\n      setAtackForce1(atackForce1);\n    });\n    dh.NFT.playerAtack(battleId, two, one).then((atackForce2) => {\n      if (!mounted) {\n        return;\n      }\n      setAtackForce2(atackForce2);\n    });\n    dh.NFT.UserCharacter(one).then((usercharacter) => {\n      if (!mounted) {\n        return;\n      }\n      setMyChar1(usercharacter);\n    });\n    dh.NFT.UserCharacter(two).then((usercharacter) => {\n      if (!mounted) {\n        return;\n      }\n      setMyChar2(usercharacter);\n    });\n\n    return () => {\n      mounted = false;\n    };\n  }, [dh, battleId, one, account]);\n  const data = {\n    vitalPoints1: vitalPoints1,\n    vitalPoints2: vitalPoints2,\n    atackForce1: atackForce1,\n    atackForce2: atackForce2,\n    char1: char1,\n    char2: char2,\n  };\n  return data;\n};\n\nexport default usePlayerData;\n"]},"metadata":{},"sourceType":"module"}