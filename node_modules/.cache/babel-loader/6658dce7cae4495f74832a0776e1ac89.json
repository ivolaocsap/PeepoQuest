{"ast":null,"code":"var f = require('./formatters');\n\nvar SolidityType = require('./type');\n/**\n * SolidityTypeBytes is a prototype that represents the bytes type.\n * It matches:\n * bytes\n * bytes[]\n * bytes[4]\n * bytes[][]\n * bytes[3][]\n * bytes[][6][], ...\n * bytes32\n * bytes8[4]\n * bytes[3][]\n */\n\n\nvar SolidityTypeBytes = function () {\n  this._inputFormatter = f.formatInputBytes;\n  this._outputFormatter = f.formatOutputBytes;\n};\n\nSolidityTypeBytes.prototype = new SolidityType({});\nSolidityTypeBytes.prototype.constructor = SolidityTypeBytes;\n\nSolidityTypeBytes.prototype.isType = function (name) {\n  return !!name.match(/^bytes([0-9]{1,})(\\[([0-9]*)\\])*$/);\n};\n\nmodule.exports = SolidityTypeBytes;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/PhysicalNFTs/node_modules/@0xproject/web3-wrapper/node_modules/web3/lib/solidity/bytes.js"],"names":["f","require","SolidityType","SolidityTypeBytes","_inputFormatter","formatInputBytes","_outputFormatter","formatOutputBytes","prototype","constructor","isType","name","match","module","exports"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,cAAD,CAAf;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,QAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,iBAAiB,GAAG,YAAY;AAChC,OAAKC,eAAL,GAAuBJ,CAAC,CAACK,gBAAzB;AACA,OAAKC,gBAAL,GAAwBN,CAAC,CAACO,iBAA1B;AACH,CAHD;;AAKAJ,iBAAiB,CAACK,SAAlB,GAA8B,IAAIN,YAAJ,CAAiB,EAAjB,CAA9B;AACAC,iBAAiB,CAACK,SAAlB,CAA4BC,WAA5B,GAA0CN,iBAA1C;;AAEAA,iBAAiB,CAACK,SAAlB,CAA4BE,MAA5B,GAAqC,UAAUC,IAAV,EAAgB;AACjD,SAAO,CAAC,CAACA,IAAI,CAACC,KAAL,CAAW,mCAAX,CAAT;AACH,CAFD;;AAIAC,MAAM,CAACC,OAAP,GAAiBX,iBAAjB","sourcesContent":["var f = require('./formatters');\nvar SolidityType = require('./type');\n\n/**\n * SolidityTypeBytes is a prototype that represents the bytes type.\n * It matches:\n * bytes\n * bytes[]\n * bytes[4]\n * bytes[][]\n * bytes[3][]\n * bytes[][6][], ...\n * bytes32\n * bytes8[4]\n * bytes[3][]\n */\nvar SolidityTypeBytes = function () {\n    this._inputFormatter = f.formatInputBytes;\n    this._outputFormatter = f.formatOutputBytes;\n};\n\nSolidityTypeBytes.prototype = new SolidityType({});\nSolidityTypeBytes.prototype.constructor = SolidityTypeBytes;\n\nSolidityTypeBytes.prototype.isType = function (name) {\n    return !!name.match(/^bytes([0-9]{1,})(\\[([0-9]*)\\])*$/);\n};\n\nmodule.exports = SolidityTypeBytes;\n"]},"metadata":{},"sourceType":"script"}