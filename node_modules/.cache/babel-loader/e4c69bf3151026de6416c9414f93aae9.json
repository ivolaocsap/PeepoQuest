{"ast":null,"code":"import { BigNumber } from '@ethersproject/bignumber';\nimport { ContractWrapper } from './ContractWrapper';\nexport class Ticket extends ContractWrapper {\n  constructor(abi, address, signer) {\n    super(abi, address, signer);\n  }\n\n  async getUserTickets(lotteryId, userId) {\n    return await this.contract.getUserTickets(BigNumber.from(lotteryId), userId);\n  }\n\n  async getListTicketNumbers(ticketIds) {\n    const [ticketNumbers, sizeOfLottery] = await this.contract.getListTicketNumbers(ticketIds);\n    return ticketIds.map((id, index) => {\n      return {\n        id,\n        numbers: ticketNumbers.slice(sizeOfLottery * index, (index + 1) * sizeOfLottery).map(t => t.toNumber())\n      };\n    });\n  }\n\n  async getTicketClaimStatuses(ticketIds) {\n    const ticketStatuses = await this.contract.getTicketClaimStatuses(ticketIds);\n    return ticketIds.map((id, index) => {\n      return {\n        id,\n        claimed: ticketStatuses[index]\n      };\n    });\n  }\n\n  async getTicketNumbers(id) {\n    return await this.contract.getTicketNumbers(BigNumber.from(id));\n  }\n\n  async getNumberOfTickets(lotteryId) {\n    return await this.contract.getNumberOfTickets(lotteryId);\n  }\n\n}","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/cuffies/src/diamondhand/Ticket.ts"],"names":["BigNumber","ContractWrapper","Ticket","constructor","abi","address","signer","getUserTickets","lotteryId","userId","contract","from","getListTicketNumbers","ticketIds","ticketNumbers","sizeOfLottery","map","id","index","numbers","slice","t","toNumber","getTicketClaimStatuses","ticketStatuses","claimed","getTicketNumbers","getNumberOfTickets"],"mappings":"AAEA,SAASA,SAAT,QAA0B,0BAA1B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAO,MAAMC,MAAN,SAAqBD,eAArB,CAAqC;AAC1CE,EAAAA,WAAW,CAACC,GAAD,EAAaC,OAAb,EAA8BC,MAA9B,EAAyD;AAClE,UAAMF,GAAN,EAAWC,OAAX,EAAoBC,MAApB;AACD;;AAEmB,QAAdC,cAAc,CAACC,SAAD,EAAoBC,MAApB,EAAoC;AACtD,WAAO,MAAM,KAAKC,QAAL,CAAcH,cAAd,CAA6BP,SAAS,CAACW,IAAV,CAAeH,SAAf,CAA7B,EAAwDC,MAAxD,CAAb;AACD;;AAEyB,QAApBG,oBAAoB,CAACC,SAAD,EAAyB;AACjD,UAAM,CAACC,aAAD,EAAgBC,aAAhB,IAAiC,MAAM,KAAKL,QAAL,CAAcE,oBAAd,CAAmCC,SAAnC,CAA7C;AACA,WAAOA,SAAS,CAACG,GAAV,CAAc,CAACC,EAAD,EAAKC,KAAL,KAAe;AAClC,aAAO;AACLD,QAAAA,EADK;AAELE,QAAAA,OAAO,EAAEL,aAAa,CACnBM,KADM,CACAL,aAAa,GAAGG,KADhB,EACuB,CAACA,KAAK,GAAG,CAAT,IAAcH,aADrC,EAENC,GAFM,CAEDK,CAAD,IAAkBA,CAAC,CAACC,QAAF,EAFhB;AAFJ,OAAP;AAMD,KAPM,CAAP;AAQD;;AAE2B,QAAtBC,sBAAsB,CAACV,SAAD,EAAyB;AACnD,UAAMW,cAAc,GAAG,MAAM,KAAKd,QAAL,CAAca,sBAAd,CAAqCV,SAArC,CAA7B;AACA,WAAOA,SAAS,CAACG,GAAV,CAAc,CAACC,EAAD,EAAKC,KAAL,KAAe;AAClC,aAAO;AACLD,QAAAA,EADK;AAELQ,QAAAA,OAAO,EAAED,cAAc,CAACN,KAAD;AAFlB,OAAP;AAID,KALM,CAAP;AAMD;;AAEqB,QAAhBQ,gBAAgB,CAACT,EAAD,EAAa;AACjC,WAAO,MAAM,KAAKP,QAAL,CAAcgB,gBAAd,CAA+B1B,SAAS,CAACW,IAAV,CAAeM,EAAf,CAA/B,CAAb;AACD;;AAEuB,QAAlBU,kBAAkB,CAACnB,SAAD,EAAuB;AAC7C,WAAO,MAAM,KAAKE,QAAL,CAAciB,kBAAd,CAAiCnB,SAAjC,CAAb;AACD;;AArCyC","sourcesContent":["import { Provider } from '@ethersproject/abstract-provider';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { ContractWrapper } from './ContractWrapper';\n\nexport class Ticket extends ContractWrapper {\n  constructor(abi: any[], address: string, signer: Signer | Provider) {\n    super(abi, address, signer);\n  }\n\n  async getUserTickets(lotteryId: number, userId: string) {\n    return await this.contract.getUserTickets(BigNumber.from(lotteryId), userId);\n  }\n\n  async getListTicketNumbers(ticketIds: BigNumber[]) {\n    const [ticketNumbers, sizeOfLottery] = await this.contract.getListTicketNumbers(ticketIds);\n    return ticketIds.map((id, index) => {\n      return {\n        id,\n        numbers: ticketNumbers\n          .slice(sizeOfLottery * index, (index + 1) * sizeOfLottery)\n          .map((t: BigNumber) => t.toNumber()),\n      };\n    });\n  }\n\n  async getTicketClaimStatuses(ticketIds: BigNumber[]) {\n    const ticketStatuses = await this.contract.getTicketClaimStatuses(ticketIds);\n    return ticketIds.map((id, index) => {\n      return {\n        id,\n        claimed: ticketStatuses[index],\n      };\n    });\n  }\n\n  async getTicketNumbers(id: number) {\n    return await this.contract.getTicketNumbers(BigNumber.from(id));\n  }\n\n  async getNumberOfTickets(lotteryId: BigNumber) {\n    return await this.contract.getNumberOfTickets(lotteryId);\n  }\n}\n\nexport type TicketInfo = {\n  owner: string;\n  numbers: BigNumber[];\n  claimed: boolean;\n  lotteryId: BigNumber;\n};\n"]},"metadata":{},"sourceType":"module"}