{"ast":null,"code":"var _jsxFileName = \"/Users/ivopascoal/Desktop/BabyPepe/src/components/TokenInput/TokenInput.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { forwardRef, useCallback, useImperativeHandle, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { useTokenBalance } from '../../contexts/AccountBalanceProvider/AccountBalanceProvider';\nimport useDiamondHand from '../../hooks/useDiamondHand';\nimport { getDisplayNumber, parseNumber } from '../../utils/formatBN';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TokenInput = ({\n  token,\n  hasError,\n  disabled,\n  decimals,\n  precision,\n  onChange,\n  max = 1e9,\n  maxBalance,\n  value\n}, ref) => {\n  _s();\n\n  const [input, setInput] = useState(value ? getDisplayNumber(value, decimals) : '');\n\n  const _balance = useTokenBalance(token);\n\n  const diamondHand = useDiamondHand();\n  const balance = useMemo(() => {\n    if (maxBalance) {\n      return maxBalance;\n    }\n\n    return _balance;\n  }, [maxBalance, _balance]);\n  const patchInputValue = useCallback(newValue => {\n    let newInput = '';\n\n    try {\n      newInput = getDisplayNumber(newValue, decimals, precision, false, false, false, false);\n    } catch (e) {\n      newInput = '';\n    }\n\n    setInput(newInput || '');\n    return newInput;\n  }, [decimals, precision]);\n  useImperativeHandle(ref, () => ({\n    resetInput: patchInputValue\n  }), [patchInputValue]);\n\n  const onInputChange = event => {\n    const _value = event.target.value;\n    broadcast(_value);\n  };\n\n  const broadcast = _value => {\n    if (!isInputValid(_value)) {\n      return false;\n    }\n\n    if (!isNaN(+_value)) {\n      setInput(_value);\n      const parsedValue = parseNumber(_value, decimals, precision);\n      onChange(parsedValue);\n    }\n  };\n\n  const isInputValid = inputValue => {\n    var _splits$;\n\n    if (isNaN(+inputValue)) {\n      return false;\n    }\n\n    if (inputValue === undefined) {\n      return false;\n    }\n\n    const splits = inputValue.split('.');\n    const countDecimals = ((_splits$ = splits[1]) === null || _splits$ === void 0 ? void 0 : _splits$.length) || 0;\n\n    if (countDecimals > precision) {\n      return false;\n    }\n\n    if (+inputValue > max) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const onMax = () => {\n    patchInputValue(balance);\n    onChange(balance);\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledTokenInputWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(StyledTokenInput, {\n      hasError: hasError,\n      disabled: disabled,\n      type: \"text\",\n      pattern: \"^[0-9]*[.,]?[0-9]*$\",\n      placeholder: disabled ? '-' : '0.0',\n      minLength: 1,\n      maxLength: 79,\n      spellCheck: false,\n      inputMode: \"decimal\",\n      onChange: e => onInputChange(e),\n      value: input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), !disabled && (diamondHand === null || diamondHand === void 0 ? void 0 : diamondHand.isUnlocked) && /*#__PURE__*/_jsxDEV(StyledButtonMax, {\n      onClick: onMax,\n      children: \"MAX\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TokenInput, \"hs0Q2l5oKalgon2WRznAh0n09eI=\", false, function () {\n  return [useTokenBalance, useDiamondHand, useImperativeHandle];\n});\n\n_c = TokenInput;\nconst StyledTokenInputWrapper = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  margin-right: 10px;\n  flex: 1;\n`;\n_c2 = StyledTokenInputWrapper;\nconst StyledTokenInput = styled.input`\n  color: ${({\n  theme,\n  hasError\n}) => hasError ? theme.color.red[500] : theme.color.primary.light};\n  width: 0px;\n  position: relative;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: transparent;\n  font-size: 32px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  appearance: textfield;\n  font-family: ${({\n  theme\n}) => theme.font.monospace};\n  font-weight: bold;\n`;\n_c3 = StyledTokenInput;\nconst StyledButtonMax = styled.button`\n  appearance: none;\n  border: solid 2px ${props => props.theme.color.primary.main};\n  background-color: #5a8f35;\n  color: ${props => props.theme.color.primary.light};\n  font-size: 0.85rem;\n  padding: 3px 8px;\n  cursor: pointer;\n  transition: ease-in-out 100ms;\n  font-family: ${({\n  theme\n}) => theme.font.monospace};\n  font-weight: bold;\n  &:hover {\n    background-color: ${props => props.theme.color.primary.main};\n  }\n`;\n_c4 = StyledButtonMax;\nexport default _c5 = /*#__PURE__*/forwardRef(TokenInput);\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"TokenInput\");\n$RefreshReg$(_c2, \"StyledTokenInputWrapper\");\n$RefreshReg$(_c3, \"StyledTokenInput\");\n$RefreshReg$(_c4, \"StyledButtonMax\");\n$RefreshReg$(_c5, \"%default%\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/BabyPepe/src/components/TokenInput/TokenInput.tsx"],"names":["React","forwardRef","useCallback","useImperativeHandle","useMemo","useState","styled","useTokenBalance","useDiamondHand","getDisplayNumber","parseNumber","TokenInput","token","hasError","disabled","decimals","precision","onChange","max","maxBalance","value","ref","input","setInput","_balance","diamondHand","balance","patchInputValue","newValue","newInput","e","resetInput","onInputChange","event","_value","target","broadcast","isInputValid","isNaN","parsedValue","inputValue","undefined","splits","split","countDecimals","length","onMax","isUnlocked","StyledTokenInputWrapper","div","StyledTokenInput","theme","color","red","primary","light","font","monospace","StyledButtonMax","button","props","main"],"mappings":"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","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport React, { forwardRef, useCallback, useImperativeHandle, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { useTokenBalance } from '../../contexts/AccountBalanceProvider/AccountBalanceProvider';\nimport useDiamondHand from '../../hooks/useDiamondHand';\nimport ERC20 from '../../diamondhand/ERC20';\nimport { getDisplayNumber, parseNumber } from '../../utils/formatBN';\n\ninterface TokenInputProps {\n  token: ERC20;\n  decimals?: number;\n  precision?: number;\n  disabled?: boolean;\n  hasError?: boolean;\n  onMax?: () => void;\n  onChange?: (value: BigNumber) => void;\n  max?: number;\n  maxBalance?: BigNumber;\n  value?: BigNumber;\n}\n\nconst TokenInput: React.ForwardRefRenderFunction<unknown, TokenInputProps> = (\n  { token, hasError, disabled, decimals, precision, onChange, max = 1e9, maxBalance, value },\n  ref,\n) => {\n  const [input, setInput] = useState<string>(value ? getDisplayNumber(value, decimals) : '');\n  const _balance = useTokenBalance(token);\n  const diamondHand = useDiamondHand();\n  const balance = useMemo(() => {\n    if (maxBalance) {\n      return maxBalance;\n    }\n\n    return _balance;\n  }, [maxBalance, _balance]);\n\n  const patchInputValue = useCallback(\n    (newValue: BigNumber) => {\n      let newInput = '';\n      try {\n        newInput = getDisplayNumber(newValue, decimals, precision, false, false, false, false);\n      } catch (e) {\n        newInput = '';\n      }\n      setInput(newInput || '');\n      return newInput;\n    },\n    [decimals, precision],\n  );\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      resetInput: patchInputValue,\n    }),\n    [patchInputValue],\n  );\n\n  const onInputChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const _value = (event.target as HTMLInputElement).value;\n    broadcast(_value);\n  };\n\n  const broadcast = (_value: string) => {\n    if (!isInputValid(_value)) {\n      return false;\n    }\n    if (!isNaN(+_value)) {\n      setInput(_value);\n      const parsedValue = parseNumber(_value, decimals, precision);\n      onChange(parsedValue);\n    }\n  };\n\n  const isInputValid = (inputValue: string) => {\n    if (isNaN(+inputValue)) {\n      return false;\n    }\n    if (inputValue === undefined) {\n      return false;\n    }\n    const splits = inputValue.split('.');\n    const countDecimals = splits[1]?.length || 0;\n    if (countDecimals > precision) {\n      return false;\n    }\n    if (+inputValue > max) {\n      return false;\n    }\n    return true;\n  };\n\n  const onMax = () => {\n    patchInputValue(balance);\n    onChange(balance);\n  };\n\n  return (\n    <StyledTokenInputWrapper>\n      <StyledTokenInput\n        hasError={hasError}\n        disabled={disabled}\n        type=\"text\"\n        pattern=\"^[0-9]*[.,]?[0-9]*$\"\n        placeholder={disabled ? '-' : '0.0'}\n        minLength={1}\n        maxLength={79}\n        spellCheck={false}\n        inputMode=\"decimal\"\n        onChange={(e) => onInputChange(e)}\n        value={input}\n      ></StyledTokenInput>\n      {!disabled && diamondHand?.isUnlocked && (\n        <StyledButtonMax onClick={onMax}>MAX</StyledButtonMax>\n      )}\n    </StyledTokenInputWrapper>\n  );\n};\n\nconst StyledTokenInputWrapper = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  margin-right: 10px;\n  flex: 1;\n`;\n\nconst StyledTokenInput = styled.input<{ hasError?: boolean }>`\n  color: ${({ theme, hasError }) =>\n    hasError ? theme.color.red[500] : theme.color.primary.light};\n  width: 0px;\n  position: relative;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: transparent;\n  font-size: 32px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  appearance: textfield;\n  font-family: ${({ theme }) => theme.font.monospace};\n  font-weight: bold;\n`;\n\nconst StyledButtonMax = styled.button`\n  appearance: none;\n  border: solid 2px ${(props) => props.theme.color.primary.main};\n  background-color: #5a8f35;\n  color: ${(props) => props.theme.color.primary.light};\n  font-size: 0.85rem;\n  padding: 3px 8px;\n  cursor: pointer;\n  transition: ease-in-out 100ms;\n  font-family: ${({ theme }) => theme.font.monospace};\n  font-weight: bold;\n  &:hover {\n    background-color: ${(props) => props.theme.color.primary.main};\n  }\n`;\n\nexport default forwardRef(TokenInput);\n"]},"metadata":{},"sourceType":"module"}