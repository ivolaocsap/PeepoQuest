{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file method.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\nvar utils = require('../utils/utils');\n\nvar errors = require('./errors');\n\nvar Method = function (options) {\n  this.name = options.name;\n  this.call = options.call;\n  this.params = options.params || 0;\n  this.inputFormatter = options.inputFormatter;\n  this.outputFormatter = options.outputFormatter;\n  this.requestManager = null;\n};\n\nMethod.prototype.setRequestManager = function (rm) {\n  this.requestManager = rm;\n};\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\n\n\nMethod.prototype.getCall = function (args) {\n  return utils.isFunction(this.call) ? this.call(args) : this.call;\n};\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\n\n\nMethod.prototype.extractCallback = function (args) {\n  if (utils.isFunction(args[args.length - 1])) {\n    return args.pop(); // modify the args array!\n  }\n};\n/**\n * Should be called to check if the number of arguments is correct\n * \n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\n\n\nMethod.prototype.validateArgs = function (args) {\n  if (args.length !== this.params) {\n    throw errors.InvalidNumberOfRPCParams();\n  }\n};\n/**\n * Should be called to format input args of method\n * \n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\n\n\nMethod.prototype.formatInput = function (args) {\n  if (!this.inputFormatter) {\n    return args;\n  }\n\n  return this.inputFormatter.map(function (formatter, index) {\n    return formatter ? formatter(args[index]) : args[index];\n  });\n};\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\n\n\nMethod.prototype.formatOutput = function (result) {\n  return this.outputFormatter && result ? this.outputFormatter(result) : result;\n};\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\n\n\nMethod.prototype.toPayload = function (args) {\n  var call = this.getCall(args);\n  var callback = this.extractCallback(args);\n  var params = this.formatInput(args);\n  this.validateArgs(params);\n  return {\n    method: call,\n    params: params,\n    callback: callback\n  };\n};\n\nMethod.prototype.attachToObject = function (obj) {\n  var func = this.buildCall();\n  func.call = this.call; // TODO!!! that's ugly. filter.js uses it\n\n  var name = this.name.split('.');\n\n  if (name.length > 1) {\n    obj[name[0]] = obj[name[0]] || {};\n    obj[name[0]][name[1]] = func;\n  } else {\n    obj[name[0]] = func;\n  }\n};\n\nMethod.prototype.buildCall = function () {\n  var method = this;\n\n  var send = function () {\n    var payload = method.toPayload(Array.prototype.slice.call(arguments));\n\n    if (payload.callback) {\n      return method.requestManager.sendAsync(payload, function (err, result) {\n        payload.callback(err, method.formatOutput(result));\n      });\n    }\n\n    return method.formatOutput(method.requestManager.send(payload));\n  };\n\n  send.request = this.request.bind(this);\n  return send;\n};\n/**\n * Should be called to create pure JSONRPC request which can be used in batch request\n *\n * @method request\n * @param {...} params\n * @return {Object} jsonrpc request\n */\n\n\nMethod.prototype.request = function () {\n  var payload = this.toPayload(Array.prototype.slice.call(arguments));\n  payload.format = this.formatOutput.bind(this);\n  return payload;\n};\n\nmodule.exports = Method;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/PhysicalNFTs/node_modules/opensea-js/node_modules/web3/lib/web3/method.js"],"names":["utils","require","errors","Method","options","name","call","params","inputFormatter","outputFormatter","requestManager","prototype","setRequestManager","rm","getCall","args","isFunction","extractCallback","length","pop","validateArgs","InvalidNumberOfRPCParams","formatInput","map","formatter","index","formatOutput","result","toPayload","callback","method","attachToObject","obj","func","buildCall","split","send","payload","Array","slice","arguments","sendAsync","err","request","bind","format","module","exports"],"mappings":"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","sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file method.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar utils = require('../utils/utils');\nvar errors = require('./errors');\n\nvar Method = function (options) {\n    this.name = options.name;\n    this.call = options.call;\n    this.params = options.params || 0;\n    this.inputFormatter = options.inputFormatter;\n    this.outputFormatter = options.outputFormatter;\n    this.requestManager = null;\n};\n\nMethod.prototype.setRequestManager = function (rm) {\n    this.requestManager = rm;\n};\n\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n    return utils.isFunction(this.call) ? this.call(args) : this.call;\n};\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n    if (utils.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n * \n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfRPCParams();\n    }\n};\n\n/**\n * Should be called to format input args of method\n * \n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n    if (!this.inputFormatter) {\n        return args;\n    }\n\n    return this.inputFormatter.map(function (formatter, index) {\n        return formatter ? formatter(args[index]) : args[index];\n    });\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n    return this.outputFormatter && result ? this.outputFormatter(result) : result;\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n    var call = this.getCall(args);\n    var callback = this.extractCallback(args);\n    var params = this.formatInput(args);\n    this.validateArgs(params);\n\n    return {\n        method: call,\n        params: params,\n        callback: callback\n    };\n};\n\nMethod.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call; // TODO!!! that's ugly. filter.js uses it\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    } else {\n        obj[name[0]] = func; \n    }\n};\n\nMethod.prototype.buildCall = function() {\n    var method = this;\n    var send = function () {\n        var payload = method.toPayload(Array.prototype.slice.call(arguments));\n        if (payload.callback) {\n            return method.requestManager.sendAsync(payload, function (err, result) {\n                payload.callback(err, method.formatOutput(result));\n            });\n        }\n        return method.formatOutput(method.requestManager.send(payload));\n    };\n    send.request = this.request.bind(this);\n    return send;\n};\n\n/**\n * Should be called to create pure JSONRPC request which can be used in batch request\n *\n * @method request\n * @param {...} params\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\n\nmodule.exports = Method;\n"]},"metadata":{},"sourceType":"script"}