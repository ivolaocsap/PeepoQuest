/// <reference types="react" />
import { FullGestureState, State, EventTypes } from './state';
import { GestureKey } from './config';
export declare type Handler<Key extends GestureKey, EventType = EventTypes[Key]> = (state: Omit<FullGestureState<Key>, 'event'> & {
    event: EventType;
}) => any | void;
export declare type UserHandlers = {
    onDrag: Handler<'drag'>;
    onDragStart: Handler<'drag'>;
    onDragEnd: Handler<'drag'>;
    onPinch: Handler<'pinch'>;
    onPinchStart: Handler<'pinch'>;
    onPinchEnd: Handler<'pinch'>;
    onWheel: Handler<'wheel'>;
    onWheelStart: Handler<'wheel'>;
    onWheelEnd: Handler<'wheel'>;
    onMove: Handler<'move'>;
    onMoveStart: Handler<'move'>;
    onMoveEnd: Handler<'move'>;
    onScroll: Handler<'scroll'>;
    onScrollStart: Handler<'scroll'>;
    onScrollEnd: Handler<'scroll'>;
    onHover: Handler<'hover'>;
};
export declare type ReactDOMAttributes = React.DOMAttributes<EventTarget>;
declare type NativeHandlersKeys = keyof Omit<ReactDOMAttributes, keyof UserHandlers | 'children' | 'dangerouslySetInnerHTML'>;
declare type GetEventType<Key extends NativeHandlersKeys> = ReactDOMAttributes[Key] extends React.EventHandler<infer EventType> | undefined ? EventType : UIEvent;
export declare type NativeHandlers = {
    [key in NativeHandlersKeys]?: (state: State['shared'] & {
        event: GetEventType<key>;
        args: any;
    }, ...args: any) => void;
};
export declare type GestureHandlers = Partial<NativeHandlers & UserHandlers>;
export declare type InternalHandlers = {
    [Key in GestureKey]?: Handler<Key, any>;
};
export {};
