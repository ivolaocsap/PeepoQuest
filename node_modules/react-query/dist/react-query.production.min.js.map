{"version":3,"file":"react-query.production.min.js","sources":["../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../src/core/subscribable.ts","../node_modules/@babel/runtime/helpers/esm/extends.js","../src/core/utils.ts","../src/core/focusManager.ts","../src/core/onlineManager.ts","../src/core/retryer.ts","../src/core/notifyManager.ts","../src/core/logger.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/mutation.ts","../src/core/mutationCache.ts","../src/core/infiniteQueryBehavior.ts","../src/core/queryClient.ts","../src/core/queryObserver.ts","../src/core/queriesObserver.ts","../src/core/infiniteQueryObserver.ts","../src/core/mutationObserver.ts","../src/core/hydration.ts","../src/react/QueryClientProvider.tsx","../src/react/QueryErrorResetBoundary.tsx","../src/react/utils.ts","../src/react/useBaseQuery.ts","../src/react/Hydrate.tsx","../src/react/useInfiniteQuery.ts","../src/react/useIsFetching.ts","../src/react/useIsMutating.ts","../src/react/useMutation.ts","../src/react/useQueries.ts","../src/react/useQuery.ts"],"sourcesContent":["export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n  }\n\n  subscribe(listener?: TListener): () => void {\n    const callback = listener || (() => undefined)\n\n    this.listeners.push(callback as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== callback)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport { EnsuredQueryKey } from './types'\nimport type {\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Include or exclude active queries\n   */\n  active?: boolean\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include or exclude inactive queries\n   */\n  inactive?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include or exclude fetching queries\n   */\n  fetching?: boolean\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Include or exclude fetching mutations\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\nexport type QueryStatusFilter = 'all' | 'active' | 'inactive' | 'none'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function ensureQueryKeyArray<T extends QueryKey>(\n  value: T\n): EnsuredQueryKey<T> {\n  return (Array.isArray(value)\n    ? value\n    : ([value] as unknown)) as EnsuredQueryKey<T>\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<\n  TOptions extends QueryOptions<any, any, any, TQueryKey>,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1: TQueryKey | TOptions,\n  arg2?: QueryFunction<any, TQueryKey> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function parseMutationFilterArgs(\n  arg1?: QueryKey | MutationFilters,\n  arg2?: MutationFilters\n): MutationFilters | undefined {\n  return isQueryKey(arg1) ? { ...arg2, mutationKey: arg1 } : arg1\n}\n\nexport function mapQueryStatusFilter(\n  active?: boolean,\n  inactive?: boolean\n): QueryStatusFilter {\n  if (\n    (active === true && inactive === true) ||\n    (active == null && inactive == null)\n  ) {\n    return 'all'\n  } else if (active === false && inactive === false) {\n    return 'none'\n  } else {\n    // At this point, active|inactive can only be true|false or false|true\n    // so, when only one value is provided, the missing one has to be the negated value\n    const isActive = active ?? !inactive\n    return isActive ? 'active' : 'inactive'\n  }\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>\n): boolean {\n  const {\n    active,\n    exact,\n    fetching,\n    inactive,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  const queryStatusFilter = mapQueryStatusFilter(active, inactive)\n\n  if (queryStatusFilter === 'none') {\n    return false\n  } else if (queryStatusFilter !== 'all') {\n    const isActive = query.isActive()\n    if (queryStatusFilter === 'active' && !isActive) {\n      return false\n    }\n    if (queryStatusFilter === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (typeof fetching === 'boolean' && query.isFetching() !== fetching) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>\n): boolean {\n  const { exact, fetching, predicate, mutationKey } = filters\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (\n        hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)\n      ) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (\n    typeof fetching === 'boolean' &&\n    (mutation.state.status === 'loading') !== fetching\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  const asArray = ensureQueryKeyArray(queryKey)\n  return stableValueHash(asArray)\n}\n\n/**\n * Hashes the value into a stable hash.\n */\nexport function stableValueHash(value: any): string {\n  return JSON.stringify(value, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean {\n  return partialDeepEqual(ensureQueryKeyArray(a), ensureQueryKeyArray(b))\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: any): value is QueryKey {\n  return typeof value === 'string' || Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n\nexport function getAbortController(): AbortController | undefined {\n  if (typeof AbortController === 'function') {\n    return new AbortController()\n  }\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass FocusManager extends Subscribable {\n  private focused?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (setFocused: (focused?: boolean) => void) => () => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState\n    )\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onFocus => {\n        const listener = () => onFocus()\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', listener, false)\n        window.addEventListener('focus', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n          window.removeEventListener('focus', listener)\n        }\n      })\n    }\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass OnlineManager extends Subscribable {\n  private online?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (setOnline: (online?: boolean) => void) => () => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onOnline => {\n        const listener = () => onOnline()\n        // Listen to online\n        window.addEventListener('online', listener, false)\n        window.addEventListener('offline', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener)\n          window.removeEventListener('offline', listener)\n        }\n      })\n    }\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\nimport { CancelOptions } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\n// CLASS\n\nexport class Retryer<TData = unknown, TError = unknown> {\n  cancel: (options?: CancelOptions) => void\n  cancelRetry: () => void\n  continue: () => void\n  failureCount: number\n  isPaused: boolean\n  isResolved: boolean\n  isTransportCancelable: boolean\n  promise: Promise<TData>\n\n  private abort?: () => void\n\n  constructor(config: RetryerConfig<TData, TError>) {\n    let cancelRetry = false\n    let cancelFn: ((options?: CancelOptions) => void) | undefined\n    let continueFn: ((value?: unknown) => void) | undefined\n    let promiseResolve: (data: TData) => void\n    let promiseReject: (error: TError) => void\n\n    this.abort = config.abort\n    this.cancel = cancelOptions => cancelFn?.(cancelOptions)\n    this.cancelRetry = () => {\n      cancelRetry = true\n    }\n    this.continue = () => continueFn?.()\n    this.failureCount = 0\n    this.isPaused = false\n    this.isResolved = false\n    this.isTransportCancelable = false\n    this.promise = new Promise<TData>((outerResolve, outerReject) => {\n      promiseResolve = outerResolve\n      promiseReject = outerReject\n    })\n\n    const resolve = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onSuccess?.(value)\n        continueFn?.()\n        promiseResolve(value)\n      }\n    }\n\n    const reject = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onError?.(value)\n        continueFn?.()\n        promiseReject(value)\n      }\n    }\n\n    const pause = () => {\n      return new Promise(continueResolve => {\n        continueFn = continueResolve\n        this.isPaused = true\n        config.onPause?.()\n      }).then(() => {\n        continueFn = undefined\n        this.isPaused = false\n        config.onContinue?.()\n      })\n    }\n\n    // Create loop function\n    const run = () => {\n      // Do nothing if already resolved\n      if (this.isResolved) {\n        return\n      }\n\n      let promiseOrValue: any\n\n      // Execute query\n      try {\n        promiseOrValue = config.fn()\n      } catch (error) {\n        promiseOrValue = Promise.reject(error)\n      }\n\n      // Create callback to cancel this fetch\n      cancelFn = cancelOptions => {\n        if (!this.isResolved) {\n          reject(new CancelledError(cancelOptions))\n\n          this.abort?.()\n\n          // Cancel transport if supported\n          if (isCancelable(promiseOrValue)) {\n            try {\n              promiseOrValue.cancel()\n            } catch {}\n          }\n        }\n      }\n\n      // Check if the transport layer support cancellation\n      this.isTransportCancelable = isCancelable(promiseOrValue)\n\n      Promise.resolve(promiseOrValue)\n        .then(resolve)\n        .catch(error => {\n          // Stop if the fetch is already resolved\n          if (this.isResolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const retry = config.retry ?? 3\n          const retryDelay = config.retryDelay ?? defaultRetryDelay\n          const delay =\n            typeof retryDelay === 'function'\n              ? retryDelay(this.failureCount, error)\n              : retryDelay\n          const shouldRetry =\n            retry === true ||\n            (typeof retry === 'number' && this.failureCount < retry) ||\n            (typeof retry === 'function' && retry(this.failureCount, error))\n\n          if (cancelRetry || !shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          this.failureCount++\n\n          // Notify on fail\n          config.onFail?.(this.failureCount, error)\n\n          // Delay\n          sleep(delay)\n            // Pause if the document is not visible or when the device is offline\n            .then(() => {\n              if (!focusManager.isFocused() || !onlineManager.isOnline()) {\n                return pause()\n              }\n            })\n            .then(() => {\n              if (cancelRetry) {\n                reject(error)\n              } else {\n                run()\n              }\n            })\n        })\n    }\n\n    // Start loop\n    run()\n  }\n}\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\n// CLASS\n\nexport class NotifyManager {\n  private queue: NotifyCallback[]\n  private transactions: number\n  private notifyFn: NotifyFunction\n  private batchNotifyFn: BatchNotifyFunction\n\n  constructor() {\n    this.queue = []\n    this.transactions = 0\n\n    this.notifyFn = (callback: () => void) => {\n      callback()\n    }\n\n    this.batchNotifyFn = (callback: () => void) => {\n      callback()\n    }\n  }\n\n  batch<T>(callback: () => T): T {\n    this.transactions++\n    const result = callback()\n    this.transactions--\n    if (!this.transactions) {\n      this.flush()\n    }\n    return result\n  }\n\n  schedule(callback: NotifyCallback): void {\n    if (this.transactions) {\n      this.queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        this.notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  batchCalls<T extends Function>(callback: T): T {\n    return ((...args: any[]) => {\n      this.schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  flush(): void {\n    const queue = this.queue\n    this.queue = []\n    if (queue.length) {\n      scheduleMicrotask(() => {\n        this.batchNotifyFn(() => {\n          queue.forEach(callback => {\n            this.notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  setNotifyFunction(fn: NotifyFunction) {\n    this.notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  setBatchNotifyFunction(fn: BatchNotifyFunction) {\n    this.batchNotifyFn = fn\n  }\n}\n\n// SINGLETON\n\nexport const notifyManager = new NotifyManager()\n","// TYPES\n\nexport interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\n// FUNCTIONS\n\nlet logger: Logger = console\n\nexport function getLogger(): Logger {\n  return logger\n}\n\nexport function setLogger(newLogger: Logger) {\n  logger = newLogger\n}\n","import {\n  getAbortController,\n  Updater,\n  functionalUpdate,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  timeUntilStale,\n  ensureQueryKeyArray,\n} from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n  EnsuredQueryKey,\n  QueryMeta,\n  CancelOptions,\n  SetDataOptions,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { notifyManager } from './notifyManager'\nimport { getLogger } from './logger'\nimport { Retryer, isCancelledError } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isFetching: boolean\n  isInvalidated: boolean\n  isPaused: boolean\n  status: QueryStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: EnsuredQueryKey<TQueryKey>\n  state: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>\n  ) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  cacheTime!: number\n  meta: QueryMeta | undefined\n\n  private cache: QueryCache\n  private promise?: Promise<TData>\n  private gcTimeout?: number\n  private retryer?: Retryer<TData, TError>\n  private observers: QueryObserver<any, any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  private abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    this.abortSignalConsumed = false\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || this.getDefaultState(this.options)\n    this.state = this.initialState\n    this.meta = config.meta\n    this.scheduleGc()\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.meta = options?.meta\n\n    // Default to 5 minutes if not cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      this.options.cacheTime ?? 5 * 60 * 1000\n    )\n  }\n\n  setDefaultOptions(\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): void {\n    this.defaultOptions = options\n  }\n\n  private scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  private clearGcTimeout() {\n    clearTimeout(this.gcTimeout)\n    this.gcTimeout = undefined\n  }\n\n  private optionalRemove() {\n    if (!this.observers.length && !this.state.isFetching) {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data = functionalUpdate(updater, prevData)\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.options.isDataEqual?.(prevData, data)) {\n      data = prevData as TData\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n    })\n\n    return data\n  }\n\n  setState(\n    state: QueryState<TData, TError>,\n    setStateOptions?: SetStateOptions\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    this.clearGcTimeout()\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(observer => observer.options.enabled !== false)\n  }\n\n  isFetching(): boolean {\n    return this.state.isFetching\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some(observer => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable || this.abortSignalConsumed) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        if (this.cacheTime) {\n          this.scheduleGc()\n        } else {\n          this.cache.remove(this)\n        }\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions\n  ): Promise<TData> {\n    if (this.state.isFetching) {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    const queryKey = ensureQueryKeyArray(this.queryKey)\n    const abortController = getAbortController()\n\n    // Create query function context\n    const queryFnContext: QueryFunctionContext<TQueryKey> = {\n      queryKey,\n      pageParam: undefined,\n      meta: this.meta,\n    }\n\n    Object.defineProperty(queryFnContext, 'signal', {\n      enumerable: true,\n      get: () => {\n        if (abortController) {\n          this.abortSignalConsumed = true\n          return abortController.signal\n        }\n        return undefined\n      },\n    })\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn')\n      }\n      this.abortSignalConsumed = false\n      return this.options.queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData, TQueryKey> = {\n      fetchOptions,\n      options: this.options,\n      queryKey: queryKey,\n      state: this.state,\n      fetchFn,\n      meta: this.meta,\n    }\n\n    if (this.options.behavior?.onFetch) {\n      this.options.behavior?.onFetch(context)\n    }\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      !this.state.isFetching ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    // Try to fetch the data\n    this.retryer = new Retryer({\n      fn: context.fetchFn as () => TData,\n      abort: abortController?.abort?.bind(abortController),\n      onSuccess: data => {\n        this.setData(data as TData)\n\n        // Notify cache callback\n        this.cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onError: (error: TError | { silent?: boolean }) => {\n        // Optimistically update state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          this.dispatch({\n            type: 'error',\n            error: error as TError,\n          })\n        }\n\n        if (!isCancelledError(error)) {\n          // Notify cache callback\n          this.cache.config.onError?.(error, this as Query<any, any, any, any>)\n\n          // Log error\n          getLogger().error(error)\n        }\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    this.state = this.reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'queryUpdated', action })\n    })\n  }\n\n  protected getDefaultState(\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): QueryState<TData, TError> {\n    const data =\n      typeof options.initialData === 'function'\n        ? (options.initialData as InitialDataFunction<TData>)()\n        : options.initialData\n\n    const hasInitialData = typeof options.initialData !== 'undefined'\n\n    const initialDataUpdatedAt = hasInitialData\n      ? typeof options.initialDataUpdatedAt === 'function'\n        ? (options.initialDataUpdatedAt as () => number | undefined)()\n        : options.initialDataUpdatedAt\n      : 0\n\n    const hasData = typeof data !== 'undefined'\n\n    return {\n      data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle',\n    }\n  }\n\n  protected reducer(\n    state: QueryState<TData, TError>,\n    action: Action<TData, TError>\n  ): QueryState<TData, TError> {\n    switch (action.type) {\n      case 'failed':\n        return {\n          ...state,\n          fetchFailureCount: state.fetchFailureCount + 1,\n        }\n      case 'pause':\n        return {\n          ...state,\n          isPaused: true,\n        }\n      case 'continue':\n        return {\n          ...state,\n          isPaused: false,\n        }\n      case 'fetch':\n        return {\n          ...state,\n          fetchFailureCount: 0,\n          fetchMeta: action.meta ?? null,\n          isFetching: true,\n          isPaused: false,\n          status: !state.dataUpdatedAt ? 'loading' : state.status,\n        }\n      case 'success':\n        return {\n          ...state,\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success',\n        }\n      case 'error':\n        const error = action.error as unknown\n\n        if (isCancelledError(error) && error.revert && this.revertState) {\n          return { ...this.revertState }\n        }\n\n        return {\n          ...state,\n          error: error as TError,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error',\n        }\n      case 'invalidate':\n        return {\n          ...state,\n          isInvalidated: true,\n        }\n      case 'setState':\n        return {\n          ...state,\n          ...action.state,\n        }\n      default:\n        return state\n    }\n  }\n}\n","import {\n  QueryFilters,\n  hashQueryKeyByOptions,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Action, Query, QueryState } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded {\n  type: 'queryAdded'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved {\n  type: 'queryRemoved'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated {\n  type: 'queryUpdated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventObserverAdded {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventObserverRemoved {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventObserverResultsUpdated {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ntype QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventObserverAdded\n  | NotifyEventObserverRemoved\n  | NotifyEventObserverResultsUpdated\n\ntype QueryCacheListener = (event?: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n        meta: options.meta,\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'queryAdded',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter(x => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'queryRemoved', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueyKey extends QueryKey = QueryKey\n  >(\n    queryHash: string\n  ): Query<TQueryFnData, TError, TData, TQueyKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find(query => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return Object.keys(filters).length > 0\n      ? this.queries.filter(query => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { getLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Retryer } from './retryer'\nimport { noop } from './utils'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private retryer?: Retryer<TData, TError>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.observers = []\n    this.state = config.state || getDefaultState()\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n  }\n\n  cancel(): Promise<void> {\n    if (this.retryer) {\n      this.retryer.cancel()\n      return this.retryer.promise.then(noop).catch(noop)\n    }\n    return Promise.resolve()\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  execute(): Promise<TData> {\n    let data: TData\n\n    const restored = this.state.status === 'loading'\n\n    let promise = Promise.resolve()\n\n    if (!restored) {\n      this.dispatch({ type: 'loading', variables: this.options.variables! })\n      promise = promise\n        .then(() => this.options.onMutate?.(this.state.variables!))\n        .then(context => {\n          if (context !== this.state.context) {\n            this.dispatch({\n              type: 'loading',\n              context,\n              variables: this.state.variables,\n            })\n          }\n        })\n    }\n\n    return promise\n      .then(() => this.executeMutation())\n      .then(result => {\n        data = result\n        // Notify cache callback\n        this.mutationCache.config.onSuccess?.(\n          data,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>\n        )\n      })\n      .then(() =>\n        this.options.onSuccess?.(\n          data,\n          this.state.variables!,\n          this.state.context!\n        )\n      )\n      .then(() =>\n        this.options.onSettled?.(\n          data,\n          null,\n          this.state.variables!,\n          this.state.context\n        )\n      )\n      .then(() => {\n        this.dispatch({ type: 'success', data })\n        return data\n      })\n      .catch(error => {\n        // Notify cache callback\n        this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>\n        )\n\n        // Log error\n        getLogger().error(error)\n\n        return Promise.resolve()\n          .then(() =>\n            this.options.onError?.(\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() =>\n            this.options.onSettled?.(\n              undefined,\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() => {\n            this.dispatch({ type: 'error', error })\n            throw error\n          })\n      })\n  }\n\n  private executeMutation(): Promise<TData> {\n    this.retryer = new Retryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject('No mutationFn found')\n        }\n        return this.options.mutationFn(this.state.variables!)\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n    })\n\n    return this.retryer.promise\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    this.state = reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify(this)\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n\nfunction reducer<TData, TError, TVariables, TContext>(\n  state: MutationState<TData, TError, TVariables, TContext>,\n  action: Action<TData, TError, TVariables, TContext>\n): MutationState<TData, TError, TVariables, TContext> {\n  switch (action.type) {\n    case 'failed':\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case 'pause':\n      return {\n        ...state,\n        isPaused: true,\n      }\n    case 'continue':\n      return {\n        ...state,\n        isPaused: false,\n      }\n    case 'loading':\n      return {\n        ...state,\n        context: action.context,\n        data: undefined,\n        error: null,\n        isPaused: false,\n        status: 'loading',\n        variables: action.variables,\n      }\n    case 'success':\n      return {\n        ...state,\n        data: action.data,\n        error: null,\n        status: 'success',\n        isPaused: false,\n      }\n    case 'error':\n      return {\n        ...state,\n        data: undefined,\n        error: action.error,\n        failureCount: state.failureCount + 1,\n        isPaused: false,\n        status: 'error',\n      }\n    case 'setState':\n      return {\n        ...state,\n        ...action.state,\n      }\n    default:\n      return state\n  }\n}\n","import type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport { Mutation, MutationState } from './mutation'\nimport { matchMutation, MutationFilters, noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n}\n\ntype MutationCacheListener = (mutation?: Mutation) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify(mutation)\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter(x => x !== mutation)\n    mutation.cancel()\n    this.notify(mutation)\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  find<TData = unknown, TError = unknown, TVariables = any, TContext = unknown>(\n    filters: MutationFilters\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.mutations.find(mutation => matchMutation(filters, mutation))\n  }\n\n  findAll(filters: MutationFilters): Mutation[] {\n    return this.mutations.filter(mutation => matchMutation(filters, mutation))\n  }\n\n  notify(mutation?: Mutation<any, any, any, any>) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(mutation)\n      })\n    })\n  }\n\n  onFocus(): void {\n    this.resumePausedMutations()\n  }\n\n  onOnline(): void {\n    this.resumePausedMutations()\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused)\n    return notifyManager.batch(() =>\n      pausedMutations.reduce(\n        (promise, mutation) =>\n          promise.then(() => mutation.continue().catch(noop)),\n        Promise.resolve()\n      )\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\nimport { isCancelable } from './retryer'\nimport type {\n  InfiniteData,\n  QueryFunctionContext,\n  QueryOptions,\n  RefetchQueryFilters,\n} from './types'\nimport { getAbortController } from './utils'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        const refetchPage: RefetchQueryFilters['refetchPage'] | undefined =\n          context.fetchOptions?.meta?.refetchPage\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        const abortController = getAbortController()\n        const abortSignal = abortController?.signal\n        let newPageParams = oldPageParams\n        let cancelled = false\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        const buildNewPages = (\n          pages: unknown[],\n          param: unknown,\n          page: unknown,\n          previous?: boolean\n        ) => {\n          newPageParams = previous\n            ? [param, ...newPageParams]\n            : [...newPageParams, param]\n          return previous ? [page, ...pages] : [...pages, page]\n        }\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean\n        ): Promise<unknown[]> => {\n          if (cancelled) {\n            return Promise.reject('Cancelled')\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            signal: abortSignal,\n            pageParam: param,\n            meta: context.meta,\n          }\n\n          const queryFnResult = queryFn(queryFnContext)\n\n          const promise = Promise.resolve(queryFnResult).then(page =>\n            buildNewPages(pages, param, page, previous)\n          )\n\n          if (isCancelable(queryFnResult)) {\n            const promiseAsAny = promise as any\n            promiseAsAny.cancel = queryFnResult.cancel\n          }\n\n          return promise\n        }\n\n        let promise: Promise<unknown[]>\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          const shouldFetchFirstPage =\n            refetchPage && oldPages[0]\n              ? refetchPage(oldPages[0], 0, oldPages)\n              : true\n\n          // Fetch first page\n          promise = shouldFetchFirstPage\n            ? fetchPage([], manual, oldPageParams[0])\n            : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]))\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const shouldFetchNextPage =\n                refetchPage && oldPages[i]\n                  ? refetchPage(oldPages[i], i, oldPages)\n                  : true\n\n              if (shouldFetchNextPage) {\n                const param = manual\n                  ? oldPageParams[i]\n                  : getNextPageParam(context.options, pages)\n                return fetchPage(pages, manual, param)\n              }\n              return Promise.resolve(\n                buildNewPages(pages, oldPageParams[i], oldPages[i])\n              )\n            })\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        const finalPromiseAsAny = finalPromise as any\n\n        finalPromiseAsAny.cancel = () => {\n          cancelled = true\n          abortController?.abort()\n          if (isCancelable(promise)) {\n            promise.cancel()\n          }\n        }\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n  hashQueryKeyByOptions,\n  MutationFilters,\n} from './utils'\nimport type {\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  ResetQueryFilters,\n  SetDataOptions,\n} from './types'\nimport type { QueryState } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport { CancelOptions } from './types'\n\n// TYPES\n\ninterface QueryClientConfig {\n  queryCache?: QueryCache\n  mutationCache?: MutationCache\n  defaultOptions?: DefaultOptions\n}\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onFocus()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onOnline()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetching = true\n    return this.queryCache.findAll(filters).length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.mutationCache.findAll({ ...filters, fetching: true }).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  getQueriesData<TData = unknown>(queryKey: QueryKey): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(filters: QueryFilters): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(\n    queryKeyOrFilters: QueryKey | QueryFilters\n  ): [QueryKey, TData][] {\n    return this.getQueryCache()\n      .findAll(queryKeyOrFilters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TData\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(updater, options)\n  }\n\n  setQueriesData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][]\n\n  setQueriesData<TData>(\n    filters: QueryFilters,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][]\n\n  setQueriesData<TData>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][] {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(queryKeyOrFilters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TData>(queryKey, updater, options),\n        ])\n    )\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | ResetQueryFilters,\n    arg2?: ResetQueryFilters | ResetOptions,\n    arg3?: ResetOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      ...filters,\n      active: true,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions))\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const refetchFilters: RefetchQueryFilters = {\n      ...filters,\n      // if filters.refetchActive is not provided and filters.active is explicitly false,\n      // e.g. invalidateQueries({ active: false }), we don't want to refetch active queries\n      active: filters.refetchActive ?? filters.active ?? true,\n      inactive: filters.refetchInactive ?? false,\n    }\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | RefetchQueryFilters,\n    arg2?: RefetchQueryFilters | RefetchOptions,\n    arg3?: RefetchOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query =>\n        query.fetch(undefined, {\n          ...options,\n          meta: { refetchPage: filters?.refetchPage },\n        })\n      )\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  cancelMutations(): Promise<void> {\n    const promises = notifyManager.batch(() =>\n      this.mutationCache.getAll().map(mutation => mutation.cancel())\n    )\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.getMutationCache().resumePausedMutations()\n  }\n\n  executeMutation<\n    TData = unknown,\n    TError = unknown,\n    TVariables = void,\n    TContext = unknown\n  >(\n    options: MutationOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    return this.mutationCache.build(this, options).execute()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.queryDefaults.find(\n      x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    return queryKey\n      ? this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey))\n          ?.defaultOptions\n      : undefined\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.mutationDefaults.find(\n      x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    return mutationKey\n      ? this.mutationDefaults.find(x =>\n          partialMatchKey(mutationKey, x.mutationKey)\n        )?.defaultOptions\n      : undefined\n  }\n\n  defaultQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey\n  >(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey> {\n    if (options?._defaulted) {\n      return options\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    } as QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions\n      )\n    }\n\n    return defaultedOptions\n  }\n\n  defaultQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey\n  >(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey> {\n    return this.defaultQueryOptions(options)\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n","import { RefetchQueryFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n  ResultOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { getLogger } from './logger'\nimport { isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private previousSelectError: Error | null\n  private staleTimeoutId?: number\n  private refetchIntervalId?: number\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Array<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = []\n    this.previousSelectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOnReconnect(this.currentQuery, this.options)\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOnWindowFocus(this.currentQuery, this.options)\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearTimers()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryObserverOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        defaultedOptions as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    return this.createResult(query, defaultedOptions)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          const typedKey = key as keyof QueryObserverResult\n          if (!this.trackedProps.includes(typedKey)) {\n            this.trackedProps.push(typedKey)\n          }\n          return result[typedKey]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getNextResult(\n    options?: ResultOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return new Promise((resolve, reject) => {\n      const unsubscribe = this.subscribe(result => {\n        if (!result.isFetching) {\n          unsubscribe()\n          if (result.isError && options?.throwOnError) {\n            reject(result.error)\n          } else {\n            resolve(result)\n          }\n        }\n      })\n    })\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>(\n    options?: RefetchOptions & RefetchQueryFilters<TPageData>\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage: options?.refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        defaultedOptions as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch(fetchOptions).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearTimers(): void {\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n  }\n\n  private clearStaleTimeout(): void {\n    clearTimeout(this.staleTimeoutId)\n    this.staleTimeoutId = undefined\n  }\n\n  private clearRefetchInterval(): void {\n    clearInterval(this.refetchIntervalId)\n    this.refetchIntervalId = undefined\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, isFetching, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options.optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        isFetching = true\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === prevResultOptions?.select &&\n        !this.previousSelectError\n      ) {\n        data = prevResult.data\n      } else {\n        try {\n          data = options.select(state.data)\n          if (options.structuralSharing !== false) {\n            data = replaceEqualDeep(prevResult?.data, data)\n          }\n          this.previousSelectError = null\n        } catch (selectError) {\n          getLogger().error(selectError)\n          error = selectError\n          this.previousSelectError = selectError\n          errorUpdatedAt = Date.now()\n          status = 'error'\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = (state.data as unknown) as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      (status === 'loading' || status === 'idle')\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            if (options.structuralSharing !== false) {\n              placeholderData = replaceEqualDeep(\n                prevResult?.data,\n                placeholderData\n              )\n            }\n            this.previousSelectError = null\n          } catch (selectError) {\n            getLogger().error(selectError)\n            error = selectError\n            this.previousSelectError = selectError\n            errorUpdatedAt = Date.now()\n            status = 'error'\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData as TData\n        isPlaceholderData = true\n      }\n    }\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      isIdle: status === 'idle',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && status !== 'loading',\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  private shouldNotifyListeners(\n    result: QueryObserverResult,\n    prevResult?: QueryObserverResult\n  ): boolean {\n    if (!prevResult) {\n      return true\n    }\n\n    const { notifyOnChangeProps, notifyOnChangePropsExclusions } = this.options\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true\n    }\n\n    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {\n      return true\n    }\n\n    const includedProps =\n      notifyOnChangeProps === 'tracked'\n        ? this.trackedProps\n        : notifyOnChangeProps\n\n    return Object.keys(result).some(key => {\n      const typedKey = key as keyof QueryObserverResult\n      const changed = result[typedKey] !== prevResult[typedKey]\n      const isIncluded = includedProps?.some(x => x === key)\n      const isExcluded = notifyOnChangePropsExclusions?.some(x => x === key)\n      return changed && !isExcluded && (!includedProps || isIncluded)\n    })\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    this.currentResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify if something has changed\n    if (shallowEqualObjects(this.currentResult, prevResult)) {\n      return\n    }\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    if (\n      notifyOptions?.listeners !== false &&\n      this.shouldNotifyListeners(this.currentResult, prevResult)\n    ) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        this.options as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client\n          .getQueryCache()\n          .notify({ query: this.currentQuery, type: 'observerResultsUpdated' })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldRefetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    query.state.dataUpdatedAt > 0 &&\n    (options.refetchOnMount === 'always' ||\n      (options.refetchOnMount !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options)\n  )\n}\n\nfunction shouldFetchOnReconnect(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (options.refetchOnReconnect === 'always' ||\n      (options.refetchOnReconnect !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOnWindowFocus(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (options.refetchOnWindowFocus === 'always' ||\n      (options.refetchOnWindowFocus !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense ||\n      query.state.status !== 'error' ||\n      prevOptions.enabled === false) &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type { QueryObserverOptions, QueryObserverResult } from './types'\nimport type { QueryClient } from './queryClient'\nimport { NotifyOptions, QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach(observer => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions\n  ): void {\n    this.queries = queries\n    this.updateObservers(notifyOptions)\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return queries.map((options, index) => {\n      const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n      return this.getObserver(defaultedOptions, index).getOptimisticResult(\n        defaultedOptions\n      )\n    })\n  }\n\n  private getObserver(\n    options: QueryObserverOptions,\n    index: number\n  ): QueryObserver {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n    let currentObserver = this.observersMap[defaultedOptions.queryHash!]\n    if (!currentObserver && defaultedOptions.keepPreviousData) {\n      currentObserver = this.observers[index]\n    }\n    return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n  }\n\n  private updateObservers(notifyOptions?: NotifyOptions): void {\n    notifyManager.batch(() => {\n      let hasIndexChange = false\n\n      const prevObservers = this.observers\n      const prevObserversMap = this.observersMap\n\n      const newResult: QueryObserverResult[] = []\n      const newObservers: QueryObserver[] = []\n      const newObserversMap: Record<string, QueryObserver> = {}\n\n      this.queries.forEach((options, i) => {\n        const defaultedOptions = this.client.defaultQueryObserverOptions(\n          options\n        )\n        const queryHash = defaultedOptions.queryHash!\n        const observer = this.getObserver(defaultedOptions, i)\n\n        if (prevObserversMap[queryHash] || defaultedOptions.keepPreviousData) {\n          observer.setOptions(defaultedOptions, notifyOptions)\n        }\n\n        if (observer !== prevObservers[i]) {\n          hasIndexChange = true\n        }\n\n        newObservers.push(observer)\n        newResult.push(observer.getCurrentResult())\n        newObserversMap[queryHash] = observer\n      })\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result)\n      })\n    })\n  }\n}\n","import type {\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport { ObserverFetchOptions, QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions?: ObserverFetchOptions\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): void {\n    super.setOptions({\n      ...options,\n      behavior: infiniteQueryBehavior(),\n    })\n  }\n\n  getOptimisticResult(\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      // TODO consider removing `?? true` in future breaking change, to be consistent with `refetch` API (see https://github.com/tannerlinsley/react-query/issues/2617)\n      cancelRefetch: options?.cancelRefetch ?? true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      // TODO consider removing `?? true` in future breaking change, to be consistent with `refetch` API (see https://github.com/tannerlinsley/react-query/issues/2617)\n      cancelRefetch: options?.cancelRefetch ?? true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage:\n        state.isFetching && state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.isFetching &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    this.options = this.client.defaultMutationOptions(options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type {\n  MutationKey,\n  MutationOptions,\n  QueryKey,\n  QueryOptions,\n} from './types'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  dehydrateMutations?: boolean\n  dehydrateQueries?: boolean\n  shouldDehydrateMutation?: ShouldDehydrateMutationFunction\n  shouldDehydrateQuery?: ShouldDehydrateQueryFunction\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n}\n\nexport interface DehydratedState {\n  mutations: DehydratedMutation[]\n  queries: DehydratedQuery[]\n}\n\nexport type ShouldDehydrateQueryFunction = (query: Query) => boolean\n\nexport type ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n  }\n}\n\nfunction defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nfunction defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options?: DehydrateOptions\n): DehydratedState {\n  options = options || {}\n\n  const mutations: DehydratedMutation[] = []\n  const queries: DehydratedQuery[] = []\n\n  if (options?.dehydrateMutations !== false) {\n    const shouldDehydrateMutation =\n      options.shouldDehydrateMutation || defaultShouldDehydrateMutation\n\n    client\n      .getMutationCache()\n      .getAll()\n      .forEach(mutation => {\n        if (shouldDehydrateMutation(mutation)) {\n          mutations.push(dehydrateMutation(mutation))\n        }\n      })\n  }\n\n  if (options?.dehydrateQueries !== false) {\n    const shouldDehydrateQuery =\n      options.shouldDehydrateQuery || defaultShouldDehydrateQuery\n\n    client\n      .getQueryCache()\n      .getAll()\n      .forEach(query => {\n        if (shouldDehydrateQuery(query)) {\n          queries.push(dehydrateQuery(query))\n        }\n      })\n  }\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(dehydratedMutation => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n      },\n      dehydratedMutation.state\n    )\n  })\n\n  queries.forEach(dehydratedQuery => {\n    const query = queryCache.get(dehydratedQuery.queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey: dehydratedQuery.queryKey,\n        queryHash: dehydratedQuery.queryHash,\n      },\n      dehydratedQuery.state\n    )\n  })\n}\n","import React from 'react'\n\nimport { QueryClient } from '../core'\n\ndeclare global {\n  interface Window {\n    ReactQueryClientContext?: React.Context<QueryClient | undefined>\n  }\n}\n\nconst defaultContext = React.createContext<QueryClient | undefined>(undefined)\nconst QueryClientSharingContext = React.createContext<boolean>(false)\n\n// if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(contextSharing: boolean) {\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext\n    }\n\n    return window.ReactQueryClientContext\n  }\n\n  return defaultContext\n}\n\nexport const useQueryClient = () => {\n  const queryClient = React.useContext(\n    getQueryClientContext(React.useContext(QueryClientSharingContext))\n  )\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return queryClient\n}\n\nexport interface QueryClientProviderProps {\n  client: QueryClient\n  contextSharing?: boolean\n}\n\nexport const QueryClientProvider: React.FC<QueryClientProviderProps> = ({\n  client,\n  contextSharing = false,\n  children,\n}) => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  const Context = getQueryClientContext(contextSharing)\n\n  return (\n    <QueryClientSharingContext.Provider value={contextSharing}>\n      <Context.Provider value={client}>{children}</Context.Provider>\n    </QueryClientSharingContext.Provider>\n  )\n}\n","import React from 'react'\n\n// CONTEXT\n\ninterface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary: React.FC<QueryErrorResetBoundaryProps> = ({\n  children,\n}) => {\n  const value = React.useMemo(() => createValue(), [])\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","export function shouldThrowError<TError>(\n  suspense: boolean | undefined,\n  _useErrorBoundary: boolean | ((err: TError) => boolean) | undefined,\n  error: TError\n): boolean {\n  // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n  if (typeof _useErrorBoundary === 'function') {\n    return _useErrorBoundary(error)\n  }\n\n  // Allow useErrorBoundary to override suspense's throwing behavior\n  if (typeof _useErrorBoundary === 'boolean') return _useErrorBoundary\n\n  // If suspense is enabled default to throwing errors\n  return !!suspense\n}\n","import React from 'react'\n\nimport { QueryKey } from '../core'\nimport { notifyManager } from '../core/notifyManager'\nimport { QueryObserver } from '../core/queryObserver'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseBaseQueryOptions } from './types'\nimport { shouldThrowError } from './utils'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver\n) {\n  const mountedRef = React.useRef(false)\n  const [, forceUpdate] = React.useState(0)\n\n  const queryClient = useQueryClient()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryObserverOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions.optimisticResults = true\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled\n    )\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n\n    // Set cache time to 1 if the option has been set to 0\n    // when using suspense to prevent infinite loop of fetches\n    if (defaultedOptions.cacheTime === 0) {\n      defaultedOptions.cacheTime = 1\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false\n    }\n  }\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions\n      )\n  )\n\n  let result = observer.getOptimisticResult(defaultedOptions)\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    errorResetBoundary.clearReset()\n\n    const unsubscribe = observer.subscribe(\n      notifyManager.batchCalls(() => {\n        if (mountedRef.current) {\n          forceUpdate(x => x + 1)\n        }\n      })\n    )\n\n    // Update result to make sure we did not miss any query updates\n    // between creating the observer and subscribing to it.\n    observer.updateResult()\n\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [errorResetBoundary, observer])\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (defaultedOptions.suspense && result.isLoading) {\n    throw observer\n      .fetchOptimistic(defaultedOptions)\n      .then(({ data }) => {\n        defaultedOptions.onSuccess?.(data as TData)\n        defaultedOptions.onSettled?.(data, null)\n      })\n      .catch(error => {\n        errorResetBoundary.clearReset()\n        defaultedOptions.onError?.(error)\n        defaultedOptions.onSettled?.(undefined, error)\n      })\n  }\n\n  // Handle error boundary\n  if (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(\n      defaultedOptions.suspense,\n      defaultedOptions.useErrorBoundary,\n      result.error\n    )\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  if (defaultedOptions.notifyOnChangeProps === 'tracked') {\n    result = observer.trackResult(result)\n  }\n\n  return result\n}\n","import React from 'react'\n\nimport { hydrate, HydrateOptions } from '../core'\nimport { useQueryClient } from './QueryClientProvider'\n\nexport function useHydrate(state: unknown, options?: HydrateOptions) {\n  const queryClient = useQueryClient()\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n  React.useMemo(() => {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current)\n    }\n  }, [queryClient, state])\n}\n\nexport interface HydrateProps {\n  state?: unknown\n  options?: HydrateOptions\n}\n\nexport const Hydrate: React.FC<HydrateProps> = ({\n  children,\n  options,\n  state,\n}) => {\n  useHydrate(state, options)\n  return children as React.ReactElement<any>\n}\n","import { QueryObserver } from '../core'\nimport { InfiniteQueryObserver } from '../core/infiniteQueryObserver'\nimport { QueryFunction, QueryKey } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseInfiniteQueryOptions, UseInfiniteQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey'\n  >\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey' | 'queryFn'\n  >\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1:\n    | TQueryKey\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg3?: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >\n): UseInfiniteQueryResult<TData, TError> {\n  const options = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver\n  ) as UseInfiniteQueryResult<TData, TError>\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { QueryKey } from '../core/types'\nimport { parseFilterArgs, QueryFilters } from '../core/utils'\nimport { useQueryClient } from './QueryClientProvider'\n\nexport function useIsFetching(filters?: QueryFilters): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters\n): number {\n  const mountedRef = React.useRef(false)\n\n  const queryClient = useQueryClient()\n\n  const [filters] = parseFilterArgs(arg1, arg2)\n  const [isFetching, setIsFetching] = React.useState(\n    queryClient.isFetching(filters)\n  )\n\n  const filtersRef = React.useRef(filters)\n  filtersRef.current = filters\n  const isFetchingRef = React.useRef(isFetching)\n  isFetchingRef.current = isFetching\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    const unsubscribe = queryClient.getQueryCache().subscribe(\n      notifyManager.batchCalls(() => {\n        if (mountedRef.current) {\n          const newIsFetching = queryClient.isFetching(filtersRef.current)\n          if (isFetchingRef.current !== newIsFetching) {\n            setIsFetching(newIsFetching)\n          }\n        }\n      })\n    )\n\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [queryClient])\n\n  return isFetching\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { QueryKey } from '../core/types'\nimport { MutationFilters, parseMutationFilterArgs } from '../core/utils'\nimport { useQueryClient } from './QueryClientProvider'\n\nexport function useIsMutating(filters?: MutationFilters): number\nexport function useIsMutating(\n  queryKey?: QueryKey,\n  filters?: MutationFilters\n): number\nexport function useIsMutating(\n  arg1?: QueryKey | MutationFilters,\n  arg2?: MutationFilters\n): number {\n  const mountedRef = React.useRef(false)\n  const filters = parseMutationFilterArgs(arg1, arg2)\n\n  const queryClient = useQueryClient()\n\n  const [isMutating, setIsMutating] = React.useState(\n    queryClient.isMutating(filters)\n  )\n\n  const filtersRef = React.useRef(filters)\n  filtersRef.current = filters\n  const isMutatingRef = React.useRef(isMutating)\n  isMutatingRef.current = isMutating\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    const unsubscribe = queryClient.getMutationCache().subscribe(\n      notifyManager.batchCalls(() => {\n        if (mountedRef.current) {\n          const newIsMutating = queryClient.isMutating(filtersRef.current)\n          if (isMutatingRef.current !== newIsMutating) {\n            setIsMutating(newIsMutating)\n          }\n        }\n      })\n    )\n\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [queryClient])\n\n  return isMutating\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { noop, parseMutationArgs } from '../core/utils'\nimport { MutationObserver } from '../core/mutationObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport { MutationFunction, MutationKey } from '../core/types'\nimport { shouldThrowError } from './utils'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const mountedRef = React.useRef(false)\n  const [, forceUpdate] = React.useState(0)\n\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient()\n\n  const obsRef = React.useRef<MutationObserver<any, any, any, any>>()\n\n  if (!obsRef.current) {\n    obsRef.current = new MutationObserver(queryClient, options)\n  } else {\n    obsRef.current.setOptions(options)\n  }\n\n  const currentResult = obsRef.current.getCurrentResult()\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    const unsubscribe = obsRef.current!.subscribe(\n      notifyManager.batchCalls(() => {\n        if (mountedRef.current) {\n          forceUpdate(x => x + 1)\n        }\n      })\n    )\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [])\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >((variables, mutateOptions) => {\n    obsRef.current!.mutate(variables, mutateOptions).catch(noop)\n  }, [])\n\n  if (\n    currentResult.error &&\n    shouldThrowError(\n      undefined,\n      obsRef.current.options.useErrorBoundary,\n      currentResult.error\n    )\n  ) {\n    throw currentResult.error\n  }\n\n  return { ...currentResult, mutate, mutateAsync: currentResult.mutate }\n}\n","import React from 'react'\nimport { QueryFunction } from '../core/types'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { QueriesObserver } from '../core/queriesObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseQueryOptions, UseQueryResult } from './types'\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\ntype GetOptions<T extends any> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptions<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryOptions<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryOptions<unknown, TError, TData>\n    : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n    T extends [infer TQueryFnData, infer TError, infer TData]\n    ? UseQueryOptions<TQueryFnData, TError, TData>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryOptions<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryOptions<TQueryFnData>\n    : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<infer TQueryFnData>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryOptions<TQueryFnData, unknown, TData>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData> }\n    ? UseQueryOptions<TQueryFnData>\n    : // Fallback\n      UseQueryOptions\n\ntype GetResults<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? UseQueryResult<TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryResult<TData, TError>\n    : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n    T extends [any, infer TError, infer TData]\n    ? UseQueryResult<TData, TError>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryResult<TQueryFnData>\n    : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<any>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryResult<TData>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData> }\n    ? UseQueryResult<TQueryFnData>\n    : // Fallback\n      UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\ntype QueriesOptions<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = []\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryOptions[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetOptions<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]>\n  : unknown[] extends T\n  ? T\n  : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n  // use this to infer the param types in the case of Array.map() argument\n  T extends UseQueryOptions<infer TQueryFnData, infer TError, infer TData>[]\n  ? UseQueryOptions<TQueryFnData, TError, TData>[]\n  : // Fallback\n    UseQueryOptions[]\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\ntype QueriesResults<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = []\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryResult[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetResults<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]>\n  : T extends UseQueryOptions<infer TQueryFnData, infer TError, infer TData>[]\n  ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n    UseQueryResult<unknown extends TData ? TQueryFnData : TData, TError>[]\n  : // Fallback\n    UseQueryResult[]\n\nexport function useQueries<T extends any[]>(\n  queries: readonly [...QueriesOptions<T>]\n): QueriesResults<T> {\n  const mountedRef = React.useRef(false)\n  const [, forceUpdate] = React.useState(0)\n\n  const queryClient = useQueryClient()\n\n  const defaultedQueries = queries.map(options => {\n    const defaultedOptions = queryClient.defaultQueryObserverOptions(options)\n\n    // Make sure the results are already in fetching state before subscribing or updating options\n    defaultedOptions.optimisticResults = true\n\n    return defaultedOptions\n  })\n\n  const [observer] = React.useState(\n    () => new QueriesObserver(queryClient, defaultedQueries)\n  )\n\n  const result = observer.getOptimisticResult(defaultedQueries)\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    const unsubscribe = observer.subscribe(\n      notifyManager.batchCalls(() => {\n        if (mountedRef.current) {\n          forceUpdate(x => x + 1)\n        }\n      })\n    )\n\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [observer])\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, { listeners: false })\n  }, [defaultedQueries, observer])\n\n  return result as QueriesResults<T>\n}\n","import { QueryObserver } from '../core'\nimport { QueryFunction, QueryKey } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseQueryOptions, UseQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","Subscribable","listeners","subscribe","listener","callback","push","onSubscribe","_this","filter","x","onUnsubscribe","hasListeners","this","length","_extends","assign","target","i","arguments","source","key","hasOwnProperty","call","apply","isServer","window","noop","isValidTimeout","value","Infinity","ensureQueryKeyArray","Array","isArray","difference","array1","array2","indexOf","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseFilterArgs","matchQuery","filters","query","active","exact","fetching","inactive","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","queryStatusFilter","mapQueryStatusFilter","isActive","isStale","isFetching","matchMutation","mutation","mutationKey","hashQueryKey","state","status","queryKeyHashFn","asArray","JSON","stringify","_","val","isPlainObject","keys","sort","reduce","result","a","b","partialDeepEqual","some","replaceEqualDeep","array","aSize","bItems","bSize","copy","equalItems","o","hasObjectPrototype","ctor","prot","toString","scheduleMicrotask","Promise","resolve","then","catch","error","setTimeout","getAbortController","AbortController","focusManager","removeEventListener","setDefaultEventListener","setEventListener","setup","focused","setFocused","onFocus","forEach","isFocused","document","undefined","includes","visibilityState","_window","addEventListener","onlineManager","online","setOnline","onOnline","isOnline","navigator","onLine","defaultRetryDelay","failureCount","min","isCancelable","cancel","CancelledError","revert","silent","isCancelledError","Retryer","config","cancelFn","continueFn","promiseResolve","promiseReject","cancelRetry","abort","cancelOptions","continue","isPaused","isResolved","isTransportCancelable","promise","outerResolve","outerReject","onSuccess","reject","onError","run","promiseOrValue","fn","timeout","retry","retryDelay","delay","shouldRetry","onFail","continueResolve","onPause","onContinue","notifyManager","queue","transactions","notifyFn","batchNotifyFn","batch","flush","schedule","batchCalls","args","_this2","_this3","setNotifyFunction","setBatchNotifyFunction","logger","console","getLogger","Query","abortSignalConsumed","defaultOptions","setOptions","observers","cache","initialState","getDefaultState","meta","scheduleGc","cacheTime","setDefaultOptions","clearGcTimeout","gcTimeout","optionalRemove","clearTimeout","remove","setData","updater","prevData","data","input","functionalUpdate","isDataEqual","_this$options$isDataE","structuralSharing","dispatch","type","dataUpdatedAt","setState","setStateOptions","retryer","destroy","reset","observer","enabled","isInvalidated","getCurrentResult","isStaleByTime","find","shouldFetchOnWindowFocus","refetch","shouldFetchOnReconnect","addObserver","notify","removeObserver","getObserversCount","invalidate","fetch","fetchOptions","cancelRefetch","abortController","queryFnContext","pageParam","defineProperty","enumerable","get","signal","context","fetchFn","behavior","_this$options$behavio","onFetch","revertState","fetchMeta","_context$fetchOptions","_context$fetchOptions2","_abortController$abor","bind","action","reducer","onQueryUpdate","initialData","initialDataUpdatedAt","hasData","dataUpdateCount","errorUpdateCount","errorUpdatedAt","fetchFailureCount","QueryCache","queries","queriesMap","build","client","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","_this4","_this5","Mutation","mutationId","mutationCache","execute","restored","variables","onMutate","executeMutation","onSettled","mutationFn","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","refetchPage","fetchMore","_context$fetchOptions3","_context$fetchOptions4","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","abortSignal","newPageParams","cancelled","buildNewPages","param","page","previous","fetchPage","manual","queryFnResult","getNextPageParam","getPreviousPageParam","shouldFetchFirstPage","finalPromise","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryClient","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","isMutating","getQueryData","_this$queryCache$find","getQueriesData","queryKeyOrFilters","getQueryCache","map","setQueryData","parsedOptions","defaultedOptions","setQueriesData","getQueryState","_this$queryCache$find2","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","refetchActive","refetchInactive","_this6","throwOnError","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","cancelMutations","_this7","getMutationCache","getDefaultOptions","setQueryDefaults","_this$queryDefaults$f","setMutationDefaults","_this$mutationDefault","_defaulted","defaultQueryObserverOptions","QueryObserver","trackedProps","previousSelectError","bindMethods","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","refetchOnReconnect","refetchOnWindowFocus","clearTimers","notifyOptions","prevOptions","prevQuery","Error","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","configurable","typedKey","getNextResult","unsubscribe","isError","getCurrentQuery","fetchOptimistic","clearStaleTimeout","staleTimeoutId","refetchInterval","nextInterval","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectError","placeholderData","isLoading","isIdle","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsExclusions","includedProps","changed","isIncluded","isExcluded","shallowEqualObjects","defaultNotifyOptions","_this8","retryOnMount","shouldLoadOnMount","refetchOnMount","shouldRefetchOnMount","suspense","QueriesObserver","observersMap","setQueries","onUpdate","updateObservers","index","getObserver","currentObserver","hasIndexChange","prevObservers","prevObserversMap","newResult","newObservers","newObserversMap","slice","replaceAt","InfiniteQueryObserver","_QueryObserver","fetchNextPage","fetchPreviousPage","_state$data","_state$data2","MutationObserver","mutate","currentMutation","mutateOptions","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","hydrate","dehydratedState","dehydratedMutation","_options$defaultOptio","dehydratedQuery","_options$defaultOptio2","defaultContext","React","createContext","QueryClientSharingContext","getQueryClientContext","contextSharing","ReactQueryClientContext","useQueryClient","queryClient","useContext","createValue","isReset","clearReset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","shouldThrowError","_useErrorBoundary","useBaseQuery","Observer","mountedRef","useRef","forceUpdate","useState","errorResetBoundary","useErrorBoundary","useEffect","current","useHydrate","optionsRef","useMemo","children","Context","Provider","dehydrateMutations","shouldDehydrateMutation","dehydrateMutation","dehydrateQueries","shouldDehydrateQuery","dehydrateQuery","newLogger","setIsFetching","filtersRef","isFetchingRef","newIsFetching","parseMutationFilterArgs","setIsMutating","isMutatingRef","newIsMutating","parseMutationArgs","obsRef","useCallback","mutateAsync","defaultedQueries"],"mappings":"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"}